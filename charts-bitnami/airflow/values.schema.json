{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Extra objects to deploy (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Add labels to all the deployed resources",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Add annotations to all the deployed resources",
            "default": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "auth": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "Username to access web UI",
                    "default": "user"
                },
                "password": {
                    "type": "string",
                    "description": "Password to access web UI",
                    "default": ""
                },
                "fernetKey": {
                    "type": "string",
                    "description": "Fernet key to secure connections",
                    "default": ""
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret key to run your flask app",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of an existing secret to use for Airflow credentials",
                    "default": ""
                }
            }
        },
        "executor": {
            "type": "string",
            "description": "Airflow executor. Allowed values: `SequentialExecutor`, `LocalExecutor`, `CeleryExecutor`, `KubernetesExecutor`, `CeleryKubernetesExecutor` and `LocalKubernetesExecutor`",
            "default": "CeleryExecutor"
        },
        "loadExamples": {
            "type": "boolean",
            "description": "Switch to load some Airflow examples",
            "default": false
        },
        "configuration": {
            "type": "string",
            "description": "Specify content for Airflow config file (auto-generated based on other env. vars otherwise)",
            "default": ""
        },
        "existingConfigmap": {
            "type": "string",
            "description": "Name of an existing ConfigMap with the Airflow config file",
            "default": ""
        },
        "dags": {
            "type": "object",
            "properties": {
                "existingConfigmap": {
                    "type": "string",
                    "description": "Name of an existing ConfigMap with all the DAGs files you want to load in Airflow",
                    "default": ""
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container load-dags image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container load-dags image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container load-dags image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container load-dags image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container load-dags image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Init container load-dags image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Add extra environment variables for all the Airflow pods",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "ConfigMap with extra environment variables for all the Airflow pods",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Secret with extra environment variables for all the Airflow pods",
            "default": ""
        },
        "extraEnvVarsSecrets": {
            "type": "array",
            "description": "List of secrets with extra environment variables for all the Airflow pods",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to all the Airflow pods",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to all the Airflow pods",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for all the Airflow pods",
            "default": [],
            "items": {}
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the all the Airflow pods",
            "default": [],
            "items": {}
        },
        "web": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Airflow image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Airflow image repository",
                            "default": "bitnami/airflow"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Airflow image tag (immutable tags are recommended)",
                            "default": "2.7.1-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Airflow image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Airflow image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Airflow image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable image debug mode",
                            "default": false
                        }
                    }
                },
                "baseUrl": {
                    "type": "string",
                    "description": "URL used to access to Airflow web ui",
                    "default": ""
                },
                "existingConfigmap": {
                    "type": "string",
                    "description": "Name of an existing config map containing the Airflow web config file",
                    "default": ""
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add Airflow web pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for Airflow web pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for Airflow web pods",
                    "default": ""
                },
                "extraEnvVarsSecrets": {
                    "type": "array",
                    "description": "List of secrets with extra environment variables for Airflow web pods",
                    "default": [],
                    "items": {}
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Airflow web HTTP container port",
                            "default": 8080
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Airflow web replicas",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Airflow web containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 180
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Airflow web containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Airflow web containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Airflow web containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Airflow web containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Airflow web pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Airflow web pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Airflow web containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Airflow web containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Airflow web containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Airflow web container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Deployment pod host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add extra labels to the Airflow web pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Add extra annotations to the Airflow web pods",
                    "default": {}
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Airflow web pods assignment (evaluated as a template)",
                    "default": {}
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `web.affinity` is set.",
                            "default": ""
                        },
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `web.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `web.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Airflow web pods assignment",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `web.affinity` is set. Allowed values: `soft` or `hard`.",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `web.affinity` is set. Allowed values: `soft` or `hard`.",
                    "default": "soft"
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Airflow web pods assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Airflow web pod needs to terminate gracefully",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Airflow web deployment strategy type",
                            "default": "RollingUpdate"
                        },
                        "rollingUpdate": {
                            "type": "object",
                            "description": "Airflow web deployment rolling update configuration parameters",
                            "default": {}
                        }
                    }
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Airflow web pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Airflow web pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Airflow web pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Airflow web pods",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Deploy a pdb object for the Airflow web pods",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Maximum number/percentage of unavailable Airflow web replicas",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of unavailable Airflow web replicas",
                            "default": ""
                        }
                    }
                }
            }
        },
        "scheduler": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Airflow Scheduler image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Airflow Scheduler image repository",
                            "default": "bitnami/airflow-scheduler"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Airflow Scheduler image tag (immutable tags are recommended)",
                            "default": "2.7.1-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Airflow Schefuler image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Airflow Scheduler image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Airflow Scheduler image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of scheduler replicas",
                    "default": 1
                },
                "command": {
                    "type": "array",
                    "description": "Override cmd",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override args",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Add extra environment variables",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap with extra environment variables",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret with extra environment variables",
                    "default": ""
                },
                "extraEnvVarsSecrets": {
                    "type": "array",
                    "description": "List of secrets with extra environment variables for Airflow scheduler pods",
                    "default": [],
                    "items": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Airflow scheduler containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Airflow scheduler containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Airflow scheduler pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Airflow scheduler pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Airflow scheduler containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Airflow scheduler containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Airflow scheduler containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Airflow scheduler container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Deployment pod host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add extra labels to the Airflow scheduler pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Add extra annotations to the Airflow scheduler pods",
                    "default": {}
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Airflow scheduler pods assignment (evaluated as a template)",
                    "default": {}
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `scheduler.affinity` is set.",
                            "default": ""
                        },
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `scheduler.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `scheduler.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Airflow scheduler pods assignment",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `scheduler.affinity` is set. Allowed values: `soft` or `hard`.",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `scheduler.affinity` is set. Allowed values: `soft` or `hard`.",
                    "default": "soft"
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Airflow scheduler pods assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Airflow scheduler pod needs to terminate gracefully",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Airflow scheduler deployment strategy type",
                            "default": "RollingUpdate"
                        },
                        "rollingUpdate": {
                            "type": "object",
                            "description": "Airflow scheduler deployment rolling update configuration parameters",
                            "default": {}
                        }
                    }
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Airflow scheduler pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Airflow scheduler pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Airflow scheduler pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Airflow scheduler pods",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Deploy a pdb object for the Airflow scheduler pods",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Maximum number/percentage of unavailable Airflow scheduler replicas",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of unavailable Airflow scheduler replicas",
                            "default": ""
                        }
                    }
                }
            }
        },
        "worker": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Airflow Worker image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Airflow Worker image repository",
                            "default": "bitnami/airflow-worker"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Airflow Worker image tag (immutable tags are recommended)",
                            "default": "2.7.1-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Airflow Worker image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Airflow Worker image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Airflow Worker image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable image debug mode",
                            "default": false
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add Airflow worker pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for Airflow worker pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for Airflow worker pods",
                    "default": ""
                },
                "extraEnvVarsSecrets": {
                    "type": "array",
                    "description": "List of secrets with extra environment variables for Airflow worker pods",
                    "default": [],
                    "items": {}
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Airflow worker HTTP container port",
                            "default": 8793
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Airflow worker replicas",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Airflow worker containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 180
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Airflow worker containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Airflow worker containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Airflow worker containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Airflow worker containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Airflow worker pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Airflow worker pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Airflow worker containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Airflow worker containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Airflow worker containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Airflow worker container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Deployment pod host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add extra labels to the Airflow worker pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Add extra annotations to the Airflow worker pods",
                    "default": {}
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Airflow worker pods assignment (evaluated as a template)",
                    "default": {}
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `worker.affinity` is set.",
                            "default": ""
                        },
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `worker.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Airflow worker pods assignment",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`.",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `worker.affinity` is set. Allowed values: `soft` or `hard`.",
                    "default": "soft"
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Airflow worker pods assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Airflow worker pod needs to terminate gracefully",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Airflow worker deployment strategy type",
                            "default": "RollingUpdate"
                        },
                        "rollingUpdate": {
                            "type": "object",
                            "description": "Airflow worker deployment rolling update configuration parameters",
                            "default": {}
                        }
                    }
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Airflow worker pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Airflow worker pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Airflow worker pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Airflow worker pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeClaimTemplates": {
                    "type": "array",
                    "description": "Optionally specify extra list of volumesClaimTemplates for the Airflow worker statefulset",
                    "default": [],
                    "items": {}
                },
                "podTemplate": {
                    "type": "object",
                    "description": "Template to replace the default one to be use when `executor=KubernetesExecutor` to create Airflow worker pods",
                    "default": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Deploy a pdb object for the Airflow worker pods",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Maximum number/percentage of unavailable Airflow worker replicas",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of unavailable Airflow worker replicas",
                            "default": ""
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether enable horizontal pod autoscaler",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "number",
                            "description": "Configure a minimum amount of pods",
                            "default": 1
                        },
                        "maxReplicas": {
                            "type": "number",
                            "description": "Configure a maximum amount of pods",
                            "default": 3
                        },
                        "targetCPU": {
                            "type": "number",
                            "description": "Define the CPU target to trigger the scaling actions (utilization percentage)",
                            "default": 80
                        },
                        "targetMemory": {
                            "type": "number",
                            "description": "Define the memory target to trigger the scaling actions (utilization percentage)",
                            "default": 80
                        }
                    }
                }
            }
        },
        "git": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Git image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Git image repository",
                            "default": "bitnami/git"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Git image tag (immutable tags are recommended)",
                            "default": "2.42.0-debian-11-r14"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Git image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Git image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Git image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "dags": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable in order to download DAG files from git repositories.",
                            "default": false
                        },
                        "repositories": {
                            "type": "array",
                            "description": "",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "repository": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "plugins": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable in order to download Plugins files from git repositories.",
                            "default": false
                        },
                        "repositories": {
                            "type": "array",
                            "description": "",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "repository": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "branch": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "name": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "path": {
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "clone": {
                    "type": "object",
                    "properties": {
                        "command": {
                            "type": "array",
                            "description": "Override cmd",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override args",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Add extra volume mounts",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVars": {
                            "type": "array",
                            "description": "Add extra environment variables",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVarsCM": {
                            "type": "string",
                            "description": "ConfigMap with extra environment variables",
                            "default": ""
                        },
                        "extraEnvVarsSecret": {
                            "type": "string",
                            "description": "Secret with extra environment variables",
                            "default": ""
                        },
                        "resources": {
                            "type": "object",
                            "description": "Clone init container resource requests and limits",
                            "default": {}
                        }
                    }
                },
                "sync": {
                    "type": "object",
                    "properties": {
                        "interval": {
                            "type": "number",
                            "description": "Interval in seconds to pull the git repository containing the plugins and/or DAG files",
                            "default": 60
                        },
                        "command": {
                            "type": "array",
                            "description": "Override cmd",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override args",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Add extra volume mounts",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVars": {
                            "type": "array",
                            "description": "Add extra environment variables",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVarsCM": {
                            "type": "string",
                            "description": "ConfigMap with extra environment variables",
                            "default": ""
                        },
                        "extraEnvVarsSecret": {
                            "type": "string",
                            "description": "Secret with extra environment variables",
                            "default": ""
                        },
                        "resources": {
                            "type": "object",
                            "description": "Sync sidecar container resource requests and limits",
                            "default": {}
                        }
                    }
                }
            }
        },
        "ldap": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable LDAP authentication",
                    "default": false
                },
                "uri": {
                    "type": "string",
                    "description": "Server URI, eg. ldap://ldap_server:389",
                    "default": "ldap://ldap_server:389"
                },
                "basedn": {
                    "type": "string",
                    "description": "Base of the search, eg. ou=example,o=org.",
                    "default": "dc=example,dc=org"
                },
                "searchAttribute": {
                    "type": "string",
                    "description": "if doing an indirect bind to ldap, this is the field that matches the username when searching for the account to bind to",
                    "default": "cn"
                },
                "binddn": {
                    "type": "string",
                    "description": "DN of the account used to search in the LDAP server.",
                    "default": "cn=admin,dc=example,dc=org"
                },
                "bindpw": {
                    "type": "string",
                    "description": "Bind Password",
                    "default": ""
                },
                "userRegistration": {
                    "type": "string",
                    "description": "Set to True to enable user self registration",
                    "default": "True"
                },
                "userRegistrationRole": {
                    "type": "string",
                    "description": "Set role name to be assign when a user registers himself. This role must already exist. Mandatory when using ldap.userRegistration",
                    "default": "Public"
                },
                "rolesMapping": {
                    "type": "string",
                    "description": "mapping from LDAP DN to a list of roles",
                    "default": "{ \"cn=All,ou=Groups,dc=example,dc=org\": [\"User\"], \"cn=Admins,ou=Groups,dc=example,dc=org\": [\"Admin\"], }"
                },
                "rolesSyncAtLogin": {
                    "type": "string",
                    "description": "replace ALL the user's roles each login, or only on registration",
                    "default": "True"
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled TLS/SSL for LDAP, you must include the CA file.",
                            "default": false
                        },
                        "allowSelfSigned": {
                            "type": "boolean",
                            "description": "Allow to use self signed certificates",
                            "default": true
                        },
                        "certificatesSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the certificate CA file that will be used by ldap client",
                            "default": ""
                        },
                        "certificatesMountPath": {
                            "type": "string",
                            "description": "Where LDAP certifcates are mounted.",
                            "default": "/opt/bitnami/airflow/conf/certs"
                        },
                        "CAFilename": {
                            "type": "string",
                            "description": "LDAP CA cert filename",
                            "default": ""
                        }
                    }
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Airflow service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Airflow service HTTP port",
                            "default": 8080
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Node port for HTTP",
                            "default": ""
                        }
                    }
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Airflow service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "Airflow service Load Balancer IP",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Airflow service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Airflow service external traffic policy",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for Airflow service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra port to expose on Airflow service",
                    "default": [],
                    "items": {}
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress record generation for Airflow",
                    "default": false
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress record",
                    "default": "airflow.local"
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "Custom TLS certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable creation of ServiceAccount for Airflow pods",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to use.",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for the ServiceAccount",
                    "default": {}
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Create Role and RoleBinding",
                    "default": false
                },
                "rules": {
                    "type": "array",
                    "description": "Custom RBAC rules to set",
                    "default": [],
                    "items": {}
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to create a standalone Airflow exporter to expose Airflow metrics",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Airflow exporter image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Airflow exporter image repository",
                            "default": "bitnami/airflow-exporter"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Airflow exporter image tag (immutable tags are recommended)",
                            "default": "0.20220314.0-debian-11-r407"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Airflow exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Airflow exporter image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Airflow exporter image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add Airflow exporter pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for Airflow exporter pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for Airflow exporter pods",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Airflow exporter metrics container port",
                            "default": 9112
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for the pods",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Airflow exporter pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Airflow exporter containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Airflow exporter containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Airflow exporter containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Airflow exporter container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Airflow exporter pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Airflow exporter pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Extra annotations for Airflow exporter pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `metrics.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `metrics.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `metrics.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match Ignored if `metrics.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `metrics.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for Airflow exporter",
                    "default": ""
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Airflow exporter metrics service port",
                                    "default": 9112
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Static clusterIP or None for headless services",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ .Values.metrics.service.ports.http }}"
                                        }
                                    }
                                }
                            }
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Control where client requests go, to the same pod or round-robin",
                            "default": "None"
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                }
            }
        },
        "postgresql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Switch to enable or disable the PostgreSQL helm chart",
                    "default": true
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "enablePostgresUser": {
                            "type": "boolean",
                            "description": "Assign a password to the \"postgres\" admin user. Otherwise, remote access will be blocked for this user",
                            "default": true
                        },
                        "username": {
                            "type": "string",
                            "description": "Name for a custom user to create",
                            "default": "bn_airflow"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for the custom user to create",
                            "default": ""
                        },
                        "database": {
                            "type": "string",
                            "description": "Name for a custom database to create",
                            "default": "bitnami_airflow"
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of existing secret to use for PostgreSQL credentials",
                            "default": ""
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "PostgreSQL architecture (`standalone` or `replication`)",
                    "default": "standalone"
                }
            }
        },
        "externalDatabase": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Database host",
                    "default": "localhost"
                },
                "port": {
                    "type": "number",
                    "description": "Database port number",
                    "default": 5432
                },
                "user": {
                    "type": "string",
                    "description": "Non-root username for Airflow",
                    "default": "bn_airflow"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the non-root username for Airflow",
                    "default": ""
                },
                "database": {
                    "type": "string",
                    "description": "Airflow database name",
                    "default": "bitnami_airflow"
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of an existing secret resource containing the database credentials",
                    "default": ""
                },
                "existingSecretPasswordKey": {
                    "type": "string",
                    "description": "Name of an existing secret key containing the database credentials",
                    "default": ""
                }
            }
        },
        "redis": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Switch to enable or disable the Redis&reg; helm",
                    "default": true
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable password authentication",
                            "default": true
                        },
                        "password": {
                            "type": "string",
                            "description": "Redis&reg; password",
                            "default": ""
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "The name of an existing secret with Redis&reg; credentials",
                            "default": ""
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "Redis&reg; architecture. Allowed values: `standalone` or `replication`",
                    "default": "standalone"
                }
            }
        },
        "externalRedis": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Redis&reg; host",
                    "default": "localhost"
                },
                "port": {
                    "type": "number",
                    "description": "Redis&reg; port number",
                    "default": 6379
                },
                "username": {
                    "type": "string",
                    "description": "Redis&reg; username",
                    "default": ""
                },
                "password": {
                    "type": "string",
                    "description": "Redis&reg; password",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of an existing secret resource containing the Redis&trade credentials",
                    "default": ""
                },
                "existingSecretPasswordKey": {
                    "type": "string",
                    "description": "Name of an existing secret key containing the Redis&trade credentials",
                    "default": ""
                }
            }
        }
    }
}