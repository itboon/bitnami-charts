{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Argo CD image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Argo CD image repository",
                    "default": "bitnami/argo-cd"
                },
                "tag": {
                    "type": "string",
                    "description": "Argo CD image tag (immutable tags are recommended)",
                    "default": "2.8.3-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "Argo CD image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Argo CD image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Argo CD image pull secrets",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable Argo CD image debug mode",
                    "default": false
                }
            }
        },
        "controller": {
            "type": "object",
            "properties": {
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Argo CD replicas to deploy",
                    "default": 1
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Argo CD nodes",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Argo CD nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Argo CD nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Argo CD containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Argo CD containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Argo CD pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Argo CD containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Argo CD containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Argo CD containers' Security Context capabilities to be dropped",
                                    "default": [
                                        "all"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Argo CD containers' Security Context readOnlyRootFilesystem",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Argo CD container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the application controller service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "clusterAdminAccess": {
                    "type": "boolean",
                    "description": "Enable K8s cluster admin access for the application controller",
                    "default": true
                },
                "clusterRoleRules": {
                    "type": "array",
                    "description": "Use custom rules for the application controller's cluster role",
                    "default": [],
                    "items": {}
                },
                "logFormat": {
                    "type": "string",
                    "description": "Format for the Argo CD application controller logs. Options: [text, json]",
                    "default": "text"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level for the Argo CD application controller",
                    "default": "info"
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "controller": {
                            "type": "number",
                            "description": "Argo CD application controller port number",
                            "default": 8082
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Argo CD application controller metrics port number",
                            "default": 8082
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD service type",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "Argo CD application controller service port",
                            "default": 8082
                        },
                        "nodePort": {
                            "type": "string",
                            "description": "Node port for Argo CD application controller service",
                            "default": ""
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Argo CD application controller service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Argo CD application controller service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Argo CD application controller service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Argo CD application controller service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Argo CD application controller service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Argo CD application controller metrics",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Argo CD application controller service type",
                                    "default": "ClusterIP"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Argo CD application controller metrics service port",
                                    "default": 8082
                                },
                                "nodePort": {
                                    "type": "string",
                                    "description": "Node port for the application controller service",
                                    "default": ""
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Argo CD application controller metrics service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Argo CD application controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Argo CD application controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Argo CD application controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Argo CD application controller service",
                                    "default": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": "10s"
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "ServiceMonitor selector labels",
                                    "default": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                }
                            }
                        },
                        "rules": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable render extra rules for PrometheusRule object",
                                    "default": false
                                },
                                "spec": {
                                    "type": "array",
                                    "description": "Rules to render into the PrometheusRule object",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Selector for the PrometheusRule object",
                                    "default": {}
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace where to create the PrometheusRule object",
                                    "default": "monitoring"
                                },
                                "additionalLabels": {
                                    "type": "object",
                                    "description": "Additional lables to add to the PrometheusRule object",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "defaultArgs": {
                    "type": "object",
                    "properties": {
                        "statusProcessors": {
                            "type": "string",
                            "description": "Default status processors for Argo CD controller",
                            "default": "20"
                        },
                        "operationProcessors": {
                            "type": "string",
                            "description": "Default operation processors for Argo CD controller",
                            "default": "10"
                        },
                        "appResyncPeriod": {
                            "type": "string",
                            "description": "Default application resync period for Argo CD controller",
                            "default": "180"
                        },
                        "selfHealTimeout": {
                            "type": "string",
                            "description": "Default self heal timeout for Argo CD controller",
                            "default": "5"
                        }
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images). Overrides the defaultArgs.",
                    "default": [],
                    "items": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Add extra arguments to the default arguments for the Argo CD controller",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Argo CD pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Argo CD pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Argo CD pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `controller.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `controller.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Argo CD pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Argo CD pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Argo CD pods assignment",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Enable shared process namespace in a pod.",
                    "default": false
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Argo CD pods' priorityClassName",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by pod(s)",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Argo CD container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Argo CD nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Argo CD nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Argo CD nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Argo CD pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Argo CD container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Argo CD pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Argo CD pod(s)",
                    "default": [],
                    "items": {}
                }
            }
        },
        "applicationSet": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ApplicationSet controller",
                    "default": false
                },
                "replicaCount": {
                    "type": "number",
                    "description": "The number of ApplicationSet controller pods to run",
                    "default": 1
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "defaultArgs": {
                    "type": "object",
                    "properties": {
                        "enableLeaderElection": {
                            "type": "boolean",
                            "description": "Enable leader election",
                            "default": false
                        },
                        "policy": {
                            "type": "string",
                            "description": "Default policy",
                            "default": "sync"
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable debug mode",
                            "default": false
                        },
                        "dryRun": {
                            "type": "boolean",
                            "description": "Enable dry-run mode",
                            "default": false
                        }
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images). Overrides the defaultArgs.",
                    "default": [],
                    "items": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Add extra arguments to the default arguments for the Argo CD applicationSet controller",
                    "default": [],
                    "items": {}
                },
                "logFormat": {
                    "type": "string",
                    "description": "Format for the Argo CD applicationSet controller logs. Options: [text, json]",
                    "default": "text"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level for the Argo CD applicationSet controller",
                    "default": "info"
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Argo CD applicationSet controller metrics port number",
                            "default": 8085
                        },
                        "probe": {
                            "type": "number",
                            "description": "Argo CD applicationSet controller probe port number",
                            "default": 8081
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Argo CD applicationSet controller metrics",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Argo CD applicationSet controller service type",
                                    "default": "ClusterIP"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Argo CD applicationSet controller metrics service port",
                                    "default": 8085
                                },
                                "nodePort": {
                                    "type": "string",
                                    "description": "Node port for the applicationSet controller service",
                                    "default": ""
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Argo CD applicationSet controller metrics service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Argo CD applicationSet controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Argo CD applicationSet controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Argo CD applicationSet controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Argo CD applicationSet controller service",
                                    "default": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": "10s"
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "ServiceMonitor selector labels",
                                    "default": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD applicationSet controller service type",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "Argo CD applicationSet controller service port",
                            "default": 7000
                        },
                        "nodePort": {
                            "type": "string",
                            "description": "Node port for Argo CD applicationSet controller service",
                            "default": ""
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Argo CD applicationSet controller service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Argo CD applicationSet controller service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Argo CD applicationSet controller service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Argo CD applicationSet controller service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Argo CD applicationSet controller service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the applicationSet controller service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `applicationSet.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `applicationSet.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `applicationSet.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `applicationSet.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `applicationSet.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Argo CD applicationSet controller pods assignment",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Argo CD applicationSet controller pods",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Argo CD applicationSet controller pods",
                    "default": {}
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD applicationSet controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Argo CD applicationSet controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Argo CD applicationSet controller containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Argo CD applicationSet controller containers' Security Context capabilities to be dropped",
                                    "default": [
                                        "all"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Argo CD applicationSet controller containers' Security Context readOnlyRootFilesystem",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Argo CD applicationSet controller container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Argo CD applicationSet controller nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Argo CD applicationSet controller nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Argo CD applicationSet controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Argo CD applicationSet controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD applicationSet controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Argo CD applicationSet controller pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Argo CD applicationSet controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Argo CD applicationSet controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD applicationSet controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Argo CD applicationSet controller pods' priorityClassName",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Argo CD applicationSet controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Argo CD applicationSet controller container(s)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Argo CD applicationSet controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Argo CD applicationSet controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Argo CD applicationSet controller nodes",
                    "default": ""
                },
                "webhook": {
                    "type": "object",
                    "properties": {
                        "ingress": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable an ingress resource for Webhooks",
                                    "default": false
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional ingress annotations",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Additional ingress labels",
                                    "default": {}
                                },
                                "ingressClassName": {
                                    "type": "string",
                                    "description": "Defines which ingress controller will implement the resource",
                                    "default": ""
                                },
                                "hostname": {
                                    "type": "string",
                                    "description": "Ingress hostname for the Argo CD applicationSet ingress",
                                    "default": ""
                                },
                                "path": {
                                    "type": "string",
                                    "description": "Argo CD applicationSet ingress path",
                                    "default": "/api/webhook"
                                },
                                "pathType": {
                                    "type": "string",
                                    "description": "Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`",
                                    "default": "Prefix"
                                },
                                "extraHosts": {
                                    "type": "array",
                                    "description": "Extra hosts array for the Argo CD applicationSet ingress",
                                    "default": [],
                                    "items": {}
                                },
                                "extraPaths": {
                                    "type": "array",
                                    "description": "Extra paths for the Argo CD applicationSet ingress",
                                    "default": [],
                                    "items": {}
                                },
                                "extraTls": {
                                    "type": "array",
                                    "description": "Extra TLS configuration for the Argo CD applicationSet ingress",
                                    "default": [],
                                    "items": {}
                                },
                                "tls": {
                                    "type": "array",
                                    "description": "Ingress TLS configuration",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "notifications": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable notifications controller",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images).",
                    "default": [],
                    "items": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Add extra arguments to the default arguments for the Argo CD notifications controller",
                    "default": [],
                    "items": {}
                },
                "logFormat": {
                    "type": "string",
                    "description": "Format for the Argo CD notifications controller logs. Options: [text, json]",
                    "default": "text"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level for the Argo CD notifications controller",
                    "default": "info"
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Argo CD notifications controller metrics port number",
                            "default": 8085
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Argo CD notifications controller metrics",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Argo CD notifications controller service type",
                                    "default": "ClusterIP"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Argo CD notifications controller metrics service port",
                                    "default": 8085
                                },
                                "nodePort": {
                                    "type": "string",
                                    "description": "Node port for the notifications controller service",
                                    "default": ""
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Argo CD notifications controller metrics service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Argo CD notifications controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Argo CD notifications controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Argo CD notifications controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Argo CD notifications controller service",
                                    "default": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": "10s"
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "ServiceMonitor selector labels",
                                    "default": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD notifications controller service type",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "Argo CD notifications controller service port",
                            "default": 7000
                        },
                        "nodePort": {
                            "type": "string",
                            "description": "Node port for Argo CD notifications controller service",
                            "default": ""
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Argo CD notifications controller service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Argo CD notifications controller service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Argo CD notifications controller service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Argo CD notifications controller service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Argo CD notifications controller service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the notifications controller service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `notifications.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `notifications.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `notifications.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `notifications.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `notifications.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Argo CD notifications controller pods assignment",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Argo CD notifications controller pods",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Argo CD notifications controller pods",
                    "default": {}
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD notifications controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Argo CD notifications controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Argo CD notifications controller containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Argo CD notifications controller containers' Security Context capabilities to be dropped",
                                    "default": [
                                        "all"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Argo CD notifications controller containers' Security Context readOnlyRootFilesystem",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Argo CD notifications controller container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Argo CD notifications controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Argo CD notifications controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD notifications controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Argo CD notifications controller pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Argo CD notifications controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Argo CD notifications controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Argo CD notifications controller pods' priorityClassName",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Argo CD notifications controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Argo CD notifications controller container(s)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Argo CD notifications controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Argo CD notifications controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Argo CD notifications controller nodes",
                    "default": ""
                },
                "webhook": {
                    "type": "object",
                    "properties": {
                        "ingress": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable an ingress resource for Webhooks",
                                    "default": false
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional ingress annotations",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Additional ingress labels",
                                    "default": {}
                                },
                                "ingressClassName": {
                                    "type": "string",
                                    "description": "Defines which ingress controller will implement the resource",
                                    "default": ""
                                },
                                "hostname": {
                                    "type": "string",
                                    "description": "Ingress hostname for the Argo CD notifications ingress",
                                    "default": ""
                                },
                                "path": {
                                    "type": "string",
                                    "description": "Argo CD notifications ingress path",
                                    "default": "/api/webhook"
                                },
                                "pathType": {
                                    "type": "string",
                                    "description": "Ingress path type. One of `Exact`, `Prefix` or `ImplementationSpecific`",
                                    "default": "Prefix"
                                },
                                "extraHosts": {
                                    "type": "array",
                                    "description": "Extra hosts array for the Argo CD notifications ingress",
                                    "default": [],
                                    "items": {}
                                },
                                "extraPaths": {
                                    "type": "array",
                                    "description": "Extra paths for the Argo CD notifications ingress",
                                    "default": [],
                                    "items": {}
                                },
                                "extraTls": {
                                    "type": "array",
                                    "description": "Extra TLS configuration for the Argo CD notifications ingress",
                                    "default": [],
                                    "items": {}
                                },
                                "tls": {
                                    "type": "array",
                                    "description": "Ingress TLS configuration",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "bots": {
                    "type": "object",
                    "properties": {
                        "slack": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable notifications controller",
                                    "default": false
                                },
                                "command": {
                                    "type": "array",
                                    "description": "Override default container command (useful when using custom images)",
                                    "default": [],
                                    "items": {}
                                },
                                "args": {
                                    "type": "array",
                                    "description": "Override default container args (useful when using custom images).",
                                    "default": [],
                                    "items": {}
                                },
                                "extraArgs": {
                                    "type": "array",
                                    "description": "Add extra arguments to the default arguments for the Argo CD Slack bot",
                                    "default": [],
                                    "items": {}
                                },
                                "service": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "description": "Argo CD Slack bot service type",
                                            "default": "LoadBalancer"
                                        },
                                        "port": {
                                            "type": "number",
                                            "description": "Argo CD Slack bot service port",
                                            "default": 80
                                        },
                                        "nodePort": {
                                            "type": "string",
                                            "description": "Node port for Argo CD Slack bot service",
                                            "default": ""
                                        },
                                        "clusterIP": {
                                            "type": "string",
                                            "description": "Argo CD Slack bot service Cluster IP",
                                            "default": ""
                                        },
                                        "loadBalancerIP": {
                                            "type": "string",
                                            "description": "Argo CD Slack bot service Load Balancer IP",
                                            "default": ""
                                        },
                                        "loadBalancerSourceRanges": {
                                            "type": "array",
                                            "description": "Argo CD Slack bot service Load Balancer sources",
                                            "default": [],
                                            "items": {}
                                        },
                                        "externalTrafficPolicy": {
                                            "type": "string",
                                            "description": "Argo CD Slack bot service external traffic policy",
                                            "default": "Cluster"
                                        },
                                        "annotations": {
                                            "type": "object",
                                            "description": "Additional custom annotations for Argo CD Slack bot service",
                                            "default": {}
                                        },
                                        "extraPorts": {
                                            "type": "array",
                                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                                            "default": [],
                                            "items": {}
                                        },
                                        "sessionAffinity": {
                                            "type": "string",
                                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                            "default": "None"
                                        },
                                        "sessionAffinityConfig": {
                                            "type": "object",
                                            "description": "Additional settings for the sessionAffinity",
                                            "default": {}
                                        }
                                    }
                                },
                                "serviceAccount": {
                                    "type": "object",
                                    "properties": {
                                        "create": {
                                            "type": "boolean",
                                            "description": "Specifies whether a ServiceAccount should be created",
                                            "default": true
                                        },
                                        "name": {
                                            "type": "string",
                                            "description": "The name of the ServiceAccount to use.",
                                            "default": ""
                                        },
                                        "automountServiceAccountToken": {
                                            "type": "boolean",
                                            "description": "Automount service account token for the notifications controller service account",
                                            "default": true
                                        },
                                        "annotations": {
                                            "type": "object",
                                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                                            "default": {}
                                        }
                                    }
                                },
                                "podAffinityPreset": {
                                    "type": "string",
                                    "description": "Pod affinity preset. Ignored if `notifications.bots.slack.affinity` is set. Allowed values: `soft` or `hard`",
                                    "default": ""
                                },
                                "podAntiAffinityPreset": {
                                    "type": "string",
                                    "description": "Pod anti-affinity preset. Ignored if `notifications.bots.slack.affinity` is set. Allowed values: `soft` or `hard`",
                                    "default": "soft"
                                },
                                "nodeAffinityPreset": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "description": "Node affinity preset type. Ignored if `notifications.bots.slack.affinity` is set. Allowed values: `soft` or `hard`",
                                            "default": ""
                                        },
                                        "key": {
                                            "type": "string",
                                            "description": "Node label key to match. Ignored if `notifications.bots.slack.affinity` is set",
                                            "default": ""
                                        },
                                        "values": {
                                            "type": "array",
                                            "description": "Node label values to match. Ignored if `notifications.bots.slack.affinity` is set",
                                            "default": [],
                                            "items": {}
                                        }
                                    }
                                },
                                "affinity": {
                                    "type": "object",
                                    "description": "Affinity for Argo CD Slack bot pods assignment",
                                    "default": {}
                                },
                                "podAnnotations": {
                                    "type": "object",
                                    "description": "Annotations for Argo CD Slack bot pods",
                                    "default": {}
                                },
                                "podLabels": {
                                    "type": "object",
                                    "description": "Extra labels for Argo CD Slack bot pods",
                                    "default": {}
                                },
                                "containerSecurityContext": {
                                    "type": "object",
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "Enabled Argo CD Slack bot containers' Security Context",
                                            "default": true
                                        },
                                        "runAsUser": {
                                            "type": "number",
                                            "description": "Set Argo CD Slack bot containers' Security Context runAsUser",
                                            "default": 1001
                                        },
                                        "allowPrivilegeEscalation": {
                                            "type": "boolean",
                                            "description": "Set Argo CD Slack bot containers' Security Context allowPrivilegeEscalation",
                                            "default": false
                                        },
                                        "capabilities": {
                                            "type": "object",
                                            "properties": {
                                                "drop": {
                                                    "type": "array",
                                                    "description": "Set Argo CD Slack bot containers' Security Context capabilities to be dropped",
                                                    "default": [
                                                        "all"
                                                    ],
                                                    "items": {
                                                        "type": "string"
                                                    }
                                                }
                                            }
                                        },
                                        "readOnlyRootFilesystem": {
                                            "type": "boolean",
                                            "description": "Set Argo CD Slack bot containers' Security Context readOnlyRootFilesystem",
                                            "default": false
                                        },
                                        "runAsNonRoot": {
                                            "type": "boolean",
                                            "description": "Set Argo CD Slack bot container's Security Context runAsNonRoot",
                                            "default": true
                                        }
                                    }
                                },
                                "resources": {
                                    "type": "object",
                                    "properties": {
                                        "limits": {
                                            "type": "object",
                                            "description": "The resources limits for the Argo CD Slack bot containers",
                                            "default": {}
                                        },
                                        "requests": {
                                            "type": "object",
                                            "description": "The requested resources for the Argo CD Slack bot containers",
                                            "default": {}
                                        }
                                    }
                                },
                                "podSecurityContext": {
                                    "type": "object",
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "Enabled Argo CD Slack bot pods' Security Context",
                                            "default": true
                                        },
                                        "fsGroup": {
                                            "type": "number",
                                            "description": "Set Argo CD Slack bot pod's Security Context fsGroup",
                                            "default": 1001
                                        }
                                    }
                                },
                                "nodeSelector": {
                                    "type": "object",
                                    "description": "Node labels for Argo CD Slack bot pods assignment",
                                    "default": {}
                                },
                                "tolerations": {
                                    "type": "array",
                                    "description": "Tolerations for Argo CD Slack bot pods assignment",
                                    "default": [],
                                    "items": {}
                                },
                                "priorityClassName": {
                                    "type": "string",
                                    "description": "Argo CD Slack bot pods' priorityClassName",
                                    "default": ""
                                },
                                "extraVolumes": {
                                    "type": "array",
                                    "description": "Optionally specify extra list of additional volumes for the Argo CD Slack bot pod(s)",
                                    "default": [],
                                    "items": {}
                                },
                                "extraVolumeMounts": {
                                    "type": "array",
                                    "description": "Optionally specify extra list of additional volumeMounts for the Argo CD Slack bot container(s)",
                                    "default": [],
                                    "items": {}
                                },
                                "extraEnvVars": {
                                    "type": "array",
                                    "description": "Array with extra environment variables to add to Argo CD Slack bot nodes",
                                    "default": [],
                                    "items": {}
                                },
                                "extraEnvVarsCM": {
                                    "type": "string",
                                    "description": "Name of existing ConfigMap containing extra env vars for Argo CD Slack bot nodes",
                                    "default": ""
                                },
                                "extraEnvVarsSecret": {
                                    "type": "string",
                                    "description": "Name of existing Secret containing extra env vars for Argo CD Slack bot nodes",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "server": {
            "type": "object",
            "properties": {
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Argo CD server replicas to deploy",
                    "default": 1
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Argo CD server nodes",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Argo CD server nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Argo CD server nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Argo CD server containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Argo CD server containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD server pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Argo CD server pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD server containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Argo CD server containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Argo CD server containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Argo CD containers' server Security Context capabilities to be dropped",
                                    "default": [
                                        "all"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Argo CD containers' server Security Context readOnlyRootFilesystem",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Argo CD server containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Argo CD server deployment autoscaling",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "number",
                            "description": "Argo CD server deployment autoscaling minimum number of replicas",
                            "default": 1
                        },
                        "maxReplicas": {
                            "type": "number",
                            "description": "Argo CD server deployment autoscaling maximum number of replicas",
                            "default": 5
                        },
                        "targetCPU": {
                            "type": "number",
                            "description": "Argo CD server deployment autoscaling target CPU percentage",
                            "default": 50
                        },
                        "targetMemory": {
                            "type": "number",
                            "description": "Argo CD server deployment autoscaling target CPU memory",
                            "default": 50
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable HTTPS redirection for Argo CD server",
                    "default": false
                },
                "logFormat": {
                    "type": "string",
                    "description": "ArgoCD server logs format. Options: [text, json]",
                    "default": "text"
                },
                "logLevel": {
                    "type": "string",
                    "description": "ArgoCD server logs level",
                    "default": "info"
                },
                "configEnabled": {
                    "type": "boolean",
                    "description": "Enable Argo CD server config",
                    "default": true
                },
                "url": {
                    "type": "string",
                    "description": "Argo CD server base URL. Required when configuring SSO. Required when enabling dex.",
                    "default": ""
                },
                "config": {
                    "type": "object",
                    "properties": {
                        "url": {
                            "type": "string",
                            "description": "",
                            "default": "{{ .Values.server.url }}"
                        },
                        "application": {
                            "type": "object",
                            "properties": {
                                "instanceLabelKey": {
                                    "type": "string",
                                    "description": "",
                                    "default": "argocd.argoproj.io/instance"
                                }
                            }
                        },
                        "dex": {
                            "type": "object",
                            "properties": {
                                "config": {
                                    "type": "string",
                                    "description": "",
                                    "default": ""
                                }
                            }
                        }
                    }
                },
                "ingress": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the creation of an ingress for the Argo CD server",
                            "default": false
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Path type for the Argo CD server ingress",
                            "default": "ImplementationSpecific"
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Ingress API version for the Argo CD server ingress",
                            "default": ""
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Ingress hostname for the Argo CD server ingress",
                            "default": "argocd.server.local"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the Argo CD server ingress. To enable certificate autogeneration, place here your cert-manager annotations.",
                            "default": {}
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS for the Argo CD server ingress",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "Extra hosts array for the Argo CD server ingress",
                            "default": [],
                            "items": {}
                        },
                        "path": {
                            "type": "string",
                            "description": "Path array for the Argo CD server ingress",
                            "default": "/"
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "Extra paths for the Argo CD server ingress",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "Extra TLS configuration for the Argo CD server ingress",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "Secrets array to mount into the Ingress",
                            "default": [],
                            "items": {}
                        },
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "selfSigned": {
                            "type": "boolean",
                            "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                            "default": false
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable metrics for the Argo CD server",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Argo CD server service type",
                                    "default": "ClusterIP"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Argo CD server metrics service port",
                                    "default": 8083
                                },
                                "nodePort": {
                                    "type": "string",
                                    "description": "Node port for Argo CD server metrics service",
                                    "default": ""
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Argo CD server metrics service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Argo CD server service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Argo CD server service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Argo CD server service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Argo CD server service",
                                    "default": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": "10s"
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "ServiceMonitor selector labels",
                                    "default": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "ingressGrpc": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the creation of an ingress for the Argo CD gRPC server",
                            "default": false
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Path type for the Argo CD gRPC server ingress",
                            "default": "ImplementationSpecific"
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Ingress API version for the Argo CD gRPC server ingress",
                            "default": ""
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Ingress hostname for the Argo CD gRPC server ingress",
                            "default": "argocd.server.local"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the Argo CD gRPC server ingress. To enable certificate autogeneration, place here your cert-manager annotations",
                            "default": {}
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS for the Argo CD server ingress",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "Extra hosts array for the Argo CD gRPC server ingress",
                            "default": [],
                            "items": {}
                        },
                        "path": {
                            "type": "string",
                            "description": "Path array for the Argo CD gRPC server ingress",
                            "default": "/"
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "Extra paths for the Argo CD gRPC server ingress",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "Extra TLS configuration for the Argo CD gRPC server ingress",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "Secrets array to mount into the Ingress",
                            "default": [],
                            "items": {}
                        },
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "selfSigned": {
                            "type": "boolean",
                            "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                            "default": false
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Argo CD server HTTP container port",
                            "default": 8080
                        },
                        "https": {
                            "type": "number",
                            "description": "Argo CD server HTTPS container port",
                            "default": 8443
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Argo CD server metrics container port",
                            "default": 8083
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "HTTP port for the gRPC ingress when enabled",
                                    "default": 80
                                },
                                "https": {
                                    "type": "number",
                                    "description": "HTTPS port for the gRPC ingress when enabled",
                                    "default": 443
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Node port for HTTP",
                                    "default": ""
                                },
                                "https": {
                                    "type": "string",
                                    "description": "Node port for HTTPS",
                                    "default": ""
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Argo CD service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Argo CD service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Argo CD service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Argo CD service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Argo CD service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "concat to the default args",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Argo CD server pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Argo CD server pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Argo CD server pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `server.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `server.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Argo CD server pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Argo CD server pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Argo CD server pods assignment",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Enable shared process namespace in a pod.",
                    "default": false
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD server statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Argo CD server pods' priorityClassName",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by pod(s)",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Argo CD server container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Argo CD server nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Argo CD server nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Argo CD server nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Argo CD server pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Argo CD server container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Argo CD server pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Argo CD server pod(s)",
                    "default": [],
                    "items": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "repoServer": {
            "type": "object",
            "properties": {
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Argo CD repo server replicas to deploy",
                    "default": 1
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Argo CD repo server nodes",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Argo CD repo server nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Argo CD repo server nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Argo CD repo server containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Argo CD repo server containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD repo server pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Argo CD repo server pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Argo CD repo server containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Argo CD repo server containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Argo CD repo server containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Argo CD containers' repo server Security Context capabilities to be dropped",
                                    "default": [
                                        "all"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Argo CD containers' repo server Security Context readOnlyRootFilesystem",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Argo CD repo server containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Repo server service type",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "Repo server service port",
                            "default": 8081
                        },
                        "nodePort": {
                            "type": "string",
                            "description": "Node port for the repo server service",
                            "default": ""
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Repo server service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Repo server service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Repo server service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Repo server service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Repo server service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "logFormat": {
                    "type": "string",
                    "description": "Format for the Argo CD repo server logs. Options: [text, json]",
                    "default": "text"
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level for the Argo CD repo server",
                    "default": "info"
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "repoServer": {
                            "type": "number",
                            "description": "Container port for Argo CD repo server",
                            "default": 8081
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Metrics port for Argo CD repo server",
                            "default": 8084
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable metrics for the Argo CD repo server",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Argo CD repo server service type",
                                    "default": "ClusterIP"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Argo CD repo server metrics service port",
                                    "default": 8084
                                },
                                "nodePort": {
                                    "type": "string",
                                    "description": "Node port for the repo server metrics service",
                                    "default": ""
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Argo CD repo server metrics service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Argo CD repo server service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Argo CD repo server service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Argo CD repo server service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Argo CD repo server service",
                                    "default": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": "10s"
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "ServiceMonitor selector labels",
                                    "default": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Argo CD repo server deployment autoscaling",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "number",
                            "description": "Argo CD repo server deployment autoscaling minimum number of replicas",
                            "default": 1
                        },
                        "maxReplicas": {
                            "type": "number",
                            "description": "Argo CD repo server deployment autoscaling maximum number of replicas",
                            "default": 5
                        },
                        "targetCPU": {
                            "type": "number",
                            "description": "Argo CD repo server deployment autoscaling target CPU percentage",
                            "default": 50
                        },
                        "targetMemory": {
                            "type": "number",
                            "description": "Argo CD repo server deployment autoscaling target CPU memory",
                            "default": 50
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount for repo server should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount for repo server to use.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the repo server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Add extra args to the default repo server args",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Argo CD repo server pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Argo CD repo server pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Argo CD repo server pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `repoServer.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `repoServer.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `repoServer.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `repoServer.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `repoServer.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Argo CD repo server pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Argo CD repo server pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Argo CD repo server pods assignment",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Enable shared process namespace in a pod.",
                    "default": false
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo CD repo server statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Argo CD repo server pods' priorityClassName",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by pod(s)",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Argo CD repo server container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Argo CD repo server nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Argo CD repo server nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Argo CD repo server nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Argo CD repo server pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Argo CD repo server container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Argo CD repo server pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Argo CD repo server pod(s)",
                    "default": [],
                    "items": {}
                }
            }
        },
        "dex": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Dex image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Dex image repository",
                            "default": "bitnami/dex"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Dex image tag (immutable tags are recommended)",
                            "default": "2.37.0-debian-11-r66"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Dex image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Dex image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Dex image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Dex image debug mode",
                            "default": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the creation of a Dex deployment for SSO",
                    "default": false
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Dex replicas to deploy",
                    "default": 1
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Dex nodes",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Dex nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Dex nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Dex containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Dex containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Dex pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Dex pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Dex containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Dex containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Dex containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Dex containers' server Security Context readOnlyRootFilesystem",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Dex containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Dex service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Dex HTTP service port",
                                    "default": 5556
                                },
                                "grpc": {
                                    "type": "number",
                                    "description": "Dex grpc service port",
                                    "default": 5557
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "HTTP node port for the Dex service",
                                    "default": ""
                                },
                                "grpc": {
                                    "type": "string",
                                    "description": "gRPC node port for the Dex service",
                                    "default": ""
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Dex service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Dex service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Dex service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Dex service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Dex service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Dex container HTTP port",
                            "default": 5556
                        },
                        "grpc": {
                            "type": "number",
                            "description": "Dex gRPC port",
                            "default": 5557
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Dex metrics port",
                            "default": 5558
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable metrics service for Dex",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Dex service type",
                                    "default": "ClusterIP"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Dex metrics service port",
                                    "default": 5558
                                },
                                "nodePort": {
                                    "type": "string",
                                    "description": "Node port for the Dex service",
                                    "default": ""
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Dex service metrics service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Dex service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Dex service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Dex service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Dex service",
                                    "default": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": "10s"
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "ServiceMonitor selector labels",
                                    "default": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created for Dex",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the Dex service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Add extra args to the default args for Dex",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Dex pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Dex pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Dex pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `dex.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `dex.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `dex.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `dex.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `dex.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Dex pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Dex pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Dex pods assignment",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Enable shared process namespace in a pod.",
                    "default": false
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Dex statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Dex pods' priorityClassName",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by pod(s)",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Dex container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Dex nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Dex nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Dex nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Dex pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Dex container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Dex pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Dex pod(s)",
                    "default": [],
                    "items": {}
                }
            }
        },
        "config": {
            "type": "object",
            "properties": {
                "knownHosts": {
                    "type": "string",
                    "description": "Known hosts to be added to the known hosts list by default. Check the values to see the default value",
                    "default": "bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==\ngithub.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==\ngitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=\ngitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf\ngitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9\nssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\nvs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H\n"
                },
                "extraKnownHosts": {
                    "type": "string",
                    "description": "Add extra known hosts to the known hosts list",
                    "default": ""
                },
                "createExtraKnownHosts": {
                    "type": "boolean",
                    "description": "Whether to create or not the extra known hosts configmap",
                    "default": true
                },
                "styles": {
                    "type": "string",
                    "description": "Custom CSS styles",
                    "default": ""
                },
                "existingStylesConfigmap": {
                    "type": "string",
                    "description": "Use an existing styles configmap",
                    "default": ""
                },
                "tlsCerts": {
                    "type": "object",
                    "description": "TLS certificates used to verify the authenticity of the repository servers",
                    "default": {}
                },
                "gpgKeys": {
                    "type": "object",
                    "description": "GnuPG public keys to add to the keyring",
                    "default": {}
                },
                "rbac": {
                    "type": "object",
                    "description": "Role-based authentication configuration",
                    "default": {}
                },
                "secret": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Whether to create or not the secret",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "General secret extra annotations",
                            "default": {}
                        },
                        "githubSecret": {
                            "type": "string",
                            "description": "GitHub secret to configure webhooks",
                            "default": ""
                        },
                        "gitlabSecret": {
                            "type": "string",
                            "description": "GitLab secret to configure webhooks",
                            "default": ""
                        },
                        "bitbucketServerSecret": {
                            "type": "string",
                            "description": "BitBucket secret to configure webhooks",
                            "default": ""
                        },
                        "bitbucketUUID": {
                            "type": "string",
                            "description": "BitBucket UUID to configure webhooks",
                            "default": ""
                        },
                        "gogsSecret": {
                            "type": "string",
                            "description": "Gogs secret to configure webhooks",
                            "default": ""
                        },
                        "extra": {
                            "type": "object",
                            "description": "Extra keys to add to the configuration secret.",
                            "default": {}
                        },
                        "argocdServerTlsConfig": {
                            "type": "object",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "description": "TLS key for the Argo CD config secret",
                                    "default": ""
                                },
                                "crt": {
                                    "type": "string",
                                    "description": "TLS certificate for the Argo CD config secret",
                                    "default": ""
                                }
                            }
                        },
                        "argocdServerAdminPassword": {
                            "type": "string",
                            "description": "Argo CD server admin password. Autogenerated by default.",
                            "default": ""
                        },
                        "argocdServerAdminPasswordMtime": {
                            "type": "string",
                            "description": "Argo CD server password modification time",
                            "default": ""
                        },
                        "repositoryCredentials": {
                            "type": "object",
                            "description": "Repository credentials to add to the Argo CD server confgi secret",
                            "default": {}
                        }
                    }
                },
                "clusterCredentials": {
                    "type": "array",
                    "description": "Configure external cluster credentials",
                    "default": [],
                    "items": {}
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "Set init container's Security Context runAsUser",
                            "default": 0
                        }
                    }
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether RBAC resources should be created",
                    "default": true
                }
            }
        },
        "redis": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Redis image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Redis image repository",
                            "default": "bitnami/redis"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Redis image tag (immutable tags are recommended)",
                            "default": "7.2.1-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Redis image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Redis image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Redis image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Redis dependency",
                    "default": true
                },
                "nameOverride": {
                    "type": "string",
                    "description": "Name override for the Redis dependency",
                    "default": ""
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "port": {
                            "type": "number",
                            "description": "Service port for Redis dependency",
                            "default": 6379
                        }
                    }
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Redis dependency authentication",
                            "default": true
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Existing secret to load redis dependency password",
                            "default": ""
                        },
                        "existingSecretPasswordKey": {
                            "type": "string",
                            "description": "Pasword key name inside the existing secret",
                            "default": "redis-password"
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "Redis&reg; architecture. Allowed values: `standalone` or `replication`",
                    "default": "standalone"
                }
            }
        },
        "externalRedis": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "External Redis host",
                    "default": ""
                },
                "port": {
                    "type": "number",
                    "description": "External Redis port",
                    "default": 6379
                },
                "password": {
                    "type": "string",
                    "description": "External Redis password",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Existing secret for the external redis",
                    "default": ""
                },
                "existingSecretPasswordKey": {
                    "type": "string",
                    "description": "Password key for the existing secret containing the external redis password",
                    "default": "redis-password"
                }
            }
        },
        "redisWait": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enables waiting for redis",
                    "default": true
                },
                "extraArgs": {
                    "type": "string",
                    "description": "Additional arguments for the redis-cli call, such as TLS",
                    "default": ""
                },
                "securityContext": {
                    "type": "object",
                    "description": "Security context for init container",
                    "default": {}
                }
            }
        }
    }
}