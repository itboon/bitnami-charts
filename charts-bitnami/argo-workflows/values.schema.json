{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "rbac": {
            "type": "object",
            "properties": {
                "singleNamespace": {
                    "type": "boolean",
                    "description": "Restrict Argo to only deploy into a single namespace by apply Roles and RoleBindings instead of the Cluster equivalents, and start argo-cli with the --namespaced flag. Use it in clusters with strict access policy.",
                    "default": false
                }
            }
        },
        "createAggregateRoles": {
            "type": "boolean",
            "description": "Create Aggregated cluster roles",
            "default": true
        },
        "server": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "server image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "server image repository",
                            "default": "bitnami/argo-workflow-cli"
                        },
                        "tag": {
                            "type": "string",
                            "description": "server image tag (immutable tags are recommended)",
                            "default": "3.4.11-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "server image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "server image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "server image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable server deployment",
                    "default": true
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of server replicas to deploy",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on server nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on server nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 20
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "path": {
                            "type": "string",
                            "description": "Path to check for startupProbe",
                            "default": "/"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 300
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Server custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Server custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Server custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the server containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the server containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled server pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set server pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled server containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set server containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set server containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set read only root file system pod's Security Conte",
                            "default": true
                        }
                    }
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Create RBAC resources for the Argo workflows server",
                            "default": true
                        }
                    }
                },
                "extraArgs": {
                    "type": "string",
                    "description": "Extra arguments for the server command line",
                    "default": ""
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable authentication",
                            "default": true
                        },
                        "mode": {
                            "type": "string",
                            "description": "Set authentication mode. Either `server`, `client` or `sso`.",
                            "default": "client"
                        },
                        "sso": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable SSO configuration for the server auth mode",
                                    "default": false
                                },
                                "config": {
                                    "type": "object",
                                    "properties": {
                                        "issuer": {
                                            "type": "string",
                                            "description": "Root URL for the OIDC identity provider",
                                            "default": ""
                                        },
                                        "clientId": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name of the secret containing the OIDC client ID",
                                                    "default": ""
                                                },
                                                "key": {
                                                    "type": "string",
                                                    "description": "Key in the secret to obtain the OIDC client ID",
                                                    "default": ""
                                                }
                                            }
                                        },
                                        "clientSecret": {
                                            "type": "object",
                                            "properties": {
                                                "name": {
                                                    "type": "string",
                                                    "description": "Name of the secret containing the OIDC client secret",
                                                    "default": ""
                                                },
                                                "key": {
                                                    "type": "string",
                                                    "description": "Key in the secret to obtain the OIDC client secret",
                                                    "default": ""
                                                }
                                            }
                                        },
                                        "redirectUrl": {
                                            "type": "string",
                                            "description": "The OIDC redirect URL. Should be in the form <argo-root-url>/oauth2/callback.",
                                            "default": ""
                                        }
                                    }
                                },
                                "rbac": {
                                    "type": "object",
                                    "properties": {
                                        "enabled": {
                                            "type": "boolean",
                                            "description": "Create RBAC resources for SSO",
                                            "default": true
                                        },
                                        "secretWhitelist": {
                                            "type": "array",
                                            "description": "Restricts the secrets that the server can read",
                                            "default": [],
                                            "items": {}
                                        }
                                    }
                                },
                                "scopes": {
                                    "type": "array",
                                    "description": "Scopes requested from the SSO ID provider",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "clusterWorkflowTemplates": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create ClusterRole and CRB for the controoler to access ClusterWorkflowTemplates",
                            "default": true
                        },
                        "enableEditing": {
                            "type": "boolean",
                            "description": "Give the server permissions to edit ClusterWorkflowTemplates",
                            "default": true
                        }
                    }
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create Pod Disruption Budget for the server component",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Sets the min number of pods availables for the Pod Disruption Budget",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "number",
                            "description": "Sets the max number of pods unavailable for the Pod Disruption Budget",
                            "default": 1
                        }
                    }
                },
                "secure": {
                    "type": "boolean",
                    "description": "Run Argo server in secure mode",
                    "default": false
                },
                "baseHref": {
                    "type": "string",
                    "description": "Base href of the Argo Workflows deployment",
                    "default": "/"
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "web": {
                            "type": "number",
                            "description": "argo Server container port",
                            "default": 2746
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "server pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for server pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for server pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `server.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `server.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `server.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for server pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for server pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for server pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "server statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Alternate scheduler for the server deployment",
                    "default": ""
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "server pods' priorityClassName",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the server container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to server nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for server nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for server nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the server pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the server container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the server pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the server pod(s)",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "server service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "server service HTTP port",
                                    "default": 80
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Node port for HTTP",
                                    "default": ""
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "server service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "server service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "server service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "server service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for server service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra port to expose on the server service",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "controller": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "controller image repository",
                            "default": "bitnami/argo-workflow-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "controller image tag (immutable tags are recommended)",
                            "default": "3.4.11-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "controller image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of controller replicas to deploy",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on controller nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 90
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 60
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 30
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on controller nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 60
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 30
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "path": {
                            "type": "string",
                            "description": "Path to check for startupProbe",
                            "default": "/"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 300
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Controller custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Controller custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Controller custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set controller pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set read only root file system pod's Security Conte",
                            "default": true
                        }
                    }
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Port to expose controller metrics",
                            "default": 9090
                        },
                        "telemetry": {
                            "type": "number",
                            "description": "Port to expose controller telemetry",
                            "default": 8081
                        }
                    }
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Create RBAC resources for the Argo workflows controller",
                            "default": true
                        }
                    }
                },
                "existingConfigMap": {
                    "type": "string",
                    "description": "",
                    "default": ""
                },
                "extraArgs": {
                    "type": "string",
                    "description": "Extra arguments for the controller command line",
                    "default": ""
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "archive": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Save completed workflows to an SQL database.",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "instanceID": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable submission filtering based on instanceID attribute. Requires to set instanceID.useReleaseName or instanceID.explicitID",
                            "default": false
                        },
                        "useReleaseName": {
                            "type": "boolean",
                            "description": "Use the release name to filter submissions",
                            "default": false
                        },
                        "explicitID": {
                            "type": "string",
                            "description": "Filter submissions based on an explicit instance ID",
                            "default": ""
                        }
                    }
                },
                "clusterWorkflowTemplates": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether to create a ClusterRole and Cluster Role Binding to access ClusterWokflowTemplates resources",
                            "default": true
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable controller metrics exporter",
                            "default": false
                        },
                        "path": {
                            "type": "string",
                            "description": "Path to expose controller metrics",
                            "default": "/metrics"
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable prometheus service monitor configuration",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "telemetry": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable telemetry for the controller",
                            "default": false
                        },
                        "path": {
                            "type": "string",
                            "description": "Path to expose telemetry information",
                            "default": "/telemetry"
                        }
                    }
                },
                "workflowWorkers": {
                    "type": "number",
                    "description": "Number of workflow workers to deploy",
                    "default": 32
                },
                "workflowNamespaces": {
                    "type": "array",
                    "description": "Namespaces allowed to run workflows",
                    "default": [
                        "default"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "workflowDefaults": {
                    "type": "object",
                    "description": "Default Workflow Values",
                    "default": {}
                },
                "logging": {
                    "type": "object",
                    "properties": {
                        "level": {
                            "type": "string",
                            "description": "Level for the controller logging",
                            "default": "info"
                        },
                        "globalLevel": {
                            "type": "string",
                            "description": "Global logging level for the controller",
                            "default": "0"
                        }
                    }
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create Pod Disruption Budget for the controller component",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Sets the min number of pods availables for the Pod Disruption Budget",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "number",
                            "description": "Sets the max number of pods unavailable for the Pod Disruption Budget",
                            "default": 1
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "controller pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `controller.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `controller.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `controller.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for controller pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Alternate scheduler for the server controller",
                    "default": ""
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "controller pods' priorityClassName",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the controller container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for controller nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the controller container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "controller service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "Metrics port for the controller",
                                    "default": 8080
                                },
                                "telemetry": {
                                    "type": "number",
                                    "description": "Telemetry port for the controller",
                                    "default": 8081
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "string",
                                    "description": "Node port for HTTP",
                                    "default": ""
                                },
                                "telemetry": {
                                    "type": "string",
                                    "description": "Node port for HTTPS",
                                    "default": ""
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "controller service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "controller service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "controller service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "controller service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for controller service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra port to expose on the controller service",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "executor": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "executor image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "executor image repository",
                            "default": "bitnami/argo-workflow-exec"
                        },
                        "tag": {
                            "type": "string",
                            "description": "executor image tag (immutable tags are recommended)",
                            "default": "3.4.11-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "executor image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "executor image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "executor image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to server nodes",
                    "default": [],
                    "items": {}
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled executor pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set executor pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set read only root file system pod's Security Context",
                            "default": true
                        }
                    }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress record generation for server",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress record",
                    "default": "server.local"
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "Custom TLS certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "workflows": {
            "type": "object",
            "properties": {
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Whether to create a service account to run workflows",
                            "default": false
                        },
                        "name": {
                            "type": "string",
                            "description": "Service account name to run workflows",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the workflows service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Whether to create RBAC resource to run workflows",
                            "default": true
                        }
                    }
                }
            }
        },
        "postgresql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable PostgreSQL subchart and controller persistence using PostgreSQL",
                    "default": true
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "postgresql": {
                                    "type": "number",
                                    "description": "PostgreSQL port",
                                    "default": 5432
                                }
                            }
                        }
                    }
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "PostgreSQL username",
                            "default": "postgres"
                        },
                        "database": {
                            "type": "string",
                            "description": "PortgreSQL database name",
                            "default": "bn_argo_workflows"
                        },
                        "password": {
                            "type": "string",
                            "description": "PortgreSQL database password",
                            "default": ""
                        }
                    }
                }
            }
        },
        "mysql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable MySQL subchart and controller persistence using MySQL",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "mysql": {
                                    "type": "number",
                                    "description": "MySQL port",
                                    "default": 3306
                                }
                            }
                        }
                    }
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "MySQL username",
                            "default": "mysql"
                        },
                        "database": {
                            "type": "string",
                            "description": "MySQL database name",
                            "default": "bn_argo_workflows"
                        },
                        "password": {
                            "type": "string",
                            "description": "MySQL database password",
                            "default": ""
                        }
                    }
                }
            }
        },
        "externalDatabase": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable using externaldatabase and the controller to use persistence with it",
                    "default": false
                },
                "host": {
                    "type": "string",
                    "description": "External Database server host",
                    "default": "localhost"
                },
                "port": {
                    "type": "number",
                    "description": "External Database server port",
                    "default": 3306
                },
                "username": {
                    "type": "string",
                    "description": "External Database username",
                    "default": "bn_wordpress"
                },
                "password": {
                    "type": "string",
                    "description": "External Database user password",
                    "default": ""
                },
                "database": {
                    "type": "string",
                    "description": "External Database database name",
                    "default": "bitnami_wordpress"
                },
                "existingSecret": {
                    "type": "string",
                    "description": "The name of an existing secret with database credentials",
                    "default": ""
                },
                "type": {
                    "type": "string",
                    "description": "Either postgresql or mysql",
                    "default": ""
                }
            }
        }
    }
}