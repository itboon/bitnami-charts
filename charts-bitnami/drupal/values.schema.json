{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override drupal.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override drupal.fullname template",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Common annotations to add to all Drupal resources (sub-charts are not considered). Evaluated as a template",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Common labels to add to all Drupal resources (sub-charts are not considered). Evaluated as a template",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release (evaluated as a template).",
            "default": [],
            "items": {}
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Drupal image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Drupal Image name",
                    "default": "bitnami/drupal"
                },
                "tag": {
                    "type": "string",
                    "description": "Drupal Image tag",
                    "default": "10.1.3-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "Drupal image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Drupal image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Specify if debug logs should be enabled",
                    "default": false
                }
            }
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of Drupal Pods to run (requires ReadWriteMany PVC support)",
            "default": 1
        },
        "drupalProfile": {
            "type": "string",
            "description": "Drupal installation profile",
            "default": "standard"
        },
        "drupalSkipInstall": {
            "type": "boolean",
            "description": "Skip Drupal installation wizard. Useful for migrations and restoring from SQL dump",
            "default": false
        },
        "drupalUsername": {
            "type": "string",
            "description": "User of the application",
            "default": "user"
        },
        "drupalPassword": {
            "type": "string",
            "description": "Application password",
            "default": ""
        },
        "drupalEmail": {
            "type": "string",
            "description": "Admin email",
            "default": "user@example.com"
        },
        "allowEmptyPassword": {
            "type": "boolean",
            "description": "Allow DB blank passwords",
            "default": true
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Update strategy - only really applicable for deployments with RWO PVs attached",
                    "default": "RollingUpdate"
                }
            }
        },
        "priorityClassName": {
            "type": "string",
            "description": "Drupal pods' priorityClassName",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default)",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment",
            "default": [],
            "items": {}
        },
        "hostAliases": {
            "type": "array",
            "description": "",
            "items": {
                "type": "object",
                "properties": {
                    "ip": {
                        "type": "string",
                        "description": ""
                    },
                    "hostnames": {
                        "type": "array",
                        "description": "",
                        "items": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Extra environment variables",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "ConfigMap containing extra env vars",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Secret containing extra env vars (in case of sensitive data)",
            "default": ""
        },
        "extraVolumes": {
            "type": "array",
            "description": "Array of extra volumes to be added to the deployment (evaluated as template). Requires setting `extraVolumeMounts`",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Array of extra volume mounts to be added to the container (evaluated as template). Normally used with `extraVolumes`.",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the pod (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Attach additional containers to the pod (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a service account should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account to use. If not set and create is true, a name is generated using the fullname template",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Add annotations",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount API credentials for a service account.",
                    "default": true
                }
            }
        },
        "existingSecret": {
            "type": "string",
            "description": "Name of a secret with the application password",
            "default": ""
        },
        "smtpHost": {
            "type": "string",
            "description": "SMTP host",
            "default": ""
        },
        "smtpPort": {
            "type": "string",
            "description": "SMTP port",
            "default": ""
        },
        "smtpUser": {
            "type": "string",
            "description": "SMTP user",
            "default": ""
        },
        "smtpPassword": {
            "type": "string",
            "description": "SMTP password",
            "default": ""
        },
        "smtpProtocol": {
            "type": "string",
            "description": "SMTP Protocol (options: ssl,tls, nil)",
            "default": ""
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "",
                    "default": 8080
                },
                "https": {
                    "type": "number",
                    "description": "",
                    "default": 8443
                }
            }
        },
        "sessionAffinity": {
            "type": "string",
            "description": "Control where client requests go, to the same pod or round-robin. Values: ClientIP or None",
            "default": "None"
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable persistence using PVC",
                    "default": true
                },
                "storageClass": {
                    "type": "string",
                    "description": "PVC Storage Class for Drupal volume",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "PVC Access Mode for Drupal volume",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "PVC Storage Request for Drupal volume",
                    "default": "8Gi"
                },
                "existingClaim": {
                    "type": "string",
                    "description": "A manually managed Persistent Volume Claim",
                    "default": ""
                },
                "hostPath": {
                    "type": "string",
                    "description": "If defined, the drupal-data volume will mount to the specified hostPath.",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                }
            }
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment. Evaluated as a template.",
            "default": {}
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for Matomo containers",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for Matomo containers",
                    "default": {}
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Drupal pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Drupal pods' group ID",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Drupal containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Drupal containers' Security Context",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set Controller container's Security Context runAsNonRoot",
                    "default": true
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": false
                },
                "path": {
                    "type": "string",
                    "description": "Request path for startupProbe",
                    "default": "/user/login"
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 600
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "path": {
                    "type": "string",
                    "description": "Request path for livenessProbe",
                    "default": "/user/login"
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 600
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "path": {
                    "type": "string",
                    "description": "Request path for readinessProbe",
                    "default": "/user/login"
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Override default startup probe",
            "default": {}
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Override default liveness probe",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Override default readiness probe",
            "default": {}
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "LifecycleHook to set additional configuration at startup Evaluated as a template",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Pod annotations",
            "default": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Add additional labels to the pod (evaluated as a template)",
            "default": {}
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type",
                    "default": "LoadBalancer"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Service HTTP port",
                            "default": 80
                        },
                        "https": {
                            "type": "number",
                            "description": "Service HTTPS port",
                            "default": 443
                        }
                    }
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Restricts access for LoadBalancer (only with `service.type: LoadBalancer`)",
                    "default": [],
                    "items": {}
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "",
                            "default": ""
                        },
                        "https": {
                            "type": "string",
                            "description": "",
                            "default": ""
                        }
                    }
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "loadBalancerIP for the Drupal Service (optional, cloud specific)",
                    "default": ""
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Enable client source IP preservation",
                    "default": "Cluster"
                },
                "clusterIP": {
                    "type": "string",
                    "description": "%%MAIN_CONTAINER_NAME%% service Cluster IP",
                    "default": ""
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for %%MAIN_CONTAINER_NAME%% service",
                    "default": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress controller resource",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress Path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Override API Version (automatically detected if not set)",
                    "default": ""
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress resource",
                    "default": "drupal.local"
                },
                "path": {
                    "type": "string",
                    "description": "The Path to Drupal. You may need to set this to '/*' in order to use this",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the hostname defined at ingress.hostname parameter",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "The list of additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "Any additional arbitrary paths that may need to be added to the ingress under the main host.",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "mariadb": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to deploy a mariadb server to satisfy the applications database requirements",
                    "default": true
                },
                "architecture": {
                    "type": "string",
                    "description": "MariaDB architecture (`standalone` or `replication`)",
                    "default": "standalone"
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "rootPassword": {
                            "type": "string",
                            "description": "Password for the MariaDB `root` user",
                            "default": ""
                        },
                        "database": {
                            "type": "string",
                            "description": "Database name to create",
                            "default": "bitnami_drupal"
                        },
                        "username": {
                            "type": "string",
                            "description": "Database user to create",
                            "default": "bn_drupal"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for the database",
                            "default": ""
                        }
                    }
                },
                "primary": {
                    "type": "object",
                    "properties": {
                        "persistence": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable database persistence using PVC",
                                    "default": true
                                },
                                "storageClass": {
                                    "type": "string",
                                    "description": "MariaDB primary persistent volume storage Class",
                                    "default": ""
                                },
                                "accessModes": {
                                    "type": "array",
                                    "description": "Database Persistent Volume Access Modes",
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "size": {
                                    "type": "string",
                                    "description": "Database Persistent Volume Size",
                                    "default": "8Gi"
                                },
                                "hostPath": {
                                    "type": "string",
                                    "description": "Set path in case you want to use local host path volumes (not recommended in production)",
                                    "default": ""
                                },
                                "existingClaim": {
                                    "type": "string",
                                    "description": "Name of an existing `PersistentVolumeClaim` for MariaDB primary replicas",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "externalDatabase": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host of the existing database",
                    "default": ""
                },
                "port": {
                    "type": "number",
                    "description": "Port of the existing database",
                    "default": 3306
                },
                "user": {
                    "type": "string",
                    "description": "Existing username in the external db",
                    "default": "bn_drupal"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the above username. Ignored if existing secret is provided",
                    "default": ""
                },
                "database": {
                    "type": "string",
                    "description": "Name of the existing database",
                    "default": "bitnami_drupal"
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of a secret with the database password. (externalDatabase.password will be ignored and picked up from this secret). The secret has to contain the key db-password",
                    "default": ""
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes volume permissions in the data directory (for cases where the default k8s `runAsUser` and `fsUser` values do not work)",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image name",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Start a exporter side-car",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Apache exporter image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Apache exporter image repository",
                            "default": "bitnami/apache-exporter"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Apache exporter image tag",
                            "default": "1.0.1-debian-11-r38"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Apache exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "podAnnotations": {
                    "type": "object",
                    "properties": {
                        "prometheus": {
                            "type": "object",
                            "properties": {
                                "io/scrape": {
                                    "type": "string",
                                    "description": "",
                                    "default": "true"
                                },
                                "io/port": {
                                    "type": "string",
                                    "description": "",
                                    "default": "9117"
                                }
                            }
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "description": "Metrics exporter resource requests and limits",
                    "default": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Drupal exporter service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "Drupal exporter service port",
                                    "default": 9117
                                }
                            }
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Drupal exporter service external traffic policy",
                            "default": "Cluster"
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Drupal exporter service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Drupal exporter service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Drupal exporter service",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "The namespace in which the ServiceMonitor will be created",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "The interval at which metrics should be scraped",
                            "default": "30s"
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "The timeout after which the scrape is ended",
                            "default": ""
                        },
                        "relabellings": {
                            "type": "array",
                            "description": "Metrics RelabelConfigs to apply to samples before scraping.",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metrics RelabelConfigs to apply to samples before ingestion.",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus",
                            "default": {}
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create a custom prometheusRule Resource for scraping metrics using PrometheusOperator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "The namespace in which the prometheusRule will be created",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels for the prometheusRule",
                            "default": {}
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom Prometheus rules",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "certificates": {
            "type": "object",
            "properties": {
                "customCertificate": {
                    "type": "object",
                    "properties": {
                        "certificateSecret": {
                            "type": "string",
                            "description": "Secret containing the certificate and key to add",
                            "default": ""
                        },
                        "chainSecret": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the secret containing the certificate chain",
                                    "default": "secret-name"
                                },
                                "key": {
                                    "type": "string",
                                    "description": "Key of the certificate chain file inside the secret",
                                    "default": "secret-key"
                                }
                            }
                        },
                        "certificateLocation": {
                            "type": "string",
                            "description": "Location in the container to store the certificate",
                            "default": "/etc/ssl/certs/ssl-cert-snakeoil.pem"
                        },
                        "keyLocation": {
                            "type": "string",
                            "description": "Location in the container to store the private key",
                            "default": "/etc/ssl/private/ssl-cert-snakeoil.key"
                        },
                        "chainLocation": {
                            "type": "string",
                            "description": "Location in the container to store the certificate chain",
                            "default": "/etc/ssl/certs/mychain.pem"
                        }
                    }
                },
                "customCAs": {
                    "type": "array",
                    "description": "Defines a list of secrets to import into the container trust store",
                    "default": [],
                    "items": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Container sidecar extra environment variables (eg proxy)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra env vars",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra env vars (in case of sensitive data)",
                    "default": ""
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Container sidecar registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Container sidecar image",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Container sidecar image tag",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Container sidecar image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Container sidecar image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Container sidecar image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable network policies",
                    "default": false
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable network policy for metrics (prometheus)",
                            "default": false
                        }
                    }
                },
                "ingress": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable network policy for Ingress Proxies",
                            "default": false
                        }
                    }
                },
                "ingressRules": {
                    "type": "object",
                    "properties": {
                        "backendOnlyAccessibleByFrontend": {
                            "type": "boolean",
                            "description": "Enable ingress rule that makes the backend (mariadb) only accessible by drupal's pods.",
                            "default": false
                        },
                        "accessOnlyFrom": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable ingress rule that makes drupal only accessible from a particular origin",
                                    "default": false
                                }
                            }
                        }
                    }
                },
                "egressRules": {
                    "type": "object",
                    "properties": {
                        "denyConnectionsToExternal": {
                            "type": "boolean",
                            "description": "Enable egress rule that denies outgoing traffic outside the cluster, except for DNS (port 53).",
                            "default": false
                        }
                    }
                }
            }
        }
    }
}