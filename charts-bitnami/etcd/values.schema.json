{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Default Kubernetes cluster domain",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "etcd image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "etcd image name",
                    "default": "bitnami/etcd"
                },
                "tag": {
                    "type": "string",
                    "description": "etcd image tag",
                    "default": "3.5.9-debian-11-r118"
                },
                "digest": {
                    "type": "string",
                    "description": "etcd image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "etcd image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "etcd image pull secrets",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable image debug mode",
                    "default": false
                }
            }
        },
        "auth": {
            "type": "object",
            "properties": {
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Switch to enable RBAC authentication",
                            "default": true
                        },
                        "allowNoneAuthentication": {
                            "type": "boolean",
                            "description": "Allow to use etcd without configuring RBAC authentication",
                            "default": true
                        },
                        "rootPassword": {
                            "type": "string",
                            "description": "Root user password. The root user is always `root`",
                            "default": ""
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing credentials for the root user",
                            "default": ""
                        },
                        "existingSecretPasswordKey": {
                            "type": "string",
                            "description": "Name of key containing password to be retrieved from the existing secret",
                            "default": ""
                        }
                    }
                },
                "token": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enables token authentication",
                            "default": true
                        },
                        "type": {
                            "type": "string",
                            "description": "Authentication token type. Allowed values: 'simple' or 'jwt'",
                            "default": "jwt"
                        },
                        "privateKey": {
                            "type": "object",
                            "properties": {
                                "filename": {
                                    "type": "string",
                                    "description": "Name of the file containing the private key for signing the JWT token",
                                    "default": "jwt-token.pem"
                                },
                                "existingSecret": {
                                    "type": "string",
                                    "description": "Name of the existing secret containing the private key for signing the JWT token",
                                    "default": ""
                                }
                            }
                        },
                        "signMethod": {
                            "type": "string",
                            "description": "JWT token sign method",
                            "default": "RS256"
                        },
                        "ttl": {
                            "type": "string",
                            "description": "JWT token TTL",
                            "default": "10m"
                        }
                    }
                },
                "client": {
                    "type": "object",
                    "properties": {
                        "secureTransport": {
                            "type": "boolean",
                            "description": "Switch to encrypt client-to-server communications using TLS certificates",
                            "default": false
                        },
                        "useAutoTLS": {
                            "type": "boolean",
                            "description": "Switch to automatically create the TLS certificates",
                            "default": false
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the TLS certificates for client-to-server communications",
                            "default": ""
                        },
                        "enableAuthentication": {
                            "type": "boolean",
                            "description": "Switch to enable host authentication using TLS certificates. Requires existing secret",
                            "default": false
                        },
                        "certFilename": {
                            "type": "string",
                            "description": "Name of the file containing the client certificate",
                            "default": "cert.pem"
                        },
                        "certKeyFilename": {
                            "type": "string",
                            "description": "Name of the file containing the client certificate private key",
                            "default": "key.pem"
                        },
                        "caFilename": {
                            "type": "string",
                            "description": "Name of the file containing the client CA certificate",
                            "default": ""
                        }
                    }
                },
                "peer": {
                    "type": "object",
                    "properties": {
                        "secureTransport": {
                            "type": "boolean",
                            "description": "Switch to encrypt server-to-server communications using TLS certificates",
                            "default": false
                        },
                        "useAutoTLS": {
                            "type": "boolean",
                            "description": "Switch to automatically create the TLS certificates",
                            "default": false
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the TLS certificates for server-to-server communications",
                            "default": ""
                        },
                        "enableAuthentication": {
                            "type": "boolean",
                            "description": "Switch to enable host authentication using TLS certificates. Requires existing secret",
                            "default": false
                        },
                        "certFilename": {
                            "type": "string",
                            "description": "Name of the file containing the peer certificate",
                            "default": "cert.pem"
                        },
                        "certKeyFilename": {
                            "type": "string",
                            "description": "Name of the file containing the peer certificate private key",
                            "default": "key.pem"
                        },
                        "caFilename": {
                            "type": "string",
                            "description": "Name of the file containing the peer CA certificate",
                            "default": ""
                        }
                    }
                }
            }
        },
        "autoCompactionMode": {
            "type": "string",
            "description": "Auto compaction mode, by default periodic. Valid values: \"periodic\", \"revision\".",
            "default": ""
        },
        "autoCompactionRetention": {
            "type": "string",
            "description": "Auto compaction retention for mvcc key value store in hour, by default 0, means disabled",
            "default": ""
        },
        "initialClusterState": {
            "type": "string",
            "description": "Initial cluster state. Allowed values: 'new' or 'existing'",
            "default": ""
        },
        "initialClusterToken": {
            "type": "string",
            "description": "Initial cluster token. Can be used to protect etcd from cross-cluster-interaction, which might corrupt the clusters.",
            "default": "etcd-cluster-k8s"
        },
        "logLevel": {
            "type": "string",
            "description": "Sets the log level for the etcd process. Allowed values: 'debug', 'info', 'warn', 'error', 'panic', 'fatal'",
            "default": "info"
        },
        "maxProcs": {
            "type": "string",
            "description": "Limits the number of operating system threads that can execute user-level",
            "default": ""
        },
        "removeMemberOnContainerTermination": {
            "type": "boolean",
            "description": "Use a PreStop hook to remove the etcd members from the etcd cluster on container termination",
            "default": true
        },
        "configuration": {
            "type": "string",
            "description": "etcd configuration. Specify content for etcd.conf.yml",
            "default": ""
        },
        "existingConfigmap": {
            "type": "string",
            "description": "Existing ConfigMap with etcd configuration",
            "default": ""
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Extra environment variables to be set on etcd container",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars",
            "default": ""
        },
        "command": {
            "type": "array",
            "description": "Default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of etcd replicas to deploy",
            "default": 1
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Update strategy type, can be set to RollingUpdate or OnDelete.",
                    "default": "RollingUpdate"
                }
            }
        },
        "podManagementPolicy": {
            "type": "string",
            "description": "Pod management policy for the etcd statefulset",
            "default": "Parallel"
        },
        "hostAliases": {
            "type": "array",
            "description": "etcd pod host aliases",
            "default": [],
            "items": {}
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "client": {
                    "type": "number",
                    "description": "Client port to expose at container level",
                    "default": 2379
                },
                "peer": {
                    "type": "number",
                    "description": "Peer port to expose at container level",
                    "default": 2380
                },
                "metrics": {
                    "type": "number",
                    "description": "Metrics port to expose at container level when metrics.useSeparateEndpoint is true",
                    "default": 9090
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled etcd pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set etcd pod's Security Context fsGroup",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled etcd containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set etcd container's Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set etcd container's Security Context runAsNonRoot",
                    "default": true
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Force the child process to be run as nonprivilege",
                    "default": false
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 60
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 30
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 60
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 0
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 60
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for etcd pods",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for etcd container(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeClaimTemplates": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeClaimTemplates for etcd container(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the etcd pods",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the etcd pods",
            "default": [],
            "items": {}
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match. Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "Seconds the pod needs to gracefully terminate",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default)",
            "default": ""
        },
        "priorityClassName": {
            "type": "string",
            "description": "Name of the priority class to be used by etcd pods",
            "default": ""
        },
        "runtimeClassName": {
            "type": "string",
            "description": "Name of the runtime class to be used by pod(s)",
            "default": ""
        },
        "shareProcessNamespace": {
            "type": "boolean",
            "description": "Enable shared process namespace in a pod.",
            "default": false
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment",
            "default": [],
            "items": {}
        },
        "persistentVolumeClaimRetentionPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Controls if and how PVCs are deleted during the lifecycle of a StatefulSet",
                    "default": false
                },
                "whenScaled": {
                    "type": "string",
                    "description": "Volume retention behavior when the replica count of the StatefulSet is reduced",
                    "default": "Retain"
                },
                "whenDeleted": {
                    "type": "string",
                    "description": "Volume retention behavior that applies when the StatefulSet is deleted",
                    "default": "Retain"
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type",
                    "default": "ClusterIP"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "create second service if equal true",
                    "default": true
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Kubernetes service Cluster IP",
                    "default": ""
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "number",
                            "description": "etcd client port",
                            "default": 2379
                        },
                        "peer": {
                            "type": "number",
                            "description": "etcd peer port",
                            "default": 2380
                        },
                        "metrics": {
                            "type": "number",
                            "description": "etcd metrics port when metrics.useSeparateEndpoint is true",
                            "default": 9090
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "string",
                            "description": "Specify the nodePort client value for the LoadBalancer and NodePort service types.",
                            "default": ""
                        },
                        "peer": {
                            "type": "string",
                            "description": "Specify the nodePort peer value for the LoadBalancer and NodePort service types.",
                            "default": ""
                        },
                        "metrics": {
                            "type": "string",
                            "description": "Specify the nodePort metrics value for the LoadBalancer and NodePort service types. The metrics port is only exposed when metrics.useSeparateEndpoint is true.",
                            "default": ""
                        }
                    }
                },
                "clientPortNameOverride": {
                    "type": "string",
                    "description": "etcd client port name override",
                    "default": ""
                },
                "peerPortNameOverride": {
                    "type": "string",
                    "description": "etcd peer port name override",
                    "default": ""
                },
                "metricsPortNameOverride": {
                    "type": "string",
                    "description": "etcd metrics port name override. The metrics port is only exposed when metrics.useSeparateEndpoint is true.",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "loadBalancerIP for the etcd service (optional, cloud specific)",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Load Balancer source ranges",
                    "default": [],
                    "items": {}
                },
                "externalIPs": {
                    "type": "array",
                    "description": "External IPs",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "%%MAIN_CONTAINER_NAME%% service external traffic policy",
                    "default": "Cluster"
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the headless service.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "If true, use a Persistent Volume Claim. If false, use emptyDir.",
                    "default": true
                },
                "storageClass": {
                    "type": "string",
                    "description": "Persistent Volume Storage Class",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "Persistent Volume Access Modes",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "PVC Storage Request for etcd data volume",
                    "default": "8Gi"
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner and group of the persistent volume(s) mountpoint to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image name",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable creation of NetworkPolicy resources",
                    "default": false
                },
                "allowExternal": {
                    "type": "boolean",
                    "description": "Don't require client label for connections",
                    "default": true
                },
                "extraIngress": {
                    "type": "array",
                    "description": "Add extra ingress rules to the NetworkPolicy",
                    "default": [],
                    "items": {}
                },
                "extraEgress": {
                    "type": "array",
                    "description": "Add extra ingress rules to the NetworkPolicy",
                    "default": [],
                    "items": {}
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Expose etcd metrics",
                    "default": false
                },
                "useSeparateEndpoint": {
                    "type": "boolean",
                    "description": "Use a separate endpoint for exposing metrics",
                    "default": false
                },
                "podAnnotations": {
                    "type": "object",
                    "properties": {
                        "prometheus": {
                            "type": "object",
                            "properties": {
                                "io/scrape": {
                                    "type": "string",
                                    "description": "",
                                    "default": "true"
                                },
                                "io/port": {
                                    "type": "string",
                                    "description": "",
                                    "default": "{{ .Values.metrics.useSeparateEndpoint | ternary .Values.containerPorts.metrics .Values.containerPorts.client }}"
                                }
                            }
                        }
                    }
                },
                "podMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create PodMonitor Resource for scraping metrics using PrometheusOperator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": "monitoring"
                        },
                        "interval": {
                            "type": "string",
                            "description": "Specify the interval at which metrics should be scraped",
                            "default": "30s"
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Specify the timeout after which the scrape is ended",
                            "default": "30s"
                        },
                        "scheme": {
                            "type": "string",
                            "description": "Scheme to use for scraping",
                            "default": "http"
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Prometheus relabeling rules",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace for the PrometheusRule Resource (defaults to the Release Namespace)",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "rules": {
                            "type": "array",
                            "description": "Prometheus Rule definitions",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "startFromSnapshot": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Initialize new cluster recovering an existing snapshot",
                    "default": false
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Existing PVC containing the etcd snapshot",
                    "default": ""
                },
                "snapshotFilename": {
                    "type": "string",
                    "description": "Snapshot filename",
                    "default": ""
                }
            }
        },
        "disasterRecovery": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable auto disaster recovery by periodically snapshotting the keyspace",
                    "default": false
                },
                "cronjob": {
                    "type": "object",
                    "properties": {
                        "schedule": {
                            "type": "string",
                            "description": "Schedule in Cron format to save snapshots",
                            "default": "*/30 * * * *"
                        },
                        "historyLimit": {
                            "type": "number",
                            "description": "Number of successful finished jobs to retain",
                            "default": 1
                        },
                        "snapshotHistoryLimit": {
                            "type": "number",
                            "description": "Number of etcd snapshots to retain, tagged by date",
                            "default": 1
                        },
                        "snapshotsDir": {
                            "type": "string",
                            "description": "Directory to store snapshots",
                            "default": "/snapshots"
                        },
                        "nodeSelector": {
                            "type": "object",
                            "description": "Node labels for cronjob pods assignment",
                            "default": {}
                        },
                        "tolerations": {
                            "type": "array",
                            "description": "Tolerations for cronjob pods assignment",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "pvc": {
                    "type": "object",
                    "properties": {
                        "existingClaim": {
                            "type": "string",
                            "description": "A manually managed Persistent Volume and Claim",
                            "default": ""
                        },
                        "size": {
                            "type": "string",
                            "description": "PVC Storage Request",
                            "default": "2Gi"
                        },
                        "storageClassName": {
                            "type": "string",
                            "description": "Storage Class for snapshots volume",
                            "default": "nfs"
                        },
                        "subPath": {
                            "type": "string",
                            "description": "Path within the volume from which to mount",
                            "default": ""
                        }
                    }
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable/disable service account creation",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account to create or use",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Enable/disable auto mounting of service account token",
                    "default": true
                }
            }
        },
        "pdb": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable/disable a Pod Disruption Budget creation",
                    "default": true
                },
                "minAvailable": {
                    "type": "string",
                    "description": "Minimum number/percentage of pods that should remain scheduled",
                    "default": "51%"
                },
                "maxUnavailable": {
                    "type": "string",
                    "description": "Maximum number/percentage of pods that may be made unavailable",
                    "default": ""
                }
            }
        }
    }
}