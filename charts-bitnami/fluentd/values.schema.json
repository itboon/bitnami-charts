{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template",
            "default": ""
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Cluster Domain",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Fluentd image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Fluentd image repository",
                    "default": "bitnami/fluentd"
                },
                "tag": {
                    "type": "string",
                    "description": "Fluentd image tag (immutable tags are recommended)",
                    "default": "1.16.2-debian-11-r46"
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Fluentd image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Fluentd image pull secrets",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable image debug mode",
                    "default": false
                }
            }
        },
        "forwarder": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable forwarder daemonset",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Fluentd forwarder image registry override",
                            "default": ""
                        },
                        "repository": {
                            "type": "string",
                            "description": "Fluentd forwarder image repository override",
                            "default": ""
                        },
                        "tag": {
                            "type": "string",
                            "description": "Fluentd forwarder image tag override (immutable tags are recommended)",
                            "default": ""
                        }
                    }
                },
                "daemonUser": {
                    "type": "string",
                    "description": "Forwarder daemon user and group (set to root by default because it reads from host paths)",
                    "default": "root"
                },
                "daemonGroup": {
                    "type": "string",
                    "description": "Fluentd forwarder daemon system group",
                    "default": "root"
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for forwarder pods",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for forwarder's containers",
                            "default": 0
                        },
                        "runAsGroup": {
                            "type": "number",
                            "description": "Group ID for forwarder's containers",
                            "default": 0
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for forwarder's containers filesystem",
                            "default": 0
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for the forwarder container",
                            "default": true
                        },
                        "privileged": {
                            "type": "boolean",
                            "description": "Run as privileged",
                            "default": false
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Allow Privilege Escalation",
                            "default": false
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Require the use of a read only root file system",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Drop capabilities for the securityContext",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Enable use of host network",
                    "default": false
                },
                "dnsPolicy": {
                    "type": "string",
                    "description": "Pod-specific DNS policy",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "number",
                    "description": "Duration in seconds the pod needs to terminate gracefully",
                    "default": 30
                },
                "configFile": {
                    "type": "string",
                    "description": "Name of the config file that will be used by Fluentd at launch under the `/opt/bitnami/fluentd/conf` directory",
                    "default": "fluentd.conf"
                },
                "configMap": {
                    "type": "string",
                    "description": "Name of the config map that contains the Fluentd configuration files",
                    "default": ""
                },
                "configMapFiles": {
                    "type": "object",
                    "properties": {
                        "fluentd": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# Ignore fluentd own events\n<match fluent.**>\n  @type null\n</match>\n\n@include fluentd-inputs.conf\n@include fluentd-output.conf\n{{- if .Values.metrics.enabled }}\n@include metrics.conf\n{{- end }}\n"
                                }
                            }
                        },
                        "fluentd-inputs": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# HTTP input for the liveness and readiness probes\n<source>\n  @type http\n  port 9880\n</source>\n# Get the logs from the containers running in the node\n<source>\n  @type tail\n  path /var/log/containers/*.log\n  # exclude Fluentd logs\n  exclude_path /var/log/containers/*fluentd*.log\n  pos_file /opt/bitnami/fluentd/logs/buffers/fluentd-docker.pos\n  tag kubernetes.*\n  read_from_head true\n  <parse>\n    @type json\n    time_key time\n    time_format %Y-%m-%dT%H:%M:%S.%NZ\n  </parse>\n</source>\n# enrich with kubernetes metadata\n{{- if or .Values.forwarder.serviceAccount.create .Values.forwarder.serviceAccount.name }}\n<filter kubernetes.**>\n  @type kubernetes_metadata\n</filter>\n{{- end }}\n"
                                }
                            }
                        },
                        "fluentd-output": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# Throw the healthcheck to the standard output instead of forwarding it\n<match fluentd.healthcheck>\n  @type stdout\n</match>\n{{- if .Values.aggregator.enabled }}\n# Forward all logs to the aggregators\n<match **>\n  @type forward\n  {{- if .Values.tls.enabled }}\n  transport tls\n  tls_cert_path /opt/bitnami/fluentd/certs/out_forward/ca.crt\n  tls_client_cert_path /opt/bitnami/fluentd/certs/out_forward/tls.crt\n  tls_client_private_key_path /opt/bitnami/fluentd/certs/out_forward/tls.key\n  {{- end }}\n\n  {{- $fullName := (include \"common.names.fullname\" .) }}\n  {{- $global := . }}\n  {{- $domain := default \"cluster.local\" .Values.clusterDomain }}\n  {{- $port := .Values.aggregator.port | int }}\n  {{- range $i, $e := until (.Values.aggregator.replicaCount | int) }}\n  <server>\n    {{ printf \"host %s-%d.%s-headless.%s.svc.%s\" $fullName $i $fullName $global.Release.Namespace $domain }}\n    {{ printf \"port %d\" $port }}\n    {{- if ne $i 0 }}\n    standby\n    {{- end }}\n  </server>\n  {{- end }}\n  <buffer>\n    @type file\n    path /opt/bitnami/fluentd/logs/buffers/logs.buffer\n    flush_thread_count 2\n    flush_interval 5s\n  </buffer>\n</match>\n{{- else }}\n# Send the logs to the standard output\n<match **>\n  @type stdout\n</match>\n{{- end }}\n"
                                }
                            }
                        },
                        "metrics": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# Prometheus Exporter Plugin\n# input plugin that exports metrics\n<source>\n  @type prometheus\n  port {{ .Values.metrics.service.port }}\n</source>\n# input plugin that collects metrics from MonitorAgent\n<source>\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n# input plugin that collects metrics for output plugin\n<source>\n  @type prometheus_output_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n# input plugin that collects metrics for in_tail plugin\n<source>\n  @type prometheus_tail_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n"
                                }
                            }
                        }
                    }
                },
                "extraArgs": {
                    "type": "string",
                    "description": "Extra arguments for the Fluentd command line",
                    "default": ""
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables to pass to the container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Fluentd Forwarder nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Fluentd Forwarder nodes",
                    "default": ""
                },
                "containerPorts": {
                    "type": "array",
                    "description": "",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "containerPort": {
                                "type": "number",
                                "description": ""
                            },
                            "protocol": {
                                "type": "string",
                                "description": ""
                            }
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "object",
                                    "properties": {
                                        "port": {
                                            "type": "number",
                                            "description": "",
                                            "default": 9880
                                        },
                                        "targetPort": {
                                            "type": "string",
                                            "description": "",
                                            "default": "http"
                                        },
                                        "protocol": {
                                            "type": "string",
                                            "description": "",
                                            "default": "TCP"
                                        }
                                    }
                                }
                            }
                        },
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type (`ClusterIP`, `NodePort`, or `LoadBalancer`) for the forwarders",
                            "default": "ClusterIP"
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "loadBalancerIP if service type is `LoadBalancer` (optional, cloud specific)",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Addresses that are allowed when service is LoadBalancer",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Fluentd Forwarder service external traffic policy",
                            "default": "Cluster"
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Static clusterIP or None for headless services",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Provide any additional annotations which may be required",
                            "default": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "httpGet": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "description": "Request path for startupProbe",
                                    "default": "/fluentd.healthcheck?json=%7B%22ping%22%3A+%22pong%22%7D"
                                },
                                "port": {
                                    "type": "string",
                                    "description": "Port for startupProbe",
                                    "default": "http"
                                }
                            }
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "httpGet": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "description": "Request path for livenessProbe",
                                    "default": "/fluentd.healthcheck?json=%7B%22ping%22%3A+%22pong%22%7D"
                                },
                                "port": {
                                    "type": "string",
                                    "description": "Port for livenessProbe",
                                    "default": "http"
                                }
                            }
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "httpGet": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "description": "Request path for readinessProbe",
                                    "default": "/fluentd.healthcheck?json=%7B%22ping%22%3A+%22pong%22%7D"
                                },
                                "port": {
                                    "type": "string",
                                    "description": "Port for readinessProbe",
                                    "default": "http"
                                }
                            }
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom liveness probe for the Fluend Forwarder",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom liveness probe for the Fluend Forwarder",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom rediness probe for the Fluend Forwarder",
                    "default": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Set up update strategy.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Set Priority Class Name to allow priority control over other pods",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Forwarder Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Forwarder Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Forwarder Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Forwarder Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Forwarder Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Forwarder Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Forwarder Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Forwarder Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Pod annotations",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels to add to Pod",
                    "default": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specify whether a ServiceAccount should be created.",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to create",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specify whether RBAC resources should be created and used, allowing the get, watch and list of pods/namespaces",
                            "default": true
                        },
                        "pspEnabled": {
                            "type": "boolean",
                            "description": "Whether to create a PodSecurityPolicy and bound it with RBAC. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                            "default": false
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable persistence volume for the forwarder",
                            "default": false
                        },
                        "hostPath": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "description": "Directory from the host node's filesystem to mount as hostPath volume for persistence.",
                                    "default": "/opt/bitnami/fluentd/logs/buffers"
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Additional lifecycles to add to the pods",
                    "default": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Additional init containers to add to the pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add sidecars to forwarder pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Extra volumes",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Mount extra volume(s)",
                    "default": [],
                    "items": {}
                },
                "initScripts": {
                    "type": "object",
                    "description": "Dictionary of init scripts. Evaluated as a template.",
                    "default": {}
                },
                "initScriptsCM": {
                    "type": "string",
                    "description": "ConfigMap with the init scripts. Evaluated as a template.",
                    "default": ""
                },
                "initScriptsSecret": {
                    "type": "string",
                    "description": "Secret containing `/docker-entrypoint-initdb.d` scripts to be executed at initialization time that contain sensitive data. Evaluated as a template.",
                    "default": ""
                }
            }
        },
        "aggregator": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Fluentd aggregator statefulset",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Fluentd aggregator image registry override",
                            "default": ""
                        },
                        "repository": {
                            "type": "string",
                            "description": "Fluentd aggregator image repository override",
                            "default": ""
                        },
                        "tag": {
                            "type": "string",
                            "description": "Fluentd aggregator image tag override (immutable tags are recommended)",
                            "default": ""
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of aggregator pods to deploy in the Stateful Set",
                    "default": 1
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for aggregator pods",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for aggregator's containers",
                            "default": 1001
                        },
                        "runAsGroup": {
                            "type": "number",
                            "description": "Group ID for aggregator's containers",
                            "default": 1001
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for aggregator's containers filesystem",
                            "default": 1001
                        }
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for the aggregator container",
                            "default": true
                        },
                        "privileged": {
                            "type": "boolean",
                            "description": "Run as privileged",
                            "default": false
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Allow Privilege Escalation",
                            "default": false
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Require the use of a read only root file system",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Drop capabilities for the securityContext",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "terminationGracePeriodSeconds": {
                    "type": "number",
                    "description": "Duration in seconds the pod needs to terminate gracefully",
                    "default": 30
                },
                "configMapFiles": {
                    "type": "object",
                    "properties": {
                        "fluentd": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# Ignore fluentd own events\n<match fluent.**>\n  @type null\n</match>\n\n@include fluentd-inputs.conf\n@include fluentd-output.conf\n{{- if .Values.metrics.enabled }}\n@include metrics.conf\n{{- end }}\n"
                                }
                            }
                        },
                        "fluentd-inputs": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# TCP input to receive logs from\n{{- if .Values.aggregator.port }}\n<source>\n  @type forward\n  bind 0.0.0.0\n  port {{ .Values.aggregator.port }}\n  {{- if .Values.tls.enabled }}\n  <transport tls>\n    ca_path /opt/bitnami/fluentd/certs/in_forward/ca.crt\n    cert_path /opt/bitnami/fluentd/certs/in_forward/tls.crt\n    private_key_path /opt/bitnami/fluentd/certs/in_forward/tls.key\n    client_cert_auth true\n  </transport>\n  {{- end }}\n</source>\n{{- end }}\n\n# HTTP input for the liveness and readiness probes\n<source>\n  @type http\n  bind 0.0.0.0\n  port 9880\n</source>\n"
                                }
                            }
                        },
                        "fluentd-output": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# Throw the healthcheck to the standard output\n<match fluentd.healthcheck>\n  @type stdout\n</match>\n\n# Send the logs to the standard output\n<match **>\n  @type stdout\n</match>\n"
                                }
                            }
                        },
                        "metrics": {
                            "type": "object",
                            "properties": {
                                "conf": {
                                    "type": "string",
                                    "description": "",
                                    "default": "# Prometheus Exporter Plugin\n# input plugin that exports metrics\n<source>\n  @type prometheus\n  port {{ .Values.metrics.service.port }}\n</source>\n\n# input plugin that collects metrics from MonitorAgent\n<source>\n  @type prometheus_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n\n# input plugin that collects metrics for output plugin\n<source>\n  @type prometheus_output_monitor\n  <labels>\n    host ${hostname}\n  </labels>\n</source>\n"
                                }
                            }
                        }
                    }
                },
                "configFile": {
                    "type": "string",
                    "description": "Name of the config file that will be used by Fluentd at launch under the `/opt/bitnami/fluentd/conf` directory",
                    "default": "fluentd.conf"
                },
                "configMap": {
                    "type": "string",
                    "description": "Name of the config map that contains the Fluentd configuration files",
                    "default": ""
                },
                "port": {
                    "type": "number",
                    "description": "Port the Aggregator container will listen for logs. Leave it blank to ignore.",
                    "default": 24224
                },
                "extraArgs": {
                    "type": "string",
                    "description": "Extra arguments for the Fluentd command line",
                    "default": ""
                },
                "containerPorts": {
                    "type": "array",
                    "description": "",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "containerPort": {
                                "type": "number",
                                "description": ""
                            },
                            "protocol": {
                                "type": "string",
                                "description": ""
                            }
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables to pass to the container",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "object",
                                    "properties": {
                                        "port": {
                                            "type": "number",
                                            "description": "",
                                            "default": 9880
                                        },
                                        "targetPort": {
                                            "type": "string",
                                            "description": "",
                                            "default": "http"
                                        },
                                        "protocol": {
                                            "type": "string",
                                            "description": "",
                                            "default": "TCP"
                                        }
                                    }
                                },
                                "tcp": {
                                    "type": "object",
                                    "properties": {
                                        "port": {
                                            "type": "number",
                                            "description": "",
                                            "default": 24224
                                        },
                                        "targetPort": {
                                            "type": "string",
                                            "description": "",
                                            "default": "tcp"
                                        },
                                        "protocol": {
                                            "type": "string",
                                            "description": "",
                                            "default": "TCP"
                                        }
                                    }
                                }
                            }
                        },
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type (`ClusterIP`, `NodePort`, or `LoadBalancer`) for the aggregators",
                            "default": "ClusterIP"
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "loadBalancerIP if service type is `LoadBalancer` (optional, cloud specific)",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Addresses that are allowed when service is LoadBalancer",
                            "default": [],
                            "items": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Static clusterIP or None for headless services",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Provide any additional annotations which may be required",
                            "default": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Fluentd Aggregator service external traffic policy",
                            "default": "Cluster"
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        },
                        "annotationsHeadless": {
                            "type": "object",
                            "description": "Provide any additional annotations which may be required on headless service",
                            "default": {}
                        },
                        "headless": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the headless service.",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Fluentd Aggregator nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Fluentd Aggregator nodes",
                    "default": ""
                },
                "ingress": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Set to true to enable ingress record generation",
                            "default": false
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Ingress Path type. How the path matching is interpreted",
                            "default": "ImplementationSpecific"
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Override API Version (automatically detected if not set)",
                            "default": ""
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Default host for the ingress resource",
                            "default": "fluentd.local"
                        },
                        "path": {
                            "type": "string",
                            "description": "Default path for the ingress resource",
                            "default": "/"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                            "default": {}
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS configuration for the hostname defined at ingress.hostname parameter",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "The list of additional hostnames to be covered with this ingress record.",
                            "default": [],
                            "items": {}
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "Any additional arbitrary paths that may need to be added to the ingress under the main host.",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                            "default": [],
                            "items": {}
                        },
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": true
                        },
                        "httpGet": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "description": "Request path for startupProbe",
                                    "default": "/fluentd.healthcheck?json=%7B%22ping%22%3A+%22pong%22%7D"
                                },
                                "port": {
                                    "type": "string",
                                    "description": "Port for startupProbe",
                                    "default": "http"
                                }
                            }
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "httpGet": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "description": "Request path for livenessProbe",
                                    "default": "/fluentd.healthcheck?json=%7B%22ping%22%3A+%22pong%22%7D"
                                },
                                "port": {
                                    "type": "string",
                                    "description": "Port for livenessProbe",
                                    "default": "http"
                                }
                            }
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "httpGet": {
                            "type": "object",
                            "properties": {
                                "path": {
                                    "type": "string",
                                    "description": "Request path for readinessProbe",
                                    "default": "/fluentd.healthcheck?json=%7B%22ping%22%3A+%22pong%22%7D"
                                },
                                "port": {
                                    "type": "string",
                                    "description": "Port for readinessProbe",
                                    "default": "http"
                                }
                            }
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom liveness probe for the Fluentd Aggregator",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom liveness probe for the Fluentd Aggregator",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom rediness probe for the Fluentd Aggregator",
                    "default": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Set up update strategy.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Fluentd Aggregator pods' priorityClassName",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podManagementPolicy": {
                    "type": "string",
                    "description": "podManagementPolicy to manage scaling operation of Fluentd Aggregator pods",
                    "default": ""
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Aggregator Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Aggregator Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Aggregator Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Aggregator Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Aggregator Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Aggregator Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Aggregator Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Aggregator Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Pod annotations",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels to add to Pod",
                    "default": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specify whether a ServiceAccount should be created",
                            "default": false
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to create",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "array",
                            "description": "",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "resource": {
                                        "type": "object",
                                        "properties": {
                                            "name": {
                                                "type": "string",
                                                "description": ""
                                            },
                                            "target": {
                                                "type": "object",
                                                "properties": {
                                                    "type": {
                                                        "type": "string",
                                                        "description": ""
                                                    },
                                                    "averageUtilization": {
                                                        "type": "number",
                                                        "description": ""
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Create an Horizontal Pod Autoscaler",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "number",
                            "description": "Minimum number of replicas for the HPA",
                            "default": 2
                        },
                        "maxReplicas": {
                            "type": "number",
                            "description": "Maximum number of replicas for the HPA",
                            "default": 5
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable persistence volume for the aggregator",
                            "default": false
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "Persistent Volume storage class",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume access modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "Persistent Volume size",
                            "default": "10Gi"
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume (this value is evaluated as a template)",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Persistent Volume Claim annotations",
                            "default": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Additional lifecycles to add to the pods",
                    "default": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add init containers to aggregator pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add sidecars to aggregator pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Extra volumes",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Mount extra volume(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeClaimTemplates": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volume claim templates for the Fluentd Aggregator pods in StatefulSet",
                    "default": [],
                    "items": {}
                },
                "initScripts": {
                    "type": "object",
                    "description": "Dictionary of init scripts. Evaluated as a template.",
                    "default": {}
                },
                "initScriptsCM": {
                    "type": "string",
                    "description": "ConfigMap with the init scripts. Evaluated as a template.",
                    "default": ""
                },
                "initScriptsSecret": {
                    "type": "string",
                    "description": "Secret containing `/docker-entrypoint-initdb.d` scripts to be executed at initialization time that contain sensitive data. Evaluated as a template.",
                    "default": ""
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the export of Prometheus metrics",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "24231"
                                        },
                                        "io/path": {
                                            "type": "string",
                                            "description": "",
                                            "default": "/metrics"
                                        }
                                    }
                                }
                            }
                        },
                        "type": {
                            "type": "string",
                            "description": "Prometheus metrics service type",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "Prometheus metrics service port",
                            "default": 24231
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Load Balancer IP if the Prometheus metrics server type is `LoadBalancer`",
                            "default": ""
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Prometheus metrics service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Prometheus metrics service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Prometheus metrics service external traffic policy",
                            "default": "Cluster"
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "ServiceMonitor extra labels",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "ServiceMonitor annotations",
                            "default": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        },
                        "path": {
                            "type": "string",
                            "description": "path defines the path that promethues will use to pull metrics from the container",
                            "default": "/metrics"
                        }
                    }
                }
            }
        },
        "tls": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable TLS/SSL encrytion for internal communications",
                    "default": false
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Generate automatically self-signed TLS certificates.",
                    "default": false
                },
                "forwarder": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the TLS certificates for the Fluentd forwarder",
                            "default": ""
                        }
                    }
                },
                "aggregator": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the TLS certificates for the Fluentd aggregator",
                            "default": ""
                        }
                    }
                }
            }
        }
    }
}