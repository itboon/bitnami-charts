{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.name",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "kustomizeController": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Kustomize Controller",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Kustomize Controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Kustomize Controller image repository",
                            "default": "bitnami/fluxcd-kustomize-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Kustomize Controller image tag (immutable tags are recommended)",
                            "default": "0.35.1-debian-11-r139"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Kustomize Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Kustomize Controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Kustomize Controller image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Kustomize Controller image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Kustomize Controller replicas to deploy",
                    "default": 1
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Kustomize Controller metrics container port",
                            "default": 8080
                        },
                        "health": {
                            "type": "number",
                            "description": "Kustomize Controller health container port",
                            "default": 9440
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Kustomize Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Kustomize Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Kustomize Controller containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Kustomize Controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Kustomize Controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Kustomize Controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Kustomize Controller pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Kustomize Controller container's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Kustomize Controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Kustomize Controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Kustomize Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Kustomize Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Kustomize Controller container's privilege escalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Kustomize Controller container's Security Context runAsNonRoot",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Kustomize Controller pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Kustomize Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Kustomize Controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `kustomizeController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `kustomizeController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable autoscaling for kustomizeController",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "string",
                            "description": "Minimum number of kustomizeController replicas",
                            "default": ""
                        },
                        "maxReplicas": {
                            "type": "string",
                            "description": "Maximum number of kustomizeController replicas",
                            "default": ""
                        },
                        "targetCPU": {
                            "type": "string",
                            "description": "Target CPU utilization percentage",
                            "default": ""
                        },
                        "targetMemory": {
                            "type": "string",
                            "description": "Target Memory utilization percentage",
                            "default": ""
                        }
                    }
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `kustomizeController.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `kustomizeController.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `kustomizeController.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Kustomize Controller pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Kustomize Controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Kustomize Controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kustomize Controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Kustomize Controller pods' priorityClassName",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for Kustomize Controller pods",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Redmine pod needs to terminate gracefully",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Kustomize Controller container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Kustomize Controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Kustomize Controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Kustomize Controller nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Kustomize Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Kustomize Controller container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Kustomize Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Kustomize Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether RBAC resources should be created",
                            "default": true
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom RBAC rules to set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the export of Prometheus metrics",
                            "default": true
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Kustomize Controller service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Kustomize Controller service metrics port",
                                            "default": 80
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "string",
                                            "description": "Node port for HTTP",
                                            "default": ""
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Kustomize Controller service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Kustomize Controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Kustomize Controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Kustomize Controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.kustomizeController.metrics.service.ports.metrics }}"
                                                }
                                            }
                                        }
                                    }
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in Kustomize Controller service (normally used with the `sidecars` value)",
                                    "default": [],
                                    "items": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace in which Prometheus is running",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for the ServiceMonitor",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Extra labels for the ServiceMonitor",
                                    "default": {}
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in Prometheus",
                                    "default": ""
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped.",
                                    "default": ""
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "Specify additional relabeling of metrics",
                                    "default": [],
                                    "items": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "Specify general relabeling",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "helmController": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Helm Controller",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Helm Controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Helm Controller image repository",
                            "default": "bitnami/fluxcd-helm-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Helm Controller image tag (immutable tags are recommended)",
                            "default": "0.35.0-debian-11-r44"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Helm Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Helm Controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Helm Controller image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Helm Controller image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Helm Controller replicas to deploy",
                    "default": 1
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Helm Controller metrics container port",
                            "default": 8080
                        },
                        "health": {
                            "type": "number",
                            "description": "Helm Controller health container port",
                            "default": 9440
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Helm Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Helm Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Helm Controller containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Helm Controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Helm Controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Helm Controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Helm Controller pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Helm Controller container's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Helm Controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Helm Controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Helm Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Helm Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Helm Controller container's privilege escalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Helm Controller container's Security Context runAsNonRoot",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Helm Controller pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Helm Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Helm Controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `helmController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `helmController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable autoscaling for helmController",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "string",
                            "description": "Minimum number of helmController replicas",
                            "default": ""
                        },
                        "maxReplicas": {
                            "type": "string",
                            "description": "Maximum number of helmController replicas",
                            "default": ""
                        },
                        "targetCPU": {
                            "type": "string",
                            "description": "Target CPU utilization percentage",
                            "default": ""
                        },
                        "targetMemory": {
                            "type": "string",
                            "description": "Target Memory utilization percentage",
                            "default": ""
                        }
                    }
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `helmController.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `helmController.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `helmController.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Helm Controller pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Helm Controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Helm Controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Helm Controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Helm Controller pods' priorityClassName",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for Helm Controller pods",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Redmine pod needs to terminate gracefully",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Helm Controller container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Helm Controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Helm Controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Helm Controller nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Helm Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Helm Controller container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Helm Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Helm Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether RBAC resources should be created",
                            "default": true
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom RBAC rules to set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the export of Prometheus metrics",
                            "default": true
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Helm Controller service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Helm Controller service metrics port",
                                            "default": 80
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "string",
                                            "description": "Node port for HTTP",
                                            "default": ""
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Helm Controller service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Helm Controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Helm Controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Helm Controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.helmController.metrics.service.ports.metrics }}"
                                                }
                                            }
                                        }
                                    }
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in Helm Controller service (normally used with the `sidecars` value)",
                                    "default": [],
                                    "items": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace in which Prometheus is running",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for the ServiceMonitor",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Extra labels for the ServiceMonitor",
                                    "default": {}
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in Prometheus",
                                    "default": ""
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped.",
                                    "default": ""
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "Specify additional relabeling of metrics",
                                    "default": [],
                                    "items": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "Specify general relabeling",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "sourceController": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Source Controller",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Source Controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Source Controller image repository",
                            "default": "bitnami/fluxcd-source-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Source Controller image tag (immutable tags are recommended)",
                            "default": "0.36.1-debian-11-r138"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Source Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Source Controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Source Controller image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Source Controller image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Source Controller replicas to deploy",
                    "default": 1
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Source Controller http container port",
                            "default": 9090
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Source Controller metrics container port",
                            "default": 8080
                        },
                        "health": {
                            "type": "number",
                            "description": "Source Controller health container port",
                            "default": 9440
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Source Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Source Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Source Controller containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Source Controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Source Controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Source Controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Source Controller pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Source Controller container's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Source Controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Source Controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Source Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Source Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Source Controller container's privilege escalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Source Controller container's Security Context runAsNonRoot",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Source Controller pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Source Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Source Controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `sourceController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `sourceController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable autoscaling for sourceController",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "string",
                            "description": "Minimum number of sourceController replicas",
                            "default": ""
                        },
                        "maxReplicas": {
                            "type": "string",
                            "description": "Maximum number of sourceController replicas",
                            "default": ""
                        },
                        "targetCPU": {
                            "type": "string",
                            "description": "Target CPU utilization percentage",
                            "default": ""
                        },
                        "targetMemory": {
                            "type": "string",
                            "description": "Target Memory utilization percentage",
                            "default": ""
                        }
                    }
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `sourceController.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `sourceController.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `sourceController.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Source Controller pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Source Controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Source Controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Source Controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Source Controller pods' priorityClassName",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for Source Controller pods",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Redmine pod needs to terminate gracefully",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Source Controller container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Source Controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Source Controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Source Controller nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Source Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Source Controller container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Source Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Source Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Source Controller service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Source Controller service metrics port",
                                    "default": 80
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Node port for HTTP",
                                    "default": ""
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Source Controller service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Source Controller service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Source Controller service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ .Values.sourceController.service.ports }}"
                                        }
                                    }
                                }
                            }
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Source Controller service external traffic policy",
                            "default": "Cluster"
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose in Source Controller service (normally used with the `sidecars` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Control where client requests go, to the same pod or round-robin",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "networkPolicy": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the default NetworkPolicy policy",
                            "default": false
                        },
                        "allowExternal": {
                            "type": "boolean",
                            "description": "Don't require client label for connections",
                            "default": true
                        },
                        "extraFromClauses": {
                            "type": "array",
                            "description": "Allows to add extra 'from' clauses to the NetworkPolicy",
                            "default": [],
                            "items": {}
                        },
                        "extraIngress": {
                            "type": "array",
                            "description": "Add extra ingress rules to the NetworkPolicy",
                            "default": [],
                            "items": {}
                        },
                        "extraEgress": {
                            "type": "array",
                            "description": "Add extra ingress rules to the NetworkPolicy",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable persistence using Persistent Volume Claims",
                            "default": false
                        },
                        "resourcePolicy": {
                            "type": "string",
                            "description": "Setting it to \"keep\" to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted",
                            "default": ""
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "Persistent Volume mount root path",
                            "default": "/bitnami/fluxcd-source-controller/data"
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "Persistent Volume storage class",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume access modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "Persistent Volume size",
                            "default": "10Gi"
                        },
                        "dataSource": {
                            "type": "object",
                            "description": "Custom PVC data source",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the PVC",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume (this value is evaluated as a template)",
                            "default": {}
                        },
                        "existingClaim": {
                            "type": "string",
                            "description": "The name of an existing PVC to use for persistence",
                            "default": ""
                        }
                    }
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether RBAC resources should be created",
                            "default": true
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom RBAC rules to set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the export of Prometheus metrics",
                            "default": true
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Source Controller service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Source Controller service metrics port",
                                            "default": 80
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "string",
                                            "description": "Node port for HTTP",
                                            "default": ""
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Source Controller service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Source Controller service Load Balancer IP",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.sourceController.metrics.service.ports.metrics }}"
                                                }
                                            }
                                        }
                                    }
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Source Controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Source Controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in Source Controller service (normally used with the `sidecars` value)",
                                    "default": [],
                                    "items": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace in which Prometheus is running",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for the ServiceMonitor",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Extra labels for the ServiceMonitor",
                                    "default": {}
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in Prometheus",
                                    "default": ""
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped.",
                                    "default": ""
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "Specify additional relabeling of metrics",
                                    "default": [],
                                    "items": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "Specify general relabeling",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "notificationController": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Notification Controller",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Notification Controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Notification Controller image repository",
                            "default": "bitnami/fluxcd-notification-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Notification Controller image tag (immutable tags are recommended)",
                            "default": "0.33.0-debian-11-r139"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Notification Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Notification Controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Notification Controller image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Notification Controller image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Notification Controller replicas to deploy",
                    "default": 1
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Notification Controller metrics container port",
                            "default": 8080
                        },
                        "health": {
                            "type": "number",
                            "description": "Notification Controller health container port",
                            "default": 9440
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Notification Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Notification Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Notification Controller containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Notification Controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Notification Controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Notification Controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Notification Controller pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Notification Controller container's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Notification Controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Notification Controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Notification Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Notification Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Notification Controller container's privilege escalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Notification Controller container's Security Context runAsNonRoot",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Notification Controller pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Notification Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Notification Controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `notificationController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `notificationController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable autoscaling for notificationController",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "string",
                            "description": "Minimum number of notificationController replicas",
                            "default": ""
                        },
                        "maxReplicas": {
                            "type": "string",
                            "description": "Maximum number of notificationController replicas",
                            "default": ""
                        },
                        "targetCPU": {
                            "type": "string",
                            "description": "Target CPU utilization percentage",
                            "default": ""
                        },
                        "targetMemory": {
                            "type": "string",
                            "description": "Target Memory utilization percentage",
                            "default": ""
                        }
                    }
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `notificationController.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `notificationController.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `notificationController.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Notification Controller pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Notification Controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Notification Controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Notification Controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Notification Controller pods' priorityClassName",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for Notification Controller pods",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Redmine pod needs to terminate gracefully",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Notification Controller container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Notification Controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Notification Controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Notification Controller nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Notification Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Notification Controller container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Notification Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Notification Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether RBAC resources should be created",
                            "default": true
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom RBAC rules to set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the export of Prometheus metrics",
                            "default": true
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Notification Controller service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Notification Controller service metrics port",
                                            "default": 80
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "string",
                                            "description": "Node port for HTTP",
                                            "default": ""
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Notification Controller service Cluster IP",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.notificationController.metrics.service.ports.metrics }}"
                                                }
                                            }
                                        }
                                    }
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Notification Controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Notification Controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Notification Controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in Notification Controller service (normally used with the `sidecars` value)",
                                    "default": [],
                                    "items": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace in which Prometheus is running",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for the ServiceMonitor",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Extra labels for the ServiceMonitor",
                                    "default": {}
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in Prometheus",
                                    "default": ""
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped.",
                                    "default": ""
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "Specify additional relabeling of metrics",
                                    "default": [],
                                    "items": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "Specify general relabeling",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "imageAutomationController": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Image Automation Controller",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Image Automation Controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Image Automation Controller image repository",
                            "default": "bitnami/fluxcd-image-automation-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Image Automation Controller image tag (immutable tags are recommended)",
                            "default": "0.31.0-debian-11-r83"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Image Automation Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Image Automation Controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Image Automation Controller image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Image Automation Controller image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Image Automation Controller replicas to deploy",
                    "default": 1
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Image Automation Controller metrics container port",
                            "default": 8080
                        },
                        "health": {
                            "type": "number",
                            "description": "Image Automation Controller health container port",
                            "default": 9440
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Image Automation Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Image Automation Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Image Automation Controller containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Image Automation Controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Image Automation Controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Image Automation Controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Image Automation Controller pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Image Automation Controller container's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Image Automation Controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Image Automation Controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Image Automation Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Image Automation Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Image Automation Controller container's privilege escalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Image Automation Controller container's Security Context runAsNonRoot",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Image Automation Controller pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Image Automation Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Image Automation Controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `imageAutomationController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `imageAutomationController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable autoscaling for imageAutomationController",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "string",
                            "description": "Minimum number of imageAutomationController replicas",
                            "default": ""
                        },
                        "maxReplicas": {
                            "type": "string",
                            "description": "Maximum number of imageAutomationController replicas",
                            "default": ""
                        },
                        "targetCPU": {
                            "type": "string",
                            "description": "Target CPU utilization percentage",
                            "default": ""
                        },
                        "targetMemory": {
                            "type": "string",
                            "description": "Target Memory utilization percentage",
                            "default": ""
                        }
                    }
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `imageAutomationController.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `imageAutomationController.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `imageAutomationController.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Image Automation Controller pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Image Automation Controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Image Automation Controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Image Automation Controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Image Automation Controller pods' priorityClassName",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for Image Automation Controller pods",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Redmine pod needs to terminate gracefully",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Image Automation Controller container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Image Automation Controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Image Automation Controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Image Automation Controller nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Image Automation Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Image Automation Controller container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Image Automation Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Image Automation Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether RBAC resources should be created",
                            "default": true
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom RBAC rules to set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the export of Prometheus metrics",
                            "default": true
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Image Automation Controller service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Image Automation Controller service metrics port",
                                            "default": 80
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "string",
                                            "description": "Node port for HTTP",
                                            "default": ""
                                        }
                                    }
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.imageAutomationController.metrics.service.ports.metrics }}"
                                                }
                                            }
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Image Automation Controller service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Image Automation Controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Image Automation Controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Image Automation Controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in Image Automation Controller service (normally used with the `sidecars` value)",
                                    "default": [],
                                    "items": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace in which Prometheus is running",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for the ServiceMonitor",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Extra labels for the ServiceMonitor",
                                    "default": {}
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in Prometheus",
                                    "default": ""
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped.",
                                    "default": ""
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "Specify additional relabeling of metrics",
                                    "default": [],
                                    "items": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "Specify general relabeling",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "imageReflectorController": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Image Reflector Controller",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Image Reflector Controller image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Image Reflector Controller image repository",
                            "default": "bitnami/fluxcd-image-reflector-controller"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Image Reflector Controller image tag (immutable tags are recommended)",
                            "default": "0.29.1-debian-11-r38"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Image Reflector Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag image tag (immutable tags are recommended)",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Image Reflector Controller image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Image Reflector Controller image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Image Reflector Controller image debug mode",
                            "default": false
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Image Reflector Controller replicas to deploy",
                    "default": 1
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Image Reflector Controller metrics container port",
                            "default": 8080
                        },
                        "health": {
                            "type": "number",
                            "description": "Image Reflector Controller health container port",
                            "default": 9440
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Image Reflector Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Image Reflector Controller containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Image Reflector Controller containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Image Reflector Controller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Image Reflector Controller containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Image Reflector Controller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Image Reflector Controller pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Image Reflector Controller container's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Image Reflector Controller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Image Reflector Controller containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Image Reflector Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Image Reflector Controller containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Image Reflector Controller container's privilege escalation",
                            "default": false
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Image Reflector Controller container's Security Context runAsNonRoot",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Image Reflector Controller pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Image Reflector Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Image Reflector Controller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `imageReflectorController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `imageReflectorController.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "autoscaling": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable autoscaling for imageReflectorController",
                            "default": false
                        },
                        "minReplicas": {
                            "type": "string",
                            "description": "Minimum number of imageReflectorController replicas",
                            "default": ""
                        },
                        "maxReplicas": {
                            "type": "string",
                            "description": "Maximum number of imageReflectorController replicas",
                            "default": ""
                        },
                        "targetCPU": {
                            "type": "string",
                            "description": "Target CPU utilization percentage",
                            "default": ""
                        },
                        "targetMemory": {
                            "type": "string",
                            "description": "Target Memory utilization percentage",
                            "default": ""
                        }
                    }
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `imageReflectorController.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `imageReflectorController.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `imageReflectorController.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Image Reflector Controller pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Image Reflector Controller pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Image Reflector Controller pods assignment",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Image Reflector Controller statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Image Reflector Controller pods' priorityClassName",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for Image Reflector Controller pods",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Redmine pod needs to terminate gracefully",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Image Reflector Controller container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Image Reflector Controller nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Image Reflector Controller nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Image Reflector Controller nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Image Reflector Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Image Reflector Controller container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Image Reflector Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Image Reflector Controller pod(s)",
                    "default": [],
                    "items": {}
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable persistence using Persistent Volume Claims",
                            "default": false
                        },
                        "resourcePolicy": {
                            "type": "string",
                            "description": "Setting it to \"keep\" to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted",
                            "default": ""
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "Persistent Volume mount root path",
                            "default": "/bitnami/fluxcd-image-reflector-controller/data"
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "Persistent Volume storage class",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume access modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "Persistent Volume size",
                            "default": "10Gi"
                        },
                        "dataSource": {
                            "type": "object",
                            "description": "Custom PVC data source",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the PVC",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume (this value is evaluated as a template)",
                            "default": {}
                        },
                        "existingClaim": {
                            "type": "string",
                            "description": "The name of an existing PVC to use for persistence",
                            "default": ""
                        }
                    }
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether RBAC resources should be created",
                            "default": true
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom RBAC rules to set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional Service Account annotations (evaluated as a template)",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the export of Prometheus metrics",
                            "default": true
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Image Reflector Controller service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Image Reflector Controller service metrics port",
                                            "default": 80
                                        }
                                    }
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.imageReflectorController.metrics.service.ports.metrics }}"
                                                }
                                            }
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "string",
                                            "description": "Node port for HTTP",
                                            "default": ""
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Image Reflector Controller service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Image Reflector Controller service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Image Reflector Controller service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Image Reflector Controller service external traffic policy",
                                    "default": "Cluster"
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in Image Reflector Controller service (normally used with the `sidecars` value)",
                                    "default": [],
                                    "items": {}
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace in which Prometheus is running",
                                    "default": ""
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for the ServiceMonitor",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Extra labels for the ServiceMonitor",
                                    "default": {}
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in Prometheus",
                                    "default": ""
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped.",
                                    "default": ""
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "Specify additional relabeling of metrics",
                                    "default": [],
                                    "items": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "Specify general relabeling",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r40"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable init container's Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set init container's Security Context runAsUser",
                            "default": 0
                        }
                    }
                }
            }
        }
    }
}