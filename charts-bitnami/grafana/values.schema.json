{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override grafana.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override grafana.fullname template",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Default Kubernetes cluster domain",
            "default": "cluster.local"
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Grafana image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Grafana image repository",
                    "default": "bitnami/grafana"
                },
                "tag": {
                    "type": "string",
                    "description": "Grafana image tag (immutable tags are recommended)",
                    "default": "10.1.1-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "Grafana image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Grafana image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Grafana image pull secrets",
                    "default": [],
                    "items": {}
                }
            }
        },
        "admin": {
            "type": "object",
            "properties": {
                "user": {
                    "type": "string",
                    "description": "Grafana admin username",
                    "default": "admin"
                },
                "password": {
                    "type": "string",
                    "description": "Admin password. If a password is not provided a random password will be generated",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of the existing secret containing admin password",
                    "default": ""
                },
                "existingSecretPasswordKey": {
                    "type": "string",
                    "description": "Password key on the existing secret",
                    "default": "password"
                }
            }
        },
        "smtp": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable SMTP configuration",
                    "default": false
                },
                "user": {
                    "type": "string",
                    "description": "SMTP user",
                    "default": "user"
                },
                "password": {
                    "type": "string",
                    "description": "SMTP password",
                    "default": "password"
                },
                "host": {
                    "type": "string",
                    "description": "Custom host for the smtp server",
                    "default": ""
                },
                "fromAddress": {
                    "type": "string",
                    "description": "From address",
                    "default": ""
                },
                "fromName": {
                    "type": "string",
                    "description": "From name",
                    "default": ""
                },
                "skipVerify": {
                    "type": "string",
                    "description": "Enable skip verify",
                    "default": "false"
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of existing secret containing SMTP credentials (user and password)",
                    "default": ""
                },
                "existingSecretUserKey": {
                    "type": "string",
                    "description": "User key on the existing secret",
                    "default": "user"
                },
                "existingSecretPasswordKey": {
                    "type": "string",
                    "description": "Password key on the existing secret",
                    "default": "password"
                }
            }
        },
        "plugins": {
            "type": "string",
            "description": "Grafana plugins to be installed in deployment time separated by commas",
            "default": ""
        },
        "ldap": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable LDAP for Grafana",
                    "default": false
                },
                "allowSignUp": {
                    "type": "boolean",
                    "description": "Allows LDAP sign up for Grafana",
                    "default": false
                },
                "configuration": {
                    "type": "string",
                    "description": "Specify content for ldap.toml configuration file",
                    "default": ""
                },
                "configMapName": {
                    "type": "string",
                    "description": "Name of the ConfigMap with the ldap.toml configuration file for Grafana",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Name of the Secret with the ldap.toml configuration file for Grafana",
                    "default": ""
                },
                "uri": {
                    "type": "string",
                    "description": "Server URI, eg. ldap://ldap_server:389",
                    "default": ""
                },
                "binddn": {
                    "type": "string",
                    "description": "DN of the account used to search in the LDAP server.",
                    "default": ""
                },
                "bindpw": {
                    "type": "string",
                    "description": "Password for binddn account.",
                    "default": ""
                },
                "basedn": {
                    "type": "string",
                    "description": "Base DN path where binddn account will search for the users.",
                    "default": ""
                },
                "searchAttribute": {
                    "type": "string",
                    "description": "Field used to match with the user name (uid, samAccountName, cn, etc). This value will be ignored if 'ldap.searchFilter' is set",
                    "default": "uid"
                },
                "searchFilter": {
                    "type": "string",
                    "description": "User search filter, for example \"(cn=%s)\" or \"(sAMAccountName=%s)\" or \"(|(sAMAccountName=%s)(userPrincipalName=%s)\"",
                    "default": ""
                },
                "extraConfiguration": {
                    "type": "string",
                    "description": "Extra ldap configuration.",
                    "default": ""
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled TLS configuration.",
                            "default": false
                        },
                        "startTls": {
                            "type": "boolean",
                            "description": "Use STARTTLS instead of LDAPS.",
                            "default": false
                        },
                        "skipVerify": {
                            "type": "boolean",
                            "description": "Skip any SSL verification (hostanames or certificates)",
                            "default": false
                        },
                        "certificatesMountPath": {
                            "type": "string",
                            "description": "Where LDAP certifcates are mounted.",
                            "default": "/opt/bitnami/grafana/conf/ldap/"
                        },
                        "certificatesSecret": {
                            "type": "string",
                            "description": "Secret with LDAP certificates.",
                            "default": ""
                        },
                        "CAFilename": {
                            "type": "string",
                            "description": "CA certificate filename. Should match with the CA entry key in the ldap.tls.certificatesSecret.",
                            "default": ""
                        },
                        "certFilename": {
                            "type": "string",
                            "description": "Client certificate filename to authenticate against the LDAP server. Should match with certificate the entry key in the ldap.tls.certificatesSecret.",
                            "default": ""
                        },
                        "certKeyFilename": {
                            "type": "string",
                            "description": "Client Key filename to authenticate against the LDAP server. Should match with certificate the entry key in the ldap.tls.certificatesSecret.",
                            "default": ""
                        }
                    }
                }
            }
        },
        "config": {
            "type": "object",
            "properties": {
                "useGrafanaIniFile": {
                    "type": "boolean",
                    "description": "Allows to load a `grafana.ini` file",
                    "default": false
                },
                "grafanaIniConfigMap": {
                    "type": "string",
                    "description": "Name of the ConfigMap containing the `grafana.ini` file",
                    "default": ""
                },
                "grafanaIniSecret": {
                    "type": "string",
                    "description": "Name of the Secret containing the `grafana.ini` file",
                    "default": ""
                }
            }
        },
        "dashboardsProvider": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the use of a Grafana dashboard provider",
                    "default": false
                },
                "configMapName": {
                    "type": "string",
                    "description": "Name of a ConfigMap containing a custom dashboard provider",
                    "default": ""
                }
            }
        },
        "dashboardsConfigMaps": {
            "type": "array",
            "description": "Array with the names of a series of ConfigMaps containing dashboards files",
            "default": [],
            "items": {}
        },
        "datasources": {
            "type": "object",
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "The name of an externally-managed secret containing custom datasource files.",
                    "default": ""
                },
                "secretDefinition": {
                    "type": "object",
                    "description": "The contents of a secret defining a custom datasource file. Only used if datasources.secretName is empty or not defined.",
                    "default": {}
                }
            }
        },
        "notifiers": {
            "type": "object",
            "properties": {
                "configMapName": {
                    "type": "string",
                    "description": "Name of a ConfigMap containing Grafana notifiers configuration",
                    "default": ""
                }
            }
        },
        "grafana": {
            "type": "object",
            "properties": {
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Grafana nodes",
                    "default": 1
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Set up update strategy for Grafana installation.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Alternative scheduler",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "In seconds, time the given to the Grafana pod needs to terminate gracefully",
                    "default": ""
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class name",
                    "default": ""
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Grafana pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Grafana Pod annotations",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "grafana": {
                            "type": "number",
                            "description": "Grafana container port",
                            "default": 3000
                        }
                    }
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in",
                    "default": [],
                    "items": {}
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable securityContext on for Grafana deployment",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group to configure permissions for volumes",
                            "default": 1001
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User for the security context",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Run containers as non-root users",
                            "default": true
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Grafana Image Renderer containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Grafana Image Renderer containers' Security Context runAsUser",
                            "default": 1001
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for Grafana containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for Grafana containers",
                            "default": {}
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "path": {
                            "type": "string",
                            "description": "Path for livenessProbe",
                            "default": "/api/health"
                        },
                        "scheme": {
                            "type": "string",
                            "description": "Scheme for livenessProbe",
                            "default": "HTTP"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 120
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "path": {
                            "type": "string",
                            "description": "Path for readinessProbe",
                            "default": "/api/health"
                        },
                        "scheme": {
                            "type": "string",
                            "description": "Scheme for readinessProbe",
                            "default": "HTTP"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "path": {
                            "type": "string",
                            "description": "Path for readinessProbe",
                            "default": "/api/health"
                        },
                        "scheme": {
                            "type": "string",
                            "description": "Scheme for readinessProbe",
                            "default": "HTTP"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Grafana container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Attach additional sidecar containers to the Grafana pod",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Grafana pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Additional volumes for the Grafana pod",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Additional volume mounts for the Grafana container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Grafana nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Grafana nodes",
                    "default": ""
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array containing extra env vars to configure Grafana",
                    "default": [],
                    "items": {}
                },
                "extraConfigmaps": {
                    "type": "array",
                    "description": "Array to mount extra ConfigMaps to configure Grafana",
                    "default": [],
                    "items": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable persistence",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                },
                "accessMode": {
                    "type": "string",
                    "description": "Persistent Volume Access Mode",
                    "default": "ReadWriteOnce"
                },
                "accessModes": {
                    "type": "array",
                    "description": "Persistent Volume Access Modes",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Storage class to use with the PVC",
                    "default": ""
                },
                "existingClaim": {
                    "type": "string",
                    "description": "If you want to reuse an existing claim, you can pass the name of the PVC using the existingClaim variable",
                    "default": ""
                },
                "size": {
                    "type": "string",
                    "description": "Size for the PV",
                    "default": "10Gi"
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to use. If not set and create is true, a name is generated using the fullname template",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations to add to the ServiceAccount Metadata",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the application controller service account",
                    "default": false
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type",
                    "default": "ClusterIP"
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Grafana service Cluster IP",
                    "default": ""
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "grafana": {
                            "type": "number",
                            "description": "Grafana service port",
                            "default": 3000
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "grafana": {
                            "type": "string",
                            "description": "Specify the nodePort value for the LoadBalancer and NodePort service types",
                            "default": ""
                        }
                    }
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "loadBalancerIP if Grafana service type is `LoadBalancer` (optional, cloud specific)",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "loadBalancerSourceRanges if Grafana service type is `LoadBalancer` (optional, cloud specific)",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Provide any additional annotations which may be required.",
                    "default": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Grafana service external traffic policy",
                    "default": "Cluster"
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra port to expose on Redmine service",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set to true to enable ingress record generation",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress Path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Override API Version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "When the ingress is enabled, a host pointing to this will be created",
                    "default": "grafana.local"
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress resource",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the hostname defined at ingress.hostname parameter",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "The list of additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "Any additional arbitrary paths that may need to be added to the ingress under the main host.",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "It is also possible to create and manage the certificates outside of this helm chart",
                    "default": [],
                    "items": {}
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the export of Prometheus metrics",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "3000"
                                        },
                                        "io/path": {
                                            "type": "string",
                                            "description": "",
                                            "default": "/metrics"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Labels to honor to add to the scrape endpoint",
                            "default": false
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional custom labels for the ServiceMonitor",
                            "default": {}
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace for the PrometheusRule Resource (defaults to the Release Namespace)",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "rules": {
                            "type": "array",
                            "description": "PrometheusRule rules to configure",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "imageRenderer": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable using a remote rendering service to render PNG images",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Grafana Image Renderer image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Grafana Image Renderer image repository",
                            "default": "bitnami/grafana-image-renderer"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Grafana Image Renderer image tag (immutable tags are recommended)",
                            "default": "3.8.0-debian-11-r5"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Grafana Image Renderer image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Grafana Image Renderer image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Grafana image Renderer pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Grafana Image Renderer Pod replicas",
                    "default": 1
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Grafana Image Renderer deployment strategy type.",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Grafana Image Renderer Pod annotations",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Grafana Image Renderer pods",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Grafana Image Renderer pods host aliases",
                    "default": [],
                    "items": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Grafana Image Renderer pods' priorityClassName",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "In seconds, time the given to the Grafana Image Renderer pod needs to terminate gracefully",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array containing extra env vars to configure Grafana",
                    "default": [],
                    "items": {}
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for Grafana containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for Grafana containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable securityContext on for Grafana Image Renderer deployment",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group to configure permissions for volumes",
                            "default": 1001
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User for the security context",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Run containers as non-root users",
                            "default": true
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Grafana Image Renderer containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Grafana Image Renderer containers' Security Context runAsUser",
                            "default": 1001
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes Service type",
                            "default": "ClusterIP"
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Grafana service Cluster IP",
                            "default": ""
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "imageRenderer": {
                                    "type": "number",
                                    "description": "Grafana Image Renderer metrics port",
                                    "default": 8080
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "grafana": {
                                    "type": "string",
                                    "description": "Specify the nodePort value for the LoadBalancer and NodePort service types",
                                    "default": ""
                                }
                            }
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "loadBalancerIP if Grafana service type is `LoadBalancer` (optional, cloud specific)",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "loadBalancerSourceRanges if Grafana service type is `LoadBalancer` (optional, cloud specific)",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Provide any additional annotations which may be required.",
                            "default": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Grafana service external traffic policy",
                            "default": "Cluster"
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra port to expose on Redmine service",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "8080"
                                        },
                                        "io/path": {
                                            "type": "string",
                                            "description": "",
                                            "default": "/metrics"
                                        }
                                    }
                                }
                            }
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable the export of Prometheus metrics",
                            "default": false
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace in which Prometheus is running",
                                    "default": ""
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped.",
                                    "default": ""
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "ServiceMonitor selector labels",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Extra labels for the ServiceMonitor",
                                    "default": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "honorLabels chooses the metric's labels on collisions with target labels",
                                    "default": false
                                }
                            }
                        },
                        "prometheusRule": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "if `true`, creates a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace for the PrometheusRule Resource (defaults to the Release Namespace)",
                                    "default": ""
                                },
                                "additionalLabels": {
                                    "type": "object",
                                    "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                                    "default": {}
                                },
                                "rules": {
                                    "type": "array",
                                    "description": "Prometheus Rule definitions",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Grafana Image Renderer pod(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Grafana Image Renderer pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Grafana Image Renderer nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Grafana Image Renderer nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Grafana Image Renderer pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Grafana Image Renderer container(s)",
                    "default": [],
                    "items": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Grafana Image Renderer container(s) to automate configuration before or after startup",
                    "default": {}
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r54"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "Set init container's Security Context runAsUser",
                            "default": 0
                        }
                    }
                }
            }
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        }
    }
}