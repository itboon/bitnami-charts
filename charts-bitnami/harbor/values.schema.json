{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template with a string",
            "default": ""
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release (evaluated as a template).",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "adminPassword": {
            "type": "string",
            "description": "The initial password of Harbor admin. Change it from portal after launching Harbor",
            "default": ""
        },
        "externalURL": {
            "type": "string",
            "description": "The external URL for Harbor Core service",
            "default": "https://core.harbor.domain"
        },
        "proxy": {
            "type": "object",
            "properties": {
                "httpProxy": {
                    "type": "string",
                    "description": "The URL of the HTTP proxy server",
                    "default": ""
                },
                "httpsProxy": {
                    "type": "string",
                    "description": "The URL of the HTTPS proxy server",
                    "default": ""
                },
                "noProxy": {
                    "type": "string",
                    "description": "The URLs that the proxy settings not apply to",
                    "default": "127.0.0.1,localhost,.local,.internal"
                },
                "components": {
                    "type": "array",
                    "description": "The component list that the proxy settings apply to",
                    "default": [
                        "core",
                        "jobservice",
                        "trivy"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "logLevel": {
            "type": "string",
            "description": "The log level used for Harbor services. Allowed values are [ fatal \\| error \\| warn \\| info \\| debug \\| trace ]",
            "default": "debug"
        },
        "internalTLS": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Use TLS in all the supported containers: core, jobservice, portal, registry and trivy",
                    "default": false
                },
                "caBundleSecret": {
                    "type": "string",
                    "description": "Name of an existing secret with a custom CA that will be injected into the trust store for core, jobservice, registry, trivy components",
                    "default": ""
                }
            }
        },
        "ipFamily": {
            "type": "object",
            "properties": {
                "ipv6": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable listening on IPv6 ([::]) for NGINX-based components (NGINX,portal)",
                            "default": true
                        }
                    }
                },
                "ipv4": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable listening on IPv4 for NGINX-based components (NGINX,portal)",
                            "default": true
                        }
                    }
                }
            }
        },
        "exposureType": {
            "type": "string",
            "description": "The way to expose Harbor. Allowed values are [ ingress \\| proxy ]",
            "default": "proxy"
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "NGINX proxy service type",
                    "default": "LoadBalancer"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "NGINX proxy service HTTP port",
                            "default": 80
                        },
                        "https": {
                            "type": "number",
                            "description": "NGINX proxy service HTTPS port",
                            "default": 443
                        },
                        "notary": {
                            "type": "number",
                            "description": "Notary service port",
                            "default": 4443
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Node port for HTTP",
                            "default": ""
                        },
                        "https": {
                            "type": "string",
                            "description": "Node port for HTTPS",
                            "default": ""
                        },
                        "notary": {
                            "type": "string",
                            "description": "Node port for Notary",
                            "default": ""
                        }
                    }
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "clusterIP": {
                    "type": "string",
                    "description": "NGINX proxy service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "NGINX proxy service Load Balancer IP",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "NGINX proxy service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "NGINX proxy service external traffic policy",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for NGINX proxy service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra port to expose on NGINX proxy service",
                    "default": [],
                    "items": {}
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "core": {
                    "type": "object",
                    "properties": {
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Ingress path type",
                            "default": "ImplementationSpecific"
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Force Ingress API version (automatically detected if not set)",
                            "default": ""
                        },
                        "controller": {
                            "type": "string",
                            "description": "The ingress controller type. Currently supports `default`, `gce` and `ncp`",
                            "default": "default"
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Default host for the ingress record",
                            "default": "core.harbor.domain"
                        },
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "ingress": {
                                    "type": "object",
                                    "properties": {
                                        "kubernetes": {
                                            "type": "object",
                                            "properties": {
                                                "io/ssl-redirect": {
                                                    "type": "object",
                                                    "description": "",
                                                    "default": {
                                                        "ingress.kubernetes.io/ssl-redirect": "true",
                                                        "ingress.kubernetes.io/proxy-body-size": "0",
                                                        "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                        "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                    }
                                                },
                                                "io/proxy-body-size": {
                                                    "type": "object",
                                                    "description": "",
                                                    "default": {
                                                        "ingress.kubernetes.io/ssl-redirect": "true",
                                                        "ingress.kubernetes.io/proxy-body-size": "0",
                                                        "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                        "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "nginx": {
                                    "type": "object",
                                    "properties": {
                                        "ingress": {
                                            "type": "object",
                                            "properties": {
                                                "kubernetes": {
                                                    "type": "object",
                                                    "properties": {
                                                        "io/ssl-redirect": {
                                                            "type": "object",
                                                            "description": "",
                                                            "default": {
                                                                "ingress.kubernetes.io/ssl-redirect": "true",
                                                                "ingress.kubernetes.io/proxy-body-size": "0",
                                                                "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                                "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                            }
                                                        },
                                                        "io/proxy-body-size": {
                                                            "type": "object",
                                                            "description": "",
                                                            "default": {
                                                                "ingress.kubernetes.io/ssl-redirect": "true",
                                                                "ingress.kubernetes.io/proxy-body-size": "0",
                                                                "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                                "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS configuration for the host defined at `ingress.core.hostname` parameter",
                            "default": false
                        },
                        "selfSigned": {
                            "type": "boolean",
                            "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "An array with additional hostname(s) to be covered with the ingress record",
                            "default": [],
                            "items": {}
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "Custom TLS certificates as secrets",
                            "default": [],
                            "items": {}
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "notary": {
                    "type": "object",
                    "properties": {
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Ingress path type",
                            "default": "ImplementationSpecific"
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Force Ingress API version (automatically detected if not set)",
                            "default": ""
                        },
                        "controller": {
                            "type": "string",
                            "description": "The ingress controller type. Currently supports `default`, `gce` and `ncp`",
                            "default": "default"
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Default host for the ingress record",
                            "default": "notary.harbor.domain"
                        },
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "ingress": {
                                    "type": "object",
                                    "properties": {
                                        "kubernetes": {
                                            "type": "object",
                                            "properties": {
                                                "io/ssl-redirect": {
                                                    "type": "object",
                                                    "description": "",
                                                    "default": {
                                                        "ingress.kubernetes.io/ssl-redirect": "true",
                                                        "ingress.kubernetes.io/proxy-body-size": "0",
                                                        "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                        "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                    }
                                                },
                                                "io/proxy-body-size": {
                                                    "type": "object",
                                                    "description": "",
                                                    "default": {
                                                        "ingress.kubernetes.io/ssl-redirect": "true",
                                                        "ingress.kubernetes.io/proxy-body-size": "0",
                                                        "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                        "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                "nginx": {
                                    "type": "object",
                                    "properties": {
                                        "ingress": {
                                            "type": "object",
                                            "properties": {
                                                "kubernetes": {
                                                    "type": "object",
                                                    "properties": {
                                                        "io/ssl-redirect": {
                                                            "type": "object",
                                                            "description": "",
                                                            "default": {
                                                                "ingress.kubernetes.io/ssl-redirect": "true",
                                                                "ingress.kubernetes.io/proxy-body-size": "0",
                                                                "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                                "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                            }
                                                        },
                                                        "io/proxy-body-size": {
                                                            "type": "object",
                                                            "description": "",
                                                            "default": {
                                                                "ingress.kubernetes.io/ssl-redirect": "true",
                                                                "ingress.kubernetes.io/proxy-body-size": "0",
                                                                "nginx.ingress.kubernetes.io/ssl-redirect": "true",
                                                                "nginx.ingress.kubernetes.io/proxy-body-size": "0"
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                            "default": false
                        },
                        "selfSigned": {
                            "type": "boolean",
                            "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "An array with additional hostname(s) to be covered with the ingress record",
                            "default": [],
                            "items": {}
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "Custom TLS certificates as secrets",
                            "default": [],
                            "items": {}
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the data persistence or not",
                    "default": true
                },
                "resourcePolicy": {
                    "type": "string",
                    "description": "Setting it to `keep` to avoid removing PVCs during a helm delete operation. Leaving it empty will delete PVCs after the chart deleted",
                    "default": "keep"
                },
                "persistentVolumeClaim": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "object",
                            "properties": {
                                "existingClaim": {
                                    "type": "string",
                                    "description": "Name of an existing PVC to use",
                                    "default": ""
                                },
                                "storageClass": {
                                    "type": "string",
                                    "description": "PVC Storage Class for Harbor Registry data volume",
                                    "default": ""
                                },
                                "subPath": {
                                    "type": "string",
                                    "description": "The sub path used in the volume",
                                    "default": ""
                                },
                                "accessModes": {
                                    "type": "array",
                                    "description": "The access mode of the volume",
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "size": {
                                    "type": "string",
                                    "description": "The size of the volume",
                                    "default": "5Gi"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the PVC",
                                    "default": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Selector to match an existing Persistent Volume",
                                    "default": {}
                                }
                            }
                        },
                        "jobservice": {
                            "type": "object",
                            "properties": {
                                "existingClaim": {
                                    "type": "string",
                                    "description": "Name of an existing PVC to use",
                                    "default": ""
                                },
                                "storageClass": {
                                    "type": "string",
                                    "description": "PVC Storage Class for Harbor Jobservice data volume",
                                    "default": ""
                                },
                                "subPath": {
                                    "type": "string",
                                    "description": "The sub path used in the volume",
                                    "default": ""
                                },
                                "accessModes": {
                                    "type": "array",
                                    "description": "The access mode of the volume",
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "size": {
                                    "type": "string",
                                    "description": "The size of the volume",
                                    "default": "1Gi"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the PVC",
                                    "default": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Selector to match an existing Persistent Volume",
                                    "default": {}
                                },
                                "scanData": {
                                    "type": "object",
                                    "properties": {
                                        "existingClaim": {
                                            "type": "string",
                                            "description": "Name of an existing PVC to use",
                                            "default": ""
                                        },
                                        "storageClass": {
                                            "type": "string",
                                            "description": "PVC Storage Class for Harbor Jobservice scan data volume",
                                            "default": ""
                                        },
                                        "subPath": {
                                            "type": "string",
                                            "description": "The sub path used in the volume",
                                            "default": ""
                                        },
                                        "accessModes": {
                                            "type": "array",
                                            "description": "The access mode of the volume",
                                            "default": [
                                                "ReadWriteOnce"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        },
                                        "size": {
                                            "type": "string",
                                            "description": "The size of the volume",
                                            "default": "1Gi"
                                        },
                                        "annotations": {
                                            "type": "object",
                                            "description": "Annotations for the PVC",
                                            "default": {}
                                        },
                                        "selector": {
                                            "type": "object",
                                            "description": "Selector to match an existing Persistent Volume",
                                            "default": {}
                                        }
                                    }
                                }
                            }
                        },
                        "trivy": {
                            "type": "object",
                            "properties": {
                                "storageClass": {
                                    "type": "string",
                                    "description": "PVC Storage Class for Trivy data volume",
                                    "default": ""
                                },
                                "accessModes": {
                                    "type": "array",
                                    "description": "The access mode of the volume",
                                    "default": [
                                        "ReadWriteOnce"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                },
                                "size": {
                                    "type": "string",
                                    "description": "The size of the volume",
                                    "default": "5Gi"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the PVC",
                                    "default": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Selector to match an existing Persistent Volume",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "imageChartStorage": {
                    "type": "object",
                    "properties": {
                        "caBundleSecret": {
                            "type": "string",
                            "description": "Specify the `caBundleSecret` if the storage service uses a self-signed certificate. The secret must contain keys named `ca.crt` which will be injected into the trust store  of registry's containers.",
                            "default": ""
                        },
                        "disableredirect": {
                            "type": "boolean",
                            "description": "The configuration for managing redirects from content backends. For backends which do not supported it (such as using MinIO&reg; for `s3` storage type), please set it to `true` to disable redirects. Refer to the [guide](https://github.com/docker/distribution/blob/master/docs/configuration.md#redirect) for more information about the detail",
                            "default": false
                        },
                        "type": {
                            "type": "string",
                            "description": "The type of storage for images and charts: `filesystem`, `azure`, `gcs`, `s3`, `swift` or `oss`. The type must be `filesystem` if you want to use persistent volumes for registry. Refer to the [guide](https://github.com/docker/distribution/blob/master/docs/configuration.md#storage) for more information about the detail",
                            "default": "filesystem"
                        },
                        "filesystem": {
                            "type": "object",
                            "properties": {
                                "rootdirectory": {
                                    "type": "string",
                                    "description": "Filesystem storage type setting: Storage root directory",
                                    "default": "/storage"
                                },
                                "maxthreads": {
                                    "type": "string",
                                    "description": "Filesystem storage type setting: Maximum threads directory",
                                    "default": ""
                                }
                            }
                        },
                        "azure": {
                            "type": "object",
                            "properties": {
                                "accountname": {
                                    "type": "string",
                                    "description": "Azure storage type setting: Name of the Azure account",
                                    "default": "accountname"
                                },
                                "accountkey": {
                                    "type": "string",
                                    "description": "Azure storage type setting: Key of the Azure account",
                                    "default": "base64encodedaccountkey"
                                },
                                "container": {
                                    "type": "string",
                                    "description": "Azure storage type setting: Container",
                                    "default": "containername"
                                },
                                "storagePrefix": {
                                    "type": "string",
                                    "description": "Azure storage type setting: Storage prefix",
                                    "default": "/azure/harbor/charts"
                                },
                                "realm": {
                                    "type": "string",
                                    "description": "Azure storage type setting: Realm of the Azure account",
                                    "default": ""
                                }
                            }
                        },
                        "gcs": {
                            "type": "object",
                            "properties": {
                                "bucket": {
                                    "type": "string",
                                    "description": "GCS storage type setting: Bucket name",
                                    "default": "bucketname"
                                },
                                "encodedkey": {
                                    "type": "string",
                                    "description": "GCS storage type setting: Base64 encoded key",
                                    "default": ""
                                },
                                "rootdirectory": {
                                    "type": "string",
                                    "description": "GCS storage type setting: Root directory name",
                                    "default": ""
                                },
                                "chunksize": {
                                    "type": "string",
                                    "description": "GCS storage type setting: Chunk size name",
                                    "default": ""
                                }
                            }
                        },
                        "s3": {
                            "type": "object",
                            "properties": {
                                "region": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Region",
                                    "default": "us-west-1"
                                },
                                "bucket": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Bucket name",
                                    "default": "bucketname"
                                },
                                "accesskey": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Access key name",
                                    "default": ""
                                },
                                "secretkey": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Secret Key name",
                                    "default": ""
                                },
                                "regionendpoint": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Region Endpoint",
                                    "default": ""
                                },
                                "encrypt": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Encrypt",
                                    "default": ""
                                },
                                "keyid": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Key ID",
                                    "default": ""
                                },
                                "secure": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Secure",
                                    "default": ""
                                },
                                "skipverify": {
                                    "type": "string",
                                    "description": "S3 storage type setting: TLS skip verification",
                                    "default": ""
                                },
                                "v4auth": {
                                    "type": "string",
                                    "description": "S3 storage type setting: V4 authorization",
                                    "default": ""
                                },
                                "chunksize": {
                                    "type": "string",
                                    "description": "S3 storage type setting: V4 authorization",
                                    "default": ""
                                },
                                "rootdirectory": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Root directory name",
                                    "default": ""
                                },
                                "storageClass": {
                                    "type": "string",
                                    "description": "S3 storage type setting: Storage class",
                                    "default": ""
                                },
                                "sse": {
                                    "type": "string",
                                    "description": "S3 storage type setting: SSE name",
                                    "default": ""
                                }
                            }
                        },
                        "swift": {
                            "type": "object",
                            "properties": {
                                "authurl": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Authentication url",
                                    "default": "https://storage.myprovider.com/v3/auth"
                                },
                                "username": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Authentication url",
                                    "default": ""
                                },
                                "password": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Password",
                                    "default": ""
                                },
                                "container": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Container",
                                    "default": ""
                                },
                                "region": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Region",
                                    "default": ""
                                },
                                "tenant": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Tenant",
                                    "default": ""
                                },
                                "tenantid": {
                                    "type": "string",
                                    "description": "Swift storage type setting: TenantID",
                                    "default": ""
                                },
                                "domain": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Domain",
                                    "default": ""
                                },
                                "domainid": {
                                    "type": "string",
                                    "description": "Swift storage type setting: DomainID",
                                    "default": ""
                                },
                                "trustid": {
                                    "type": "string",
                                    "description": "Swift storage type setting: TrustID",
                                    "default": ""
                                },
                                "insecureskipverify": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Verification",
                                    "default": ""
                                },
                                "chunksize": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Chunk",
                                    "default": ""
                                },
                                "prefix": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Prefix",
                                    "default": ""
                                },
                                "secretkey": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Secre Key",
                                    "default": ""
                                },
                                "accesskey": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Access Key",
                                    "default": ""
                                },
                                "authversion": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Auth",
                                    "default": ""
                                },
                                "endpointtype": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Endpoint",
                                    "default": ""
                                },
                                "tempurlcontainerkey": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Temp URL container key",
                                    "default": ""
                                },
                                "tempurlmethods": {
                                    "type": "string",
                                    "description": "Swift storage type setting: Temp URL methods",
                                    "default": ""
                                }
                            }
                        },
                        "oss": {
                            "type": "object",
                            "properties": {
                                "accesskeyid": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Access key ID",
                                    "default": ""
                                },
                                "accesskeysecret": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Access key secret name containing the token",
                                    "default": ""
                                },
                                "region": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Region name",
                                    "default": ""
                                },
                                "bucket": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Bucket name",
                                    "default": ""
                                },
                                "endpoint": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Endpoint",
                                    "default": ""
                                },
                                "internal": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Internal",
                                    "default": ""
                                },
                                "encrypt": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Encrypt",
                                    "default": ""
                                },
                                "secure": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Secure",
                                    "default": ""
                                },
                                "chunksize": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Chunk",
                                    "default": ""
                                },
                                "rootdirectory": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Directory",
                                    "default": ""
                                },
                                "secretkey": {
                                    "type": "string",
                                    "description": "OSS storage type setting: Secret key",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "tracing": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable tracing",
                    "default": false
                },
                "sampleRate": {
                    "type": "number",
                    "description": "Tracing sample rate from 0 to 1",
                    "default": 1
                },
                "namespace": {
                    "type": "string",
                    "description": "Used to differentiate traces between different harbor services",
                    "default": ""
                },
                "attributes": {
                    "type": "object",
                    "description": "A key value dict containing user defined attributes used to initialize the trace provider",
                    "default": {}
                },
                "jaeger": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable jaeger export",
                            "default": false
                        },
                        "endpoint": {
                            "type": "string",
                            "description": "Jaeger endpoint",
                            "default": ""
                        },
                        "username": {
                            "type": "string",
                            "description": "Jaeger username",
                            "default": ""
                        },
                        "password": {
                            "type": "string",
                            "description": "Jaeger password",
                            "default": ""
                        },
                        "agentHost": {
                            "type": "string",
                            "description": "Jaeger agent hostname",
                            "default": ""
                        },
                        "agentPort": {
                            "type": "string",
                            "description": "Jaeger agent port",
                            "default": ""
                        }
                    }
                },
                "otel": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable otel export",
                            "default": false
                        },
                        "endpoint": {
                            "type": "string",
                            "description": "The hostname and port for an otel compatible backend",
                            "default": "hostname:4318"
                        },
                        "urlpath": {
                            "type": "string",
                            "description": "Url path of otel endpoint",
                            "default": "/v1/traces"
                        },
                        "compression": {
                            "type": "boolean",
                            "description": "Enable data compression",
                            "default": false
                        },
                        "timeout": {
                            "type": "string",
                            "description": "The timeout for data transfer",
                            "default": "10s"
                        },
                        "insecure": {
                            "type": "boolean",
                            "description": "Ignore cert verification for otel backend",
                            "default": true
                        }
                    }
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner and group of the persistent volume",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r28"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Init container volume-permissions image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "Init container volume-permissions resource limits",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "Init container volume-permissions resource requests",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable init container Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the init container",
                            "default": 0
                        }
                    }
                }
            }
        },
        "nginx": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "NGINX image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "NGINX image repository",
                            "default": "bitnami/nginx"
                        },
                        "tag": {
                            "type": "string",
                            "description": "NGINX image tag (immutable tags are recommended)",
                            "default": "1.25.1-debian-11-r48"
                        },
                        "digest": {
                            "type": "string",
                            "description": "NGINX image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "NGINX image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "NGINX image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable NGINX image debug mode",
                            "default": false
                        }
                    }
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable TLS termination",
                            "default": true
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Existing secret name containing your own TLS certificates.",
                            "default": ""
                        },
                        "commonName": {
                            "type": "string",
                            "description": "The common name used to generate the self-signed TLS certificates",
                            "default": "core.harbor.domain"
                        }
                    }
                },
                "behindReverseProxy": {
                    "type": "boolean",
                    "description": "If NGINX is behind another reverse proxy, set to true",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add NGINX pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for NGINX pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for NGINX pods",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "NGINX HTTP container port",
                            "default": 8080
                        },
                        "https": {
                            "type": "number",
                            "description": "NGINX HTTPS container port",
                            "default": 8443
                        },
                        "notary": {
                            "type": "number",
                            "description": "NGINX container port where Notary svc is exposed",
                            "default": 4443
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of NGINX replicas",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on NGINX containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on NGINX containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on NGINX containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the NGINX containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the NGINX containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled NGINX pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set NGINX pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled NGINX containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set NGINX containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set NGINX containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "NGINX deployment strategy type - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook for the NGINX container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "NGINX pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add additional labels to the NGINX pods (evaluated as a template)",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations to add to the NGINX pods (evaluated as a template)",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "NGINX Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "NGINX Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "NGINX Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "NGINX Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "NGINX Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "NGINX Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "NGINX Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "NGINX Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the NGINX pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the NGINX pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the NGINX pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the NGINX pods",
                    "default": [],
                    "items": {}
                }
            }
        },
        "portal": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Harbor Portal image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Harbor Portal image repository",
                            "default": "bitnami/harbor-portal"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Harbor Portal image tag (immutable tags are recommended)",
                            "default": "2.8.3-debian-11-r6"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Harbor Portal image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Harbor Portal image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Harbor Portal image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Harbor Portal image debug mode",
                            "default": false
                        }
                    }
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of an existing secret with the certificates for internal TLS access",
                            "default": ""
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add Harbor Portal pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for Harbor Portal pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for Harbor Portal pods",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Harbor Portal HTTP container port",
                            "default": 8080
                        },
                        "https": {
                            "type": "number",
                            "description": "Harbor Portal HTTPS container port",
                            "default": 8443
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Harbor Portal replicas",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Harbor Portal containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Harbor Portal containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Harbor Portal containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Harbor Portal containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Harbor Portal containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Harbor Portal pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Harbor Portal pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Harbor Portal containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Harbor Portal containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Harbor Portal containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Portal deployment strategy type - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook for the Harbor Portal container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Harbor Portal pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add additional labels to the Harbor Portal pods (evaluated as a template)",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations to add to the Harbor Portal pods (evaluated as a template)",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Portal Pod affinity preset. Ignored if `portal.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Portal Pod anti-affinity preset. Ignored if `portal.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Portal Node affinity preset type. Ignored if `portal.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Harbor Portal Node label key to match Ignored if `portal.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Harbor Portal Node label values to match. Ignored if `portal.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Harbor Portal Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Harbor Portal Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Harbor Portal Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Harbor Portal pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Harbor Portal pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Harbor Portal pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Harbor Portal pods",
                    "default": [],
                    "items": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Harbor Portal HTTP service port",
                                    "default": 80
                                },
                                "https": {
                                    "type": "number",
                                    "description": "Harbor Portal HTTPS service port",
                                    "default": 443
                                }
                            }
                        }
                    }
                }
            }
        },
        "core": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Harbor Core image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Harbor Core image repository",
                            "default": "bitnami/harbor-core"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Harbor Core image tag (immutable tags are recommended)",
                            "default": "2.8.3-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Harbor Core image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Harbor Core image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Harbor Core image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Harbor Core image debug mode",
                            "default": false
                        }
                    }
                },
                "sessionLifetime": {
                    "type": "string",
                    "description": "Explicitly set a session timeout (in seconds) overriding the backend default.",
                    "default": ""
                },
                "uaaSecret": {
                    "type": "string",
                    "description": "If using external UAA auth which has a self signed cert, you can provide a pre-created secret containing it under the key `ca.crt`.",
                    "default": ""
                },
                "secretKey": {
                    "type": "string",
                    "description": "The key used for encryption. Must be a string of 16 chars",
                    "default": ""
                },
                "secret": {
                    "type": "string",
                    "description": "Secret used when the core server communicates with other components. If a secret key is not specified, Helm will generate one. Must be a string of 16 chars.",
                    "default": ""
                },
                "tokenKey": {
                    "type": "string",
                    "description": "Key of the certificate used for token encryption/decryption.",
                    "default": ""
                },
                "tokenCert": {
                    "type": "string",
                    "description": "Certificate used for token encryption/decryption.",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Fill the name of a kubernetes secret if you want to use your own TLS certificate and private key for token encryption/decryption. The secret must contain two keys named: `tls.crt` - the certificate and `tls.key` - the private key. The default key pair will be used if it isn't set",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Existing secret for core",
                    "default": ""
                },
                "existingEnvVarsSecret": {
                    "type": "string",
                    "description": "Existing secret for core envvars",
                    "default": ""
                },
                "csrfKey": {
                    "type": "string",
                    "description": "The CSRF key. Will be generated automatically if it isn't specified",
                    "default": ""
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of an existing secret with the certificates for internal TLS access",
                            "default": ""
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add Harbor Core pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for Harbor Core pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for Harbor Core pods",
                    "default": ""
                },
                "configOverwriteJson": {
                    "type": "string",
                    "description": "String containing a JSON with configuration overrides",
                    "default": ""
                },
                "configOverwriteJsonSecret": {
                    "type": "string",
                    "description": "Secret containing the JSON configuration overrides",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Harbor Core HTTP container port",
                            "default": 8080
                        },
                        "https": {
                            "type": "number",
                            "description": "Harbor Core HTTPS container port",
                            "default": 8443
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Harbor Core metrics container port",
                            "default": 8001
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Harbor Core replicas",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Harbor Core containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Harbor Core containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Harbor Core containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Harbor Core containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Harbor Core containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Harbor Core pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Harbor Core pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Harbor Core containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Harbor Core containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Harbor Core containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Core deployment strategy type - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook for the Harbor Core container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Harbor Core pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add additional labels to the Harbor Core pods (evaluated as a template)",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations to add to the Harbor Core pods (evaluated as a template)",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Core Pod affinity preset. Ignored if `core.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Core Pod anti-affinity preset. Ignored if `core.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Core Node affinity preset type. Ignored if `core.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Harbor Core Node label key to match Ignored if `core.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Harbor Core Node label values to match. Ignored if `core.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Harbor Core Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Harbor Core Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Harbor Core Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Harbor Core pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Harbor Core pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Harbor Core pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Harbor Core pods",
                    "default": [],
                    "items": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Harbor Core HTTP service port",
                                    "default": 80
                                },
                                "https": {
                                    "type": "number",
                                    "description": "Harbor Core HTTPS service port",
                                    "default": 443
                                },
                                "metrics": {
                                    "type": "number",
                                    "description": "Harbor Core metrics service port",
                                    "default": 8001
                                }
                            }
                        }
                    }
                }
            }
        },
        "jobservice": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Harbor Jobservice image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Harbor Jobservice image repository",
                            "default": "bitnami/harbor-jobservice"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Harbor Jobservice image tag (immutable tags are recommended)",
                            "default": "2.8.3-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Harbor Jobservice image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Harbor Jobservice image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Harbor Jobservice image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Harbor Jobservice image debug mode",
                            "default": false
                        }
                    }
                },
                "maxJobWorkers": {
                    "type": "number",
                    "description": "The max job workers",
                    "default": 10
                },
                "redisNamespace": {
                    "type": "string",
                    "description": "Redis namespace for jobservice",
                    "default": "harbor_job_service_namespace"
                },
                "jobLogger": {
                    "type": "string",
                    "description": "The logger for jobs: `file`, `database` or `stdout`",
                    "default": "file"
                },
                "secret": {
                    "type": "string",
                    "description": "Secret used when the job service communicates with other components. If a secret key is not specified, Helm will generate one. Must be a string of 16 chars.",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Existing secret for jobservice",
                    "default": ""
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of an existing secret with the certificates for internal TLS access",
                            "default": ""
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add Harbor Jobservice pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for Harbor Jobservice pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for Harbor Jobservice pods",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Harbor Jobservice HTTP container port",
                            "default": 8080
                        },
                        "https": {
                            "type": "number",
                            "description": "Harbor Jobservice HTTPS container port",
                            "default": 8443
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Harbor Jobservice metrics container port",
                            "default": 8001
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Harbor Jobservice replicas",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Harbor Jobservice containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Harbor Jobservice containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Harbor Jobservice containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Harbor Jobservice containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Harbor Jobservice containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Harbor Jobservice pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Harbor Jobservice pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Harbor Jobservice containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Harbor Jobservice containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Harbor Jobservice containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Jobservice deployment strategy type - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook for the Harbor Jobservice container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Harbor Jobservice pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add additional labels to the Harbor Jobservice pods (evaluated as a template)",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations to add to the Harbor Jobservice pods (evaluated as a template)",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Jobservice Pod affinity preset. Ignored if `jobservice.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Jobservice Pod anti-affinity preset. Ignored if `jobservice.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Jobservice Node affinity preset type. Ignored if `jobservice.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Harbor Jobservice Node label key to match Ignored if `jobservice.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Harbor Jobservice Node label values to match. Ignored if `jobservice.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Harbor Jobservice Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Harbor Jobservice Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Harbor Jobservice Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Harbor Jobservice pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Harbor Jobservice pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Harbor Jobservice pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Harbor Jobservice pods",
                    "default": [],
                    "items": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Harbor Jobservice HTTP service port",
                                    "default": 80
                                },
                                "https": {
                                    "type": "number",
                                    "description": "Harbor Jobservice HTTPS service port",
                                    "default": 443
                                },
                                "metrics": {
                                    "type": "number",
                                    "description": "Harbor Jobservice HTTPS service port",
                                    "default": 8001
                                }
                            }
                        }
                    }
                }
            }
        },
        "registry": {
            "type": "object",
            "properties": {
                "secret": {
                    "type": "string",
                    "description": "Secret is used to secure the upload state from client and registry storage backend. See: <https://github.com/docker/distribution/blob/master/docs/configuration.md>",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Existing secret for registry",
                    "default": ""
                },
                "relativeurls": {
                    "type": "boolean",
                    "description": "Make the registry return relative URLs in Location headers. The client is responsible for resolving the correct URL.",
                    "default": false
                },
                "credentials": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "The username for accessing the registry instance, which is hosted by htpasswd auth mode.  More details see [official docs](https://github.com/docker/distribution/blob/master/docs/configuration.md#htpasswd)",
                            "default": "harbor_registry_user"
                        },
                        "password": {
                            "type": "string",
                            "description": "The password for accessing the registry instance, which is hosted by htpasswd auth mode.  More details see [official docs](https://github.com/docker/distribution/blob/master/docs/configuration.md#htpasswd). It is suggested you update this value before installation.",
                            "default": "harbor_registry_password"
                        },
                        "htpasswd": {
                            "type": "string",
                            "description": "The content of htpasswd file based on the value of `registry.credentials.username` `registry.credentials.password`.  Currently `helm` does not support bcrypt in the template script, if the credential is updated you need to manually generated by calling",
                            "default": "harbor_registry_user:$2y$10$9L4Tc0DJbFFMB6RdSCunrOpTHdwhid4ktBJmLD00bYgqkkGOvll3m"
                        }
                    }
                },
                "middleware": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Middleware is used to add support for a CDN between backend storage and `docker pull` recipient.  See",
                            "default": false
                        },
                        "type": {
                            "type": "string",
                            "description": "CDN type for the middleware",
                            "default": "cloudFront"
                        },
                        "cloudFront": {
                            "type": "object",
                            "properties": {
                                "baseurl": {
                                    "type": "string",
                                    "description": "CloudFront CDN settings: Base URL",
                                    "default": "example.cloudfront.net"
                                },
                                "keypairid": {
                                    "type": "string",
                                    "description": "CloudFront CDN settings: Keypair ID",
                                    "default": "KEYPAIRID"
                                },
                                "duration": {
                                    "type": "string",
                                    "description": "CloudFront CDN settings: Duration",
                                    "default": "3000s"
                                },
                                "ipfilteredby": {
                                    "type": "string",
                                    "description": "CloudFront CDN settings: IP filters",
                                    "default": "none"
                                },
                                "privateKeySecret": {
                                    "type": "string",
                                    "description": "CloudFront CDN settings: Secret name with the private key",
                                    "default": "my-secret"
                                }
                            }
                        }
                    }
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of an existing secret with the certificates for internal TLS access",
                            "default": ""
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Harbor Registry replicas",
                    "default": 1
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Harbor Registry pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Harbor Registry pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Registry deployment strategy type - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Harbor Registry pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add additional labels to the Harbor Registry pods (evaluated as a template)",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations to add to the Harbor Registry pods (evaluated as a template)",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Registry Pod affinity preset. Ignored if `registry.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Registry Pod anti-affinity preset. Ignored if `registry.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Registry Node affinity preset type. Ignored if `registry.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Harbor Registry Node label key to match Ignored if `registry.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Harbor Registry Node label values to match. Ignored if `registry.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Harbor Registry Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Harbor Registry Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Harbor Registry Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Harbor Registry pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Harbor Registry pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Harbor Registry pods",
                    "default": [],
                    "items": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token",
                    "default": false
                },
                "server": {
                    "type": "object",
                    "properties": {
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Harbor Registry image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Harbor Registry image repository",
                                    "default": "bitnami/harbor-registry"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Harbor Registry image tag (immutable tags are recommended)",
                                    "default": "2.8.3-debian-11-r8"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Harbor Registry image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Harbor Registry image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Harbor Registry image pull secrets",
                                    "default": [],
                                    "items": {}
                                },
                                "debug": {
                                    "type": "boolean",
                                    "description": "Enable Harbor Registry image debug mode",
                                    "default": false
                                }
                            }
                        },
                        "command": {
                            "type": "array",
                            "description": "Override default container command (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override default container args (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVars": {
                            "type": "array",
                            "description": "Array with extra environment variables to add Harbor Registry main containers",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVarsCM": {
                            "type": "string",
                            "description": "ConfigMap containing extra environment variables for Harbor Registry main containers",
                            "default": ""
                        },
                        "extraEnvVarsSecret": {
                            "type": "string",
                            "description": "Secret containing extra environment variables (in case of sensitive data) for Harbor Registry main containers",
                            "default": ""
                        },
                        "containerPorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Harbor Registry HTTP container port",
                                    "default": 5000
                                },
                                "https": {
                                    "type": "number",
                                    "description": "Harbor Registry HTTPS container port",
                                    "default": 5443
                                },
                                "debug": {
                                    "type": "number",
                                    "description": "Harbor Registry debug container port",
                                    "default": 5001
                                },
                                "metrics": {
                                    "type": "number",
                                    "description": "Harbor Registry metrics container port",
                                    "default": 8001
                                }
                            }
                        },
                        "livenessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable livenessProbe on Harbor Registry main containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for livenessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for livenessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for livenessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for livenessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for livenessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "readinessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable readinessProbe on Harbor Registry main containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for readinessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for readinessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for readinessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for readinessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for readinessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "startupProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable startupProbe on Harbor Registry main containers",
                                    "default": false
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for startupProbe",
                                    "default": 5
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for startupProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for startupProbe",
                                    "default": 1
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for startupProbe",
                                    "default": 15
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for startupProbe",
                                    "default": 1
                                }
                            }
                        },
                        "customLivenessProbe": {
                            "type": "object",
                            "description": "Custom livenessProbe that overrides the default one",
                            "default": {}
                        },
                        "customReadinessProbe": {
                            "type": "object",
                            "description": "Custom readinessProbe that overrides the default one",
                            "default": {}
                        },
                        "customStartupProbe": {
                            "type": "object",
                            "description": "Custom startupProbe that overrides the default one",
                            "default": {}
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the Harbor Registry main containers",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the Harbor Registry main containers",
                                    "default": {}
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enabled Harbor Registry main containers' Security Context",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "Set Harbor Registry main containers' Security Context runAsUser",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set Harbor Registry main containers' Security Context runAsNonRoot",
                                    "default": true
                                }
                            }
                        },
                        "lifecycleHooks": {
                            "type": "object",
                            "description": "LifecycleHook for the Harbor Registry main container(s) to automate configuration before or after startup",
                            "default": {}
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumeMounts for the Harbor Registry main pods",
                            "default": [],
                            "items": {}
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "number",
                                            "description": "Harbor Registry HTTP service port",
                                            "default": 5000
                                        },
                                        "https": {
                                            "type": "number",
                                            "description": "Harbor Registry HTTPS service port",
                                            "default": 5443
                                        },
                                        "metrics": {
                                            "type": "number",
                                            "description": "Harbor Registry metrics service port",
                                            "default": 8001
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "controller": {
                    "type": "object",
                    "properties": {
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Harbor Registryctl image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Harbor Registryctl image repository",
                                    "default": "bitnami/harbor-registryctl"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Harbor Registryctl image tag (immutable tags are recommended)",
                                    "default": "2.8.3-debian-11-r0"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Harbor Registryctl image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Harbor Registryctl image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Harbor Registryctl image pull secrets",
                                    "default": [],
                                    "items": {}
                                },
                                "debug": {
                                    "type": "boolean",
                                    "description": "Enable Harbor Registryctl image debug mode",
                                    "default": false
                                }
                            }
                        },
                        "command": {
                            "type": "array",
                            "description": "Override default container command (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override default container args (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVars": {
                            "type": "array",
                            "description": "Array with extra environment variables to add Harbor Registryctl containers",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVarsCM": {
                            "type": "string",
                            "description": "ConfigMap containing extra environment variables for Harbor Registryctl containers",
                            "default": ""
                        },
                        "extraEnvVarsSecret": {
                            "type": "string",
                            "description": "Secret containing extra environment variables (in case of sensitive data) for Harbor Registryctl containers",
                            "default": ""
                        },
                        "containerPorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Harbor Registryctl HTTP container port",
                                    "default": 8080
                                },
                                "https": {
                                    "type": "number",
                                    "description": "Harbor Registryctl HTTPS container port",
                                    "default": 8443
                                }
                            }
                        },
                        "livenessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable livenessProbe on Harbor Registryctl containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for livenessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for livenessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for livenessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for livenessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for livenessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "readinessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable readinessProbe on Harbor Registryctl containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for readinessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for readinessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for readinessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for readinessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for readinessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "startupProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable startupProbe on Harbor Registryctl containers",
                                    "default": false
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for startupProbe",
                                    "default": 5
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for startupProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for startupProbe",
                                    "default": 1
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for startupProbe",
                                    "default": 15
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for startupProbe",
                                    "default": 1
                                }
                            }
                        },
                        "customLivenessProbe": {
                            "type": "object",
                            "description": "Custom livenessProbe that overrides the default one",
                            "default": {}
                        },
                        "customReadinessProbe": {
                            "type": "object",
                            "description": "Custom readinessProbe that overrides the default one",
                            "default": {}
                        },
                        "customStartupProbe": {
                            "type": "object",
                            "description": "Custom startupProbe that overrides the default one",
                            "default": {}
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the Harbor Registryctl containers",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the Harbor Registryctl containers",
                                    "default": {}
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enabled Harbor Registryctl containers' Security Context",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "Set Harbor Registryctl containers' Security Context runAsUser",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set Harbor Registryctl containers' Security Context runAsNonRoot",
                                    "default": true
                                }
                            }
                        },
                        "lifecycleHooks": {
                            "type": "object",
                            "description": "LifecycleHook for the Harbor Registryctl container(s) to automate configuration before or after startup",
                            "default": {}
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumeMounts for the Harbor Registryctl pods",
                            "default": [],
                            "items": {}
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "number",
                                            "description": "Harbor Registryctl HTTP service port",
                                            "default": 8080
                                        },
                                        "https": {
                                            "type": "number",
                                            "description": "Harbor Registryctl HTTPS service port",
                                            "default": 8443
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "notary": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Notary",
                    "default": true
                },
                "secretName": {
                    "type": "string",
                    "description": "Fill the name of a kubernetes secret if you want to use your own TLS certificate authority, certificate and private key for notary communications. The secret must contain keys named `notary-signer-ca.crt`, `notary-signer.key` and `notary-signer.crt` that contain the CA, certificate and private key. They will be generated if not set.",
                    "default": ""
                },
                "server": {
                    "type": "object",
                    "properties": {
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Harbor Notary Server image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Harbor Notary Server image repository",
                                    "default": "bitnami/harbor-notary-server"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Harbor Notary Server image tag (immutable tags are recommended)",
                                    "default": "2.8.3-debian-11-r6"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Notary Server image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Harbor Notary Server image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Harbor Notary Server image pull secrets",
                                    "default": [],
                                    "items": {}
                                },
                                "debug": {
                                    "type": "boolean",
                                    "description": "Enable Harbor Notary Server image debug mode",
                                    "default": false
                                }
                            }
                        },
                        "command": {
                            "type": "array",
                            "description": "Override default container command (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override default container args (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVars": {
                            "type": "array",
                            "description": "Array with extra environment variables to add Harbor Notary Server pods",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVarsCM": {
                            "type": "string",
                            "description": "ConfigMap containing extra environment variables for Harbor Notary Server pods",
                            "default": ""
                        },
                        "extraEnvVarsSecret": {
                            "type": "string",
                            "description": "Secret containing extra environment variables (in case of sensitive data) for Harbor Notary Server pods",
                            "default": ""
                        },
                        "containerPorts": {
                            "type": "object",
                            "properties": {
                                "server": {
                                    "type": "number",
                                    "description": "Harbor Notary Server container port",
                                    "default": 4443
                                }
                            }
                        },
                        "replicaCount": {
                            "type": "number",
                            "description": "Number of Harbor Notary Server replicas",
                            "default": 1
                        },
                        "livenessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable livenessProbe on Harbor Notary Server containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for livenessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for livenessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for livenessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for livenessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for livenessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "readinessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable readinessProbe on Harbor Notary Server containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for readinessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for readinessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for readinessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for readinessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for readinessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "startupProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable startupProbe on Harbor Notary Server containers",
                                    "default": false
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for startupProbe",
                                    "default": 5
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for startupProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for startupProbe",
                                    "default": 1
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for startupProbe",
                                    "default": 15
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for startupProbe",
                                    "default": 1
                                }
                            }
                        },
                        "customLivenessProbe": {
                            "type": "object",
                            "description": "Custom livenessProbe that overrides the default one",
                            "default": {}
                        },
                        "customReadinessProbe": {
                            "type": "object",
                            "description": "Custom readinessProbe that overrides the default one",
                            "default": {}
                        },
                        "customStartupProbe": {
                            "type": "object",
                            "description": "Custom startupProbe that overrides the default one",
                            "default": {}
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the Harbor Notary Server containers",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the Harbor Notary Server containers",
                                    "default": {}
                                }
                            }
                        },
                        "podSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enabled Harbor Notary Server pods' Security Context",
                                    "default": true
                                },
                                "fsGroup": {
                                    "type": "number",
                                    "description": "Set Harbor Notary Server pod's Security Context fsGroup",
                                    "default": 1001
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enabled Harbor Notary Server containers' Security Context",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "Set Harbor Notary Server containers' Security Context runAsUser",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set Harbor Notary Server containers' Security Context runAsNonRoot",
                                    "default": true
                                }
                            }
                        },
                        "updateStrategy": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Harbor Notary Server deployment strategy type - only really applicable for deployments with RWO PVs attached",
                                    "default": "RollingUpdate"
                                }
                            }
                        },
                        "lifecycleHooks": {
                            "type": "object",
                            "description": "LifecycleHook for the Harbor Notary Server container(s) to automate configuration before or after startup",
                            "default": {}
                        },
                        "hostAliases": {
                            "type": "array",
                            "description": "Harbor Notary Server pods host aliases",
                            "default": [],
                            "items": {}
                        },
                        "podLabels": {
                            "type": "object",
                            "description": "Add additional labels to the Harbor Notary Server pods (evaluated as a template)",
                            "default": {}
                        },
                        "podAnnotations": {
                            "type": "object",
                            "description": "Annotations to add to the Harbor Notary Server pods (evaluated as a template)",
                            "default": {}
                        },
                        "podAffinityPreset": {
                            "type": "string",
                            "description": "Harbor Notary Server Pod affinity preset. Ignored if `notary.server.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "podAntiAffinityPreset": {
                            "type": "string",
                            "description": "Harbor Notary Server Pod anti-affinity preset. Ignored if `notary.server.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": "soft"
                        },
                        "nodeAffinityPreset": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Harbor Notary Server Node affinity preset type. Ignored if `notary.server.affinity` is set. Allowed values: `soft` or `hard`",
                                    "default": ""
                                },
                                "key": {
                                    "type": "string",
                                    "description": "Harbor Notary Server Node label key to match Ignored if `notary.server.affinity` is set.",
                                    "default": ""
                                },
                                "values": {
                                    "type": "array",
                                    "description": "Harbor Notary Server Node label values to match. Ignored if `notary.server.affinity` is set.",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "affinity": {
                            "type": "object",
                            "description": "Harbor Notary Server Affinity for pod assignment",
                            "default": {}
                        },
                        "nodeSelector": {
                            "type": "object",
                            "description": "Harbor Notary Server Node labels for pod assignment",
                            "default": {}
                        },
                        "tolerations": {
                            "type": "array",
                            "description": "Harbor Notary Server Tolerations for pod assignment",
                            "default": [],
                            "items": {}
                        },
                        "topologySpreadConstraints": {
                            "type": "array",
                            "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                            "default": [],
                            "items": {}
                        },
                        "priorityClassName": {
                            "type": "string",
                            "description": "Priority Class Name",
                            "default": ""
                        },
                        "schedulerName": {
                            "type": "string",
                            "description": "Use an alternate scheduler, e.g. \"stork\".",
                            "default": ""
                        },
                        "sidecars": {
                            "type": "array",
                            "description": "Add additional sidecar containers to the Harbor Notary Server pods",
                            "default": [],
                            "items": {}
                        },
                        "initContainers": {
                            "type": "array",
                            "description": "Add additional init containers to the Harbor Notary Server pods",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumeMounts for the Harbor Notary Server pods",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumes": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumes for the Harbor Notary Server pods",
                            "default": [],
                            "items": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token",
                            "default": false
                        }
                    }
                },
                "signer": {
                    "type": "object",
                    "properties": {
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer image repository",
                                    "default": "bitnami/harbor-notary-signer"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer image tag (immutable tags are recommended)",
                                    "default": "2.8.3-debian-11-r6"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Harbor Notary Signer image pull secrets",
                                    "default": [],
                                    "items": {}
                                },
                                "debug": {
                                    "type": "boolean",
                                    "description": "Enable Harbor Notary Signer image debug mode",
                                    "default": false
                                }
                            }
                        },
                        "command": {
                            "type": "array",
                            "description": "Override default container command (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override default container args (useful when using custom images)",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVars": {
                            "type": "array",
                            "description": "Array with extra environment variables to add Harbor Notary Signer pods",
                            "default": [],
                            "items": {}
                        },
                        "extraEnvVarsCM": {
                            "type": "string",
                            "description": "ConfigMap containing extra environment variables for Harbor Notary Signer pods",
                            "default": ""
                        },
                        "extraEnvVarsSecret": {
                            "type": "string",
                            "description": "Secret containing extra environment variables (in case of sensitive data) for Harbor Notary Signer pods",
                            "default": ""
                        },
                        "containerPorts": {
                            "type": "object",
                            "properties": {
                                "signer": {
                                    "type": "number",
                                    "description": "Harbor Notary Signer container port",
                                    "default": 7899
                                }
                            }
                        },
                        "replicaCount": {
                            "type": "number",
                            "description": "Number of Harbor Notary Signer replicas",
                            "default": 1
                        },
                        "livenessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable livenessProbe on Harbor Notary Signer containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for livenessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for livenessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for livenessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for livenessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for livenessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "readinessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable readinessProbe on Harbor Notary Signer containers",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for readinessProbe",
                                    "default": 20
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for readinessProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for readinessProbe",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for readinessProbe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for readinessProbe",
                                    "default": 1
                                }
                            }
                        },
                        "startupProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable startupProbe on Harbor Notary Signer containers",
                                    "default": false
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Initial delay seconds for startupProbe",
                                    "default": 5
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "Period seconds for startupProbe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "Timeout seconds for startupProbe",
                                    "default": 1
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Failure threshold for startupProbe",
                                    "default": 15
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Success threshold for startupProbe",
                                    "default": 1
                                }
                            }
                        },
                        "customLivenessProbe": {
                            "type": "object",
                            "description": "Custom livenessProbe that overrides the default one",
                            "default": {}
                        },
                        "customReadinessProbe": {
                            "type": "object",
                            "description": "Custom readinessProbe that overrides the default one",
                            "default": {}
                        },
                        "customStartupProbe": {
                            "type": "object",
                            "description": "Custom startupProbe that overrides the default one",
                            "default": {}
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the Harbor Notary Signer containers",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the Harbor Notary Signer containers",
                                    "default": {}
                                }
                            }
                        },
                        "podSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enabled Harbor Notary Signer pods' Security Context",
                                    "default": true
                                },
                                "fsGroup": {
                                    "type": "number",
                                    "description": "Set Harbor Notary Signer pod's Security Context fsGroup",
                                    "default": 1001
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enabled Harbor Notary Signer containers' Security Context",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "Set Harbor Notary Signer containers' Security Context runAsUser",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set Harbor Notary Signer containers' Security Context runAsNonRoot",
                                    "default": true
                                }
                            }
                        },
                        "updateStrategy": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer deployment strategy type - only really applicable for deployments with RWO PVs attached",
                                    "default": "RollingUpdate"
                                }
                            }
                        },
                        "lifecycleHooks": {
                            "type": "object",
                            "description": "LifecycleHook for the Harbor Notary Signer container(s) to automate configuration before or after startup",
                            "default": {}
                        },
                        "hostAliases": {
                            "type": "array",
                            "description": "Harbor Notary Signer pods host aliases",
                            "default": [],
                            "items": {}
                        },
                        "podLabels": {
                            "type": "object",
                            "description": "Add additional labels to the Harbor Notary Signer pods (evaluated as a template)",
                            "default": {}
                        },
                        "podAnnotations": {
                            "type": "object",
                            "description": "Annotations to add to the Harbor Notary Signer pods (evaluated as a template)",
                            "default": {}
                        },
                        "podAffinityPreset": {
                            "type": "string",
                            "description": "Harbor Notary Signer Pod affinity preset. Ignored if `notary.signer.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "podAntiAffinityPreset": {
                            "type": "string",
                            "description": "Harbor Notary Signer Pod anti-affinity preset. Ignored if `notary.signer.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": "soft"
                        },
                        "nodeAffinityPreset": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer Node affinity preset type. Ignored if `notary.signer.affinity` is set. Allowed values: `soft` or `hard`",
                                    "default": ""
                                },
                                "key": {
                                    "type": "string",
                                    "description": "Harbor Notary Signer Node label key to match Ignored if `notary.signer.affinity` is set.",
                                    "default": ""
                                },
                                "values": {
                                    "type": "array",
                                    "description": "Harbor Notary Signer Node label values to match. Ignored if `notary.signer.affinity` is set.",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "affinity": {
                            "type": "object",
                            "description": "Harbor Notary Signer Affinity for pod assignment",
                            "default": {}
                        },
                        "nodeSelector": {
                            "type": "object",
                            "description": "Harbor Notary Signer Node labels for pod assignment",
                            "default": {}
                        },
                        "tolerations": {
                            "type": "array",
                            "description": "Harbor Notary Signer Tolerations for pod assignment",
                            "default": [],
                            "items": {}
                        },
                        "topologySpreadConstraints": {
                            "type": "array",
                            "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                            "default": [],
                            "items": {}
                        },
                        "priorityClassName": {
                            "type": "string",
                            "description": "Priority Class Name",
                            "default": ""
                        },
                        "schedulerName": {
                            "type": "string",
                            "description": "Use an alternate scheduler, e.g. \"stork\".",
                            "default": ""
                        },
                        "sidecars": {
                            "type": "array",
                            "description": "Add additional sidecar containers to the Harbor Notary Signer pods",
                            "default": [],
                            "items": {}
                        },
                        "initContainers": {
                            "type": "array",
                            "description": "Add additional init containers to the Harbor Notary Signer pods",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumeMounts for the Harbor Notary Signer pods",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumes": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumes for the Harbor Notary Signer pods",
                            "default": [],
                            "items": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token",
                            "default": false
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "server": {
                                    "type": "number",
                                    "description": "Harbor Notary server service port",
                                    "default": 4443
                                },
                                "signer": {
                                    "type": "number",
                                    "description": "Harbor Notary signer service port",
                                    "default": 7899
                                }
                            }
                        }
                    }
                }
            }
        },
        "trivy": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Harbor Adapter Trivy image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Harbor Adapter Trivy image repository",
                            "default": "bitnami/harbor-adapter-trivy"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Harbor Adapter Trivy image tag (immutable tags are recommended)",
                            "default": "2.8.3-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Harbor Adapter Trivy image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Harbor Adapter Trivy image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Harbor Adapter Trivy image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Enable Harbor Adapter Trivy image debug mode",
                            "default": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Trivy",
                    "default": true
                },
                "debugMode": {
                    "type": "boolean",
                    "description": "The flag to enable Trivy debug mode",
                    "default": false
                },
                "vulnType": {
                    "type": "string",
                    "description": "Comma-separated list of vulnerability types. Possible values `os` and `library`.",
                    "default": "os,library"
                },
                "severity": {
                    "type": "string",
                    "description": "Comma-separated list of severities to be checked",
                    "default": "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"
                },
                "ignoreUnfixed": {
                    "type": "boolean",
                    "description": "The flag to display only fixed vulnerabilities",
                    "default": false
                },
                "insecure": {
                    "type": "boolean",
                    "description": "The flag to skip verifying registry certificate",
                    "default": false
                },
                "gitHubToken": {
                    "type": "string",
                    "description": "The GitHub access token to download Trivy DB",
                    "default": ""
                },
                "skipUpdate": {
                    "type": "boolean",
                    "description": "The flag to disable Trivy DB downloads from GitHub",
                    "default": false
                },
                "cacheDir": {
                    "type": "string",
                    "description": "Directory to store the cache",
                    "default": "/bitnami/harbor-adapter-trivy/.cache"
                },
                "tls": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of an existing secret with the certificates for internal TLS access",
                            "default": ""
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add Trivy pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables for Trivy pods",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables (in case of sensitive data) for Trivy pods",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Trivy HTTP container port",
                            "default": 8080
                        },
                        "https": {
                            "type": "number",
                            "description": "Trivy HTTPS container port",
                            "default": 8443
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Trivy replicas",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Trivy containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Trivy containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Trivy containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "requests": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "string",
                                    "description": "",
                                    "default": "200m"
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "",
                                    "default": "512Mi"
                                }
                            }
                        },
                        "limits": {
                            "type": "object",
                            "properties": {
                                "cpu": {
                                    "type": "number",
                                    "description": "",
                                    "default": 1
                                },
                                "memory": {
                                    "type": "string",
                                    "description": "",
                                    "default": "1Gi"
                                }
                            }
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Trivy pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Trivy pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Trivy containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Trivy containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Trivy containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Trivy deployment strategy type - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook for the Trivy container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Trivy pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add additional labels to the Trivy pods (evaluated as a template)",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations to add to the Trivy pods (evaluated as a template)",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Trivy Pod affinity preset. Ignored if `trivy.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Trivy Pod anti-affinity preset. Ignored if `trivy.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Trivy Node affinity preset type. Ignored if `trivy.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Trivy Node label key to match Ignored if `trivy.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Trivy Node label values to match. Ignored if `trivy.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Trivy Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Trivy Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Trivy Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Trivy pods",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Trivy pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Trivy pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Trivy pods",
                    "default": [],
                    "items": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Trivy HTTP service port",
                                    "default": 8080
                                },
                                "https": {
                                    "type": "number",
                                    "description": "Trivy HTTPS service port",
                                    "default": 8443
                                }
                            }
                        }
                    }
                }
            }
        },
        "exporter": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Harbor Exporter image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Harbor Exporter image repository",
                            "default": "bitnami/harbor-exporter"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Harbor Exporter image tag",
                            "default": "2.8.3-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Harbor Exporter image image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Harbor exporter image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Specify if debug logs should be enabled",
                            "default": false
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array containing extra env vars",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra env vars",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra env vars (in case of sensitive data)",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "metrics": {
                            "type": "number",
                            "description": "Harbor Exporter HTTP container port",
                            "default": 8001
                        }
                    }
                },
                "replicaCount": {
                    "type": "number",
                    "description": "The replica count",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 20
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Harbor Exporter containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Harbor Exporter containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Harbor Exporter containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Exporter pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Exporter pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Exporter containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Exporter containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Exporter containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "The update strategy for deployments with persistent volumes: RollingUpdate or Recreate. Set it as Recreate when RWM for volumes isn't supported",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook to set additional configuration at startup, e.g. LDAP settings via REST API. Evaluated as a template",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Exporter pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add additional labels to the pod (evaluated as a template)",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations to add to the exporter pod",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Exporter Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Harbor Exporter Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Harbor Exporter Node affinity preset type. Ignored if `exporter.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Harbor Exporter Node label key to match Ignored if `exporter.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Harbor Exporter Node label values to match. Ignored if `exporter.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Harbor Exporter Affinity for pod assignment",
                    "default": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Exporter pods Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "Name of the serviceAccountName for Harbor Exporter pods",
                    "default": ""
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Harbor Exporter Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Harbor Exporter Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the pod (evaluated as a template)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "",
                    "default": [],
                    "items": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Attach additional containers to the pod (evaluated as a template)",
                    "default": [],
                    "items": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "Exporter HTTP service port",
                                    "default": 8001
                                }
                            }
                        }
                    }
                }
            }
        },
        "postgresql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Switch to enable or disable the PostgreSQL helm chart",
                    "default": true
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "enablePostgresUser": {
                            "type": "boolean",
                            "description": "Assign a password to the \"postgres\" admin user. Otherwise, remote access will be blocked for this user",
                            "default": true
                        },
                        "postgresPassword": {
                            "type": "string",
                            "description": "Password for the \"postgres\" admin user",
                            "default": "not-secure-database-password"
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of existing secret to use for PostgreSQL credentials",
                            "default": ""
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "PostgreSQL architecture (`standalone` or `replication`)",
                    "default": "standalone"
                },
                "primary": {
                    "type": "object",
                    "properties": {
                        "initdb": {
                            "type": "object",
                            "properties": {
                                "scripts": {
                                    "type": "object",
                                    "properties": {
                                        "initial-notaryserver": {
                                            "type": "object",
                                            "properties": {
                                                "sql": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "CREATE DATABASE notaryserver;\nCREATE USER server;\nalter user server with encrypted password 'password';\nGRANT ALL PRIVILEGES ON DATABASE notaryserver TO server;\n"
                                                }
                                            }
                                        },
                                        "initial-notarysigner": {
                                            "type": "object",
                                            "properties": {
                                                "sql": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "CREATE DATABASE notarysigner;\nCREATE USER signer;\nalter user signer with encrypted password 'password';\nGRANT ALL PRIVILEGES ON DATABASE notarysigner TO signer;\n"
                                                }
                                            }
                                        },
                                        "initial-registry": {
                                            "type": "object",
                                            "properties": {
                                                "sql": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "CREATE DATABASE registry ENCODING 'UTF8';\n\\c registry;\nCREATE TABLE schema_migrations(version bigint not null primary key, dirty boolean not null);\n"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "extendedConfiguration": {
                            "type": "string",
                            "description": "Extended PostgreSQL Primary configuration (appended to main or default configuration)",
                            "default": "max_connections = 1024\n"
                        }
                    }
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "PostgreSQL image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "PostgreSQL image repository",
                            "default": "bitnami/postgresql"
                        },
                        "tag": {
                            "type": "string",
                            "description": "PostgreSQL image tag (immutable tags are recommended)",
                            "default": "13.11.0-debian-11-r80"
                        },
                        "digest": {
                            "type": "string",
                            "description": "PostgreSQL image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        }
                    }
                }
            }
        },
        "externalDatabase": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Database host",
                    "default": "localhost"
                },
                "port": {
                    "type": "number",
                    "description": "Database port number",
                    "default": 5432
                },
                "user": {
                    "type": "string",
                    "description": "Non-root username for Harbor",
                    "default": "bn_harbor"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the non-root username for Harbor",
                    "default": ""
                },
                "sslmode": {
                    "type": "string",
                    "description": "External database ssl mode",
                    "default": "disable"
                },
                "coreDatabase": {
                    "type": "string",
                    "description": "External database name for core",
                    "default": ""
                },
                "notaryServerDatabase": {
                    "type": "string",
                    "description": "External database name for notary server",
                    "default": ""
                },
                "notaryServerUsername": {
                    "type": "string",
                    "description": "External database username for notary server",
                    "default": ""
                },
                "notaryServerPassword": {
                    "type": "string",
                    "description": "External database password for notary server",
                    "default": ""
                },
                "notarySignerDatabase": {
                    "type": "string",
                    "description": "External database name for notary signer",
                    "default": ""
                },
                "notarySignerUsername": {
                    "type": "string",
                    "description": "External database username for notary signer",
                    "default": ""
                },
                "notarySignerPassword": {
                    "type": "string",
                    "description": "External database password for notary signer",
                    "default": ""
                }
            }
        },
        "redis": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Switch to enable or disable the Redis&reg; helm",
                    "default": true
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable password authentication",
                            "default": false
                        },
                        "password": {
                            "type": "string",
                            "description": "Redis&reg; password",
                            "default": ""
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "The name of an existing secret with Redis&reg; credentials",
                            "default": ""
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "Redis&reg; architecture. Allowed values: `standalone` or `replication`",
                    "default": "standalone"
                },
                "sentinel": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Use Redis&reg; Sentinel on Redis&reg; pods.",
                            "default": false
                        },
                        "masterSet": {
                            "type": "string",
                            "description": "Master set name",
                            "default": "mymaster"
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "sentinel": {
                                            "type": "number",
                                            "description": "Redis&reg; service port for Redis&reg; Sentinel",
                                            "default": 26379
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "externalRedis": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Redis&reg; host",
                    "default": "localhost"
                },
                "port": {
                    "type": "number",
                    "description": "Redis&reg; port number",
                    "default": 6379
                },
                "password": {
                    "type": "string",
                    "description": "Redis&reg; password",
                    "default": ""
                },
                "coreDatabaseIndex": {
                    "type": "string",
                    "description": "Index for core database",
                    "default": "0"
                },
                "jobserviceDatabaseIndex": {
                    "type": "string",
                    "description": "Index for jobservice database",
                    "default": "1"
                },
                "registryDatabaseIndex": {
                    "type": "string",
                    "description": "Index for registry database",
                    "default": "2"
                },
                "trivyAdapterDatabaseIndex": {
                    "type": "string",
                    "description": "Index for trivy adapter database",
                    "default": "5"
                },
                "sentinel": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "If external redis with sentinal is used, set it to `true`",
                            "default": false
                        },
                        "masterSet": {
                            "type": "string",
                            "description": "Name of sentinel masterSet if sentinel is used",
                            "default": "mymaster"
                        },
                        "hosts": {
                            "type": "string",
                            "description": "Sentinel hosts and ports in the format",
                            "default": ""
                        }
                    }
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether or not to enable metrics for different",
                    "default": false
                },
                "path": {
                    "type": "string",
                    "description": "Path where metrics are exposed",
                    "default": "/metrics"
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                }
            }
        }
    }
}