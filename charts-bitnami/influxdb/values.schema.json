{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global storage class for dynamic provisioning",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override influxdb.fullname template with a string (will prepend the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override influxdb.fullname template with a string",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Default Kubernetes cluster domain",
            "default": "cluster.local"
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "InfluxDB&trade; image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "InfluxDB&trade; image repository",
                    "default": "bitnami/influxdb"
                },
                "tag": {
                    "type": "string",
                    "description": "InfluxDB&trade; image tag (immutable tags are recommended)",
                    "default": "2.7.1-debian-11-r125"
                },
                "digest": {
                    "type": "string",
                    "description": "InfluxDB&trade; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "InfluxDB&trade; image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Specify if debug logs should be enabled",
                    "default": false
                }
            }
        },
        "auth": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable authentication (Variable to keep compatibility with InfluxDB&trade; v1, in v2 it will be ignored)",
                    "default": true
                },
                "usePasswordFiles": {
                    "type": "boolean",
                    "description": "Whether to use files to provide secrets instead of env vars.",
                    "default": false
                },
                "admin": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "InfluxDB&trade; admin user name",
                            "default": "admin"
                        },
                        "password": {
                            "type": "string",
                            "description": "InfluxDB&trade; admin user's password",
                            "default": ""
                        },
                        "token": {
                            "type": "string",
                            "description": "InfluxDB&trade; admin user's token. Only valid with InfluxDB&trade; v2",
                            "default": ""
                        },
                        "org": {
                            "type": "string",
                            "description": "InfluxDB&trade; admin user's org. Only valid with InfluxDB&trade; v2",
                            "default": "primary"
                        },
                        "bucket": {
                            "type": "string",
                            "description": "InfluxDB&trade; admin user's bucket. Only valid with InfluxDB&trade; v2",
                            "default": "primary"
                        },
                        "retention": {
                            "type": "string",
                            "description": "InfluxDB&trade; admin user's bucket retention. Only valid with InfluxDB&trade; v2",
                            "default": ""
                        }
                    }
                },
                "createUserToken": {
                    "type": "boolean",
                    "description": "Whether to create tokens for the different users. Take into account these tokens are going to be created by CLI randomly and they will not be accessible from a secret. See more influxdb 2.0 [auth ref](https://docs.influxdata.com/influxdb/v2.0/security/tokens/)",
                    "default": false
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "Name for InfluxDB&trade; user with 'admin' privileges on the bucket specified at `auth.user.bucket` and `auth.user.org` or `auth.admin.org`",
                            "default": ""
                        },
                        "password": {
                            "type": "string",
                            "description": "InfluxDB&trade; password for `user.name` user",
                            "default": ""
                        },
                        "org": {
                            "type": "string",
                            "description": "Org to be created on first run",
                            "default": ""
                        },
                        "bucket": {
                            "type": "string",
                            "description": "Bucket to be created on first run",
                            "default": ""
                        }
                    }
                },
                "readUser": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "Name for InfluxDB&trade; user with 'read' privileges on the bucket specified at `auth.user.bucket`",
                            "default": ""
                        },
                        "password": {
                            "type": "string",
                            "description": "InfluxDB&trade; password for `auth.readUser.username` user",
                            "default": ""
                        }
                    }
                },
                "writeUser": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "Name for InfluxDB&trade; user with 'read' privileges on the bucket specified at `auth.user.bucket`",
                            "default": ""
                        },
                        "password": {
                            "type": "string",
                            "description": "InfluxDB&trade; password for `auth.writeUser.username` user",
                            "default": ""
                        }
                    }
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of existing Secret object with InfluxDB&trade; credentials (`auth.admin.password`, `auth.user.password`, `auth.readUser.password`, and `auth.writeUser.password` will be ignored and picked up from this secret)",
                    "default": ""
                }
            }
        },
        "influxdb": {
            "type": "object",
            "properties": {
                "configuration": {
                    "type": "string",
                    "description": "Specify content for influxdb.conf",
                    "default": ""
                },
                "existingConfiguration": {
                    "type": "string",
                    "description": "Name of existing ConfigMap object with the InfluxDB&trade; configuration (`influxdb.configuration` will be ignored).",
                    "default": ""
                },
                "initdbScripts": {
                    "type": "object",
                    "description": "Dictionary of initdb scripts",
                    "default": {}
                },
                "initdbScriptsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap object with the initdb scripts (`influxdb.initdbScripts` will be ignored).",
                    "default": ""
                },
                "initdbScriptsSecret": {
                    "type": "string",
                    "description": "Secret with initdb scripts that contain sensitive information (Note: can be used with `initdbScriptsConfigMap` or `initdbScripts`)",
                    "default": ""
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "InfluxDB&trade; Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "InfluxDB&trade; Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "InfluxDB&trade; Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "InfluxDB&trade; Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "InfluxDB&trade; Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "InfluxDB&trade; Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "InfluxDB&trade; Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "InfluxDB&trade; Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for InfluxDB&trade; pods",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for InfluxDB&trade; pods",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "InfluxDB&trade; pods host aliases",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "InfluxDB&trade; statefulset/deployment strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "InfluxDB&trade; pods' priorityClassName",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podManagementPolicy": {
                    "type": "string",
                    "description": "podManagementPolicy to manage scaling operation of InfluxDB&trade; pods",
                    "default": "OrderedReady"
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled InfluxDB&trade; pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set InfluxDB&trade; pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled InfluxDB&trade; containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set InfluxDB&trade; containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsGroup": {
                            "type": "number",
                            "description": "Set InfluxDB&trade; containers' Security Context runAsGroup",
                            "default": 0
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Controller container's Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Controller container's Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Controller container's Security Context seccompProfile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Controller container's Security Context capabilities to drop",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the InfluxDB&trade; container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array containing extra env vars to configure InfluxDB&trade;",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for InfluxDB&trade; nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for InfluxDB&trade; nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Array of extra volumes to be added to the deployment (evaluated as template). Requires setting extraVolumeMounts",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Array of extra volume mounts to be added to the container (evaluated as template). Normally used with extraVolumes.",
                    "default": [],
                    "items": {}
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "InfluxDB&trade; container HTTP port",
                            "default": 8086
                        },
                        "rpc": {
                            "type": "number",
                            "description": "InfluxDB&trade; container RPC port",
                            "default": 8088
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 180
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 45
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 30
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 180
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 45
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 30
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 45
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 30
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe",
                    "default": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the InfluxDB&trade; pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the InfluxDB&trade; pod(s)",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type (`ClusterIP`, `NodePort` or `LoadBalancer`)",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "InfluxDB&trade; HTTP port",
                                    "default": 8086
                                },
                                "rpc": {
                                    "type": "number",
                                    "description": "InfluxDB&trade; RPC port",
                                    "default": 8088
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "",
                                    "default": ""
                                },
                                "rpc": {
                                    "type": "string",
                                    "description": "",
                                    "default": ""
                                }
                            }
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "loadBalancerIP if service type is `LoadBalancer`",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address that are allowed when service is LoadBalancer",
                            "default": [],
                            "items": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Static clusterIP or None for headless services",
                            "default": ""
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "InfluxDB&trade; service external traffic policy",
                            "default": "Cluster"
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for InfluxDB&trade; service",
                            "default": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                }
            }
        },
        "collectd": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "InfluxDB Collectd&trade; service enable",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type (`ClusterIP`, `NodePort` or `LoadBalancer`)",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "InfluxDB Collectd&trade; UDP port (should match with corresponding port in influxdb.conf)",
                            "default": 25826
                        },
                        "nodePort": {
                            "type": "string",
                            "description": "Kubernetes HTTP node port",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "loadBalancerIP if service type is `LoadBalancer`",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address that are allowed when service is LoadBalancer",
                            "default": [],
                            "items": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Static clusterIP or None for headless services",
                            "default": ""
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "InfluxDB Collectd&trade; service external traffic policy",
                            "default": "Cluster"
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for InfluxDB Collectd&trade; service",
                            "default": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress controller resource",
                    "default": false
                },
                "tls": {
                    "type": "boolean",
                    "description": "Create TLS Secret",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress resource (evaluated as template)",
                    "default": "influxdb.local"
                },
                "path": {
                    "type": "string",
                    "description": "Ingress path*' in order to use this",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "extraHosts": {
                    "type": "array",
                    "description": "The list of additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "Additional arbitrary path/backend objects",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the export of Prometheus metrics",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type (`ClusterIP`, `NodePort` or `LoadBalancer`)",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "InfluxDB&trade; Prometheus port",
                            "default": 9122
                        },
                        "nodePort": {
                            "type": "string",
                            "description": "Kubernetes HTTP node port",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "loadBalancerIP if service type is `LoadBalancer`",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address that are allowed when service is LoadBalancer",
                            "default": [],
                            "items": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Static clusterIP or None for headless services",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ .Values.metrics.service.port }}"
                                        },
                                        "io/path": {
                                            "type": "string",
                                            "description": "",
                                            "default": "/metrics"
                                        }
                                    }
                                }
                            }
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Service external traffic policy",
                            "default": "Cluster"
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        }
                    }
                }
            }
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable NetworkPolicy",
                    "default": false
                },
                "allowExternal": {
                    "type": "boolean",
                    "description": "Don't require client label for connections",
                    "default": true
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable data persistence",
                    "default": true
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Use a existing PVC which must be created manually before bound",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "Specify the `storageClass` used to provision the volume",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "Access mode of data volume",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Size of data volume",
                    "default": "8Gi"
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                    "default": {}
                }
            }
        },
        "psp": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                    "default": false
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Create Role and RoleBinding (required for PSP to work)",
                    "default": false
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner and group of the persistent volume mountpoint to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image name",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "securityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the init container (when facing issues in OpenShift or uid unknown, try value \"auto\")",
                            "default": 0
                        }
                    }
                }
            }
        },
        "backup": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable InfluxDB&trade; backup",
                    "default": false
                },
                "directory": {
                    "type": "string",
                    "description": "Directory where backups are stored",
                    "default": "/backups"
                },
                "retentionDays": {
                    "type": "number",
                    "description": "Retention time in days for backups (older backups are deleted)",
                    "default": 10
                },
                "cronjob": {
                    "type": "object",
                    "properties": {
                        "schedule": {
                            "type": "string",
                            "description": "Schedule in Cron format to save snapshots",
                            "default": "0 2 * * *"
                        },
                        "historyLimit": {
                            "type": "number",
                            "description": "Number of successful finished jobs to retain",
                            "default": 1
                        },
                        "podAnnotations": {
                            "type": "object",
                            "description": "Pod annotations",
                            "default": {}
                        },
                        "securityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable security context for InfluxDB&trade; backup pods",
                                    "default": true
                                },
                                "fsGroup": {
                                    "type": "number",
                                    "description": "Group ID for the InfluxDB&trade; filesystem",
                                    "default": 1001
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "User ID for the InfluxDB&trade; filesystem",
                                    "default": 1001
                                },
                                "runAsGroup": {
                                    "type": "number",
                                    "description": "Group ID for the InfluxDB&trade; runAsGroup",
                                    "default": 0
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Setting for the InfluxDB&trade; runAsNonRoot",
                                    "default": true
                                },
                                "seccompProfile": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "description": "Setting for the InfluxDB&trade; seccompProfile.type",
                                            "default": "RuntimeDefault"
                                        }
                                    }
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable security context for InfluxDB&trade; backup containers",
                                    "default": true
                                },
                                "readOnlyRootFilesystem": {
                                    "type": "boolean",
                                    "description": "readOnlyRootFilesystem for InfluxDB&trade;",
                                    "default": true
                                },
                                "allowPrivilegeEscalation": {
                                    "type": "boolean",
                                    "description": "allowPrivilegeEscalation for InfluxDB&trade;",
                                    "default": false
                                },
                                "capabilities": {
                                    "type": "object",
                                    "properties": {
                                        "drop": {
                                            "type": "array",
                                            "description": "Capabilities to drop for InfluxDB&trade;",
                                            "default": [
                                                "ALL"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Backup &trade; Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Backup&trade; Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Backup&trade; Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Backup&trade; Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Backup&trade; Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Backup&trade; Affinity for backup pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Backup&trade; Node labels for backup pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Backup&trade; Tolerations for backup pod assignment",
                    "default": [],
                    "items": {}
                },
                "uploadProviders": {
                    "type": "object",
                    "properties": {
                        "google": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "enable upload to google storage bucket",
                                    "default": false
                                },
                                "secret": {
                                    "type": "string",
                                    "description": "json secret with serviceaccount data to access Google storage bucket",
                                    "default": ""
                                },
                                "secretKey": {
                                    "type": "string",
                                    "description": "service account secret key name",
                                    "default": "key.json"
                                },
                                "existingSecret": {
                                    "type": "string",
                                    "description": "Name of existing secret object with Google serviceaccount json credentials",
                                    "default": ""
                                },
                                "bucketName": {
                                    "type": "string",
                                    "description": "google storage bucket name name",
                                    "default": "gs://bucket/influxdb"
                                },
                                "image": {
                                    "type": "object",
                                    "properties": {
                                        "registry": {
                                            "type": "string",
                                            "description": "Google Cloud SDK image registry",
                                            "default": "docker.io"
                                        },
                                        "repository": {
                                            "type": "string",
                                            "description": "Google Cloud SDK image name",
                                            "default": "bitnami/google-cloud-sdk"
                                        },
                                        "tag": {
                                            "type": "string",
                                            "description": "Google Cloud SDK image tag",
                                            "default": "0.444.0-debian-11-r11"
                                        },
                                        "digest": {
                                            "type": "string",
                                            "description": "Google Cloud SDK image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                            "default": ""
                                        },
                                        "pullPolicy": {
                                            "type": "string",
                                            "description": "Google Cloud SDK image pull policy",
                                            "default": "IfNotPresent"
                                        },
                                        "pullSecrets": {
                                            "type": "array",
                                            "description": "Specify docker-registry secret names as an array",
                                            "default": [],
                                            "items": {}
                                        }
                                    }
                                }
                            }
                        },
                        "azure": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable upload to azure storage container",
                                    "default": false
                                },
                                "secret": {
                                    "type": "string",
                                    "description": "Secret with credentials to access Azure storage",
                                    "default": ""
                                },
                                "secretKey": {
                                    "type": "string",
                                    "description": "Service account secret key name",
                                    "default": "connection-string"
                                },
                                "existingSecret": {
                                    "type": "string",
                                    "description": "Name of existing secret object",
                                    "default": ""
                                },
                                "containerName": {
                                    "type": "string",
                                    "description": "Destination container",
                                    "default": "influxdb-container"
                                },
                                "image": {
                                    "type": "object",
                                    "properties": {
                                        "registry": {
                                            "type": "string",
                                            "description": "Azure CLI image registry",
                                            "default": "docker.io"
                                        },
                                        "repository": {
                                            "type": "string",
                                            "description": "Azure CLI image repository",
                                            "default": "bitnami/azure-cli"
                                        },
                                        "tag": {
                                            "type": "string",
                                            "description": "Azure CLI image tag (immutable tags are recommended)",
                                            "default": "2.52.0-debian-11-r0"
                                        },
                                        "digest": {
                                            "type": "string",
                                            "description": "Azure CLI image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                            "default": ""
                                        },
                                        "pullPolicy": {
                                            "type": "string",
                                            "description": "Azure CLI image pull policy",
                                            "default": "IfNotPresent"
                                        },
                                        "pullSecrets": {
                                            "type": "array",
                                            "description": "Specify docker-registry secret names as an array",
                                            "default": [],
                                            "items": {}
                                        }
                                    }
                                }
                            }
                        },
                        "aws": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable upload to aws s3 bucket",
                                    "default": false
                                },
                                "accessKeyID": {
                                    "type": "string",
                                    "description": "Access Key ID to access aws s3",
                                    "default": ""
                                },
                                "secretAccessKey": {
                                    "type": "string",
                                    "description": "Secret Access Key to access aws s3",
                                    "default": ""
                                },
                                "region": {
                                    "type": "string",
                                    "description": "Region of aws s3 bucket",
                                    "default": "us-east-1"
                                },
                                "existingSecret": {
                                    "type": "string",
                                    "description": "Name of existing secret object",
                                    "default": ""
                                },
                                "bucketName": {
                                    "type": "string",
                                    "description": "aws s3 bucket name",
                                    "default": "s3://bucket/influxdb"
                                },
                                "image": {
                                    "type": "object",
                                    "properties": {
                                        "registry": {
                                            "type": "string",
                                            "description": "AWS CLI image registry",
                                            "default": "docker.io"
                                        },
                                        "repository": {
                                            "type": "string",
                                            "description": "AWS CLI image repository",
                                            "default": "bitnami/aws-cli"
                                        },
                                        "tag": {
                                            "type": "string",
                                            "description": "AWS CLI image tag (immutable tags are recommended)",
                                            "default": "2.13.13-debian-11-r8"
                                        },
                                        "digest": {
                                            "type": "string",
                                            "description": "AWS CLI image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                            "default": ""
                                        },
                                        "pullPolicy": {
                                            "type": "string",
                                            "description": "AWS CLI image pull policy",
                                            "default": "IfNotPresent"
                                        },
                                        "pullSecrets": {
                                            "type": "array",
                                            "description": "Specify docker-registry secret names as an array",
                                            "default": [],
                                            "items": {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}