{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the the deployment(s)/daemonset(s)",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the the deployment(s)/daemonset(s)",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "hub": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Hub image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Hub image repository",
                            "default": "bitnami/jupyterhub"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Hub image tag (immutable tags are recommended)",
                            "default": "4.0.2-debian-11-r17"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Hub image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Hub image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Hub image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "baseUrl": {
                    "type": "string",
                    "description": "Hub base URL",
                    "default": "/"
                },
                "adminUser": {
                    "type": "string",
                    "description": "Hub Dummy authenticator admin user",
                    "default": "user"
                },
                "password": {
                    "type": "string",
                    "description": "Hub Dummy authenticator password",
                    "default": ""
                },
                "configuration": {
                    "type": "string",
                    "description": "Hub configuration file (to be used by jupyterhub_config.py)",
                    "default": "Chart:\n  Name: {{ .Chart.Name }}\n  Version: {{ .Chart.Version }}\nRelease:\n  Name: {{ .Release.Name }}\n  Namespace: {{ .Release.Namespace }}\n  Service: {{ .Release.Service }}\nhub:\n  config:\n    JupyterHub:\n      admin_access: true\n      authenticator_class: dummy\n      DummyAuthenticator:\n      {{- if .Values.hub.password }}\n        password: {{ .Values.hub.password | quote }}\n      {{- else }}\n        password: {{ randAlphaNum 10 | quote }}\n      {{- end }}\n      Authenticator:\n        admin_users:\n          - {{ .Values.hub.adminUser }}\n  cookieSecret:\n  concurrentSpawnLimit: 64\n  consecutiveFailureLimit: 5\n  activeServerLimit:\n  db:\n    type: postgres\n    url: postgresql://{{ ternary .Values.postgresql.auth.username .Values.externalDatabase.user .Values.postgresql.enabled }}@{{ ternary (include \"jupyterhub.postgresql.fullname\" .) .Values.externalDatabase.host .Values.postgresql.enabled }}:{{ ternary \"5432\" .Values.externalDatabase.port .Values.postgresql.enabled }}/{{ ternary .Values.postgresql.auth.database .Values.externalDatabase.database .Values.postgresql.enabled }}\n  services: {}\n  allowNamedServers: false\n  namedServerLimitPerUser:\n  {{- if .Values.hub.metrics.serviceMonitor.enabled }}\n  authenticatePrometheus: {{ .Values.hub.metrics.authenticatePrometheus }}\n  {{- end }}\n  redirectToServer:\n  shutdownOnLogout:\nsingleuser:\n  podNameTemplate: {{ include \"common.names.fullname\" . }}-jupyter-{username}\n  {{- if .Values.singleuser.tolerations }}\n  extraTolerations: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.tolerations \"context\" $) | nindent 4 }}\n  {{- end }}\n  {{- if .Values.singleuser.nodeSelector }}\n  nodeSelector: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.nodeSelector \"context\" $) | nindent 4 }}\n  {{- end }}\n  networkTools:\n    image:\n      name: {{ include \"jupyterhub.hubconfiguration.imageEntry\" ( dict \"imageRoot\" .Values.auxiliaryImage \"global\" $) }}\n      tag: {{ .Values.auxiliaryImage.tag }}\n      digest: {{ .Values.auxiliaryImage.digest }}\n      pullPolicy: {{ .Values.auxiliaryImage.pullPolicy }}\n      pullSecrets: {{- include \"jupyterhub.imagePullSecrets.list\" . | nindent 8 }}\n  cloudMetadata:\n    blockWithIptables: false\n  events: true\n  extraAnnotations:\n    {{- if .Values.commonAnnotations }}\n    {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.commonAnnotations \"context\" $ ) | nindent 4 }}\n    {{- end }}\n    {{- if .Values.singleuser.podAnnotations }}\n    {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.podAnnotations \"context\" $ ) | nindent 4 }}\n    {{- end }}\n  extraLabels:\n    hub.jupyter.org/network-access-hub: \"true\"\n    app.kubernetes.io/component: singleuser\n    {{- include \"common.labels.standard\" ( dict \"customLabels\" .Values.commonLabels \"context\" $ ) | nindent 4 }}\n    {{- if .Values.singleuser.podLabels }}\n    {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.podLabels \"context\" $ ) | nindent 4 }}\n    {{- end }}\n  {{- if .Values.singleuser.extraEnvVars }}\n  extraEnv: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.extraEnvVars \"context\" $ ) | nindent 4 }}\n  {{- end }}\n  {{- if .Values.singleuser.lifecycleHooks }}\n  lifecycleHooks: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.lifecycleHooks \"context\" $ ) | nindent 4 }}\n  {{- end }}\n  {{- if .Values.singleuser.initContainers }}\n  initContainers: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.initContainers \"context\" $ ) | nindent 4 }}\n  {{- end }}\n  {{- if .Values.singleuser.sidecars }}\n  extraContainers: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.sidecars \"context\" $ ) | nindent 4 }}\n  {{- end }}\n  {{- if .Values.singleuser.containerSecurityContext.enabled }}\n  uid: {{ .Values.singleuser.containerSecurityContext.runAsUser }}\n  {{- end }}\n  {{- if .Values.singleuser.podSecurityContext.enabled }}\n  fsGid: {{ .Values.singleuser.podSecurityContext.fsGroup }}\n  {{- end }}\n  serviceAccountName: {{ template \"jupyterhub.singleuserServiceAccountName\" . }}\n  storage:\n    {{- if .Values.singleuser.persistence.enabled }}\n    type: dynamic\n    {{- else }}\n    type: none\n    {{- end }}\n    extraLabels:\n      app.kubernetes.io/component: singleuser\n      {{- include \"common.labels.standard\" ( dict \"customLabels\" .Values.commonLabels \"context\" $ ) | nindent 6 }}\n    {{- if .Values.singleuser.extraVolumes }}\n    extraVolumes: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.extraVolumes \"context\" $ ) | nindent 4 }}\n    {{- end }}\n    {{- if .Values.singleuser.extraVolumeMounts }}\n    extraVolumeMounts: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.extraVolumeMounts \"context\" $ ) | nindent 4 }}\n    {{- end }}\n    capacity: {{ .Values.singleuser.persistence.size }}\n    homeMountPath: {{ .Values.singleuser.notebookDir }}\n    dynamic:\n      {{ include \"jupyterhub.storage.class\" (dict \"persistence\" .Values.singleuser.persistence \"global\" .Values.global) }}\n      pvcNameTemplate: {{ include \"common.names.fullname\" . }}-claim-{username}{servername}\n      volumeNameTemplate: {{ include \"common.names.fullname\" . }}-volume-{username}{servername}\n      storageAccessModes: {{- include \"common.tplvalues.render\" ( dict \"value\" .Values.singleuser.persistence.accessModes \"context\" $ ) | nindent 8 }}\n  image:\n    name: {{ include \"jupyterhub.hubconfiguration.imageEntry\" ( dict \"imageRoot\" .Values.singleuser.image \"global\" $) }}\n    tag: {{ .Values.singleuser.image.tag }}\n    digest: {{ .Values.singleuser.image.digest }}\n    pullPolicy: {{ .Values.singleuser.image.pullPolicy }}\n    pullSecrets: {{- include \"jupyterhub.imagePullSecrets.list\" . | nindent 8 }}\n  startTimeout: 300\n  {{- /* We need to replace the Kubernetes memory/cpu terminology (e.g. 10Gi, 10Mi) with one compatible with Python (10G, 10M) */}}\n  cpu:\n    limit: {{ regexReplaceAll \"([A-Za-z])i\" (default \"\" .Values.singleuser.resources.limits.cpu)  \"${1}\" }}\n    guarantee: {{ regexReplaceAll \"([A-Za-z])i\" (default \"\" .Values.singleuser.resources.requests.cpu) \"${1}\" }}\n  memory:\n    limit: {{ regexReplaceAll \"([A-Za-z])i\" (default \"\" .Values.singleuser.resources.limits.memory) \"${1}\" }}\n    guarantee: {{ regexReplaceAll \"([A-Za-z])i\" (default \"\" .Values.singleuser.resources.requests.memory) \"${1}\" }}\n  {{- if .Values.singleuser.command }}\n  cmd: {{- include \"common.tplvalues.render\" (dict \"value\" .Values.singleuser.command \"context\" $) | nindent 12 }}\n  {{- else }}\n  cmd: jupyterhub-singleuser\n  {{- end }}\n  defaultUrl:\ncull:\n  enabled: true\n  users: false\n  removeNamedServers: false\n  timeout: 3600\n  every: 600\n  concurrency: 10\n  maxAge: 0\n"
                },
                "existingConfigmap": {
                    "type": "string",
                    "description": "Configmap with Hub init scripts (replaces the scripts in templates/hub/configmap.yml)",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Secret with hub configuration (replaces the hub.configuration value) and proxy token",
                    "default": ""
                },
                "command": {
                    "type": "array",
                    "description": "Override Hub default command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override Hub default args",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Add extra environment variables to the Hub container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Hub container port",
                            "default": 8081
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Hub containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Hub containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Hub containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Hub containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Hub containers",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Hub containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Hub container's Security Context runAsUser",
                            "default": 1000
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Hub container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Hub pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Hub pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHooks for the Hub container to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add extra labels to the Hub pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Add extra annotations to the Hub pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `hub.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `hub.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `hub.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `hub.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `hub.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment.",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment.",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment.",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Hub pod needs to terminate gracefully",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Update strategy - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        },
                        "rollingUpdate": {
                            "type": "object",
                            "description": "Hub deployment rolling update configuration parameters",
                            "default": {}
                        }
                    }
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for Hub pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for Hub container(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Hub pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Hub pod",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Deploy Hub PodDisruptionBudget",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "string",
                            "description": "Set minimum available hub instances",
                            "default": ""
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Set maximum available hub instances",
                            "default": ""
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Override Hub service account name",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for the ServiceAccount",
                            "default": {}
                        }
                    }
                },
                "rbac": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether RBAC resources should be created",
                            "default": true
                        },
                        "rules": {
                            "type": "array",
                            "description": "Custom RBAC rules to set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "networkPolicy": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Deploy Hub network policies",
                            "default": true
                        },
                        "allowInterspaceAccess": {
                            "type": "boolean",
                            "description": "Allow communication between pods in different namespaces",
                            "default": true
                        },
                        "extraIngress": {
                            "type": "string",
                            "description": "Add extra ingress rules to the NetworkPolicy",
                            "default": ""
                        },
                        "extraEgress": {
                            "type": "string",
                            "description": "Add extra ingress rules to the NetworkPolicy",
                            "default": "## Hub --> Any IP:PORT\n##\n- to:\n"
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Hub service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Hub service HTTP port",
                                    "default": 8081
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "NodePort for the HTTP endpoint",
                                    "default": ""
                                }
                            }
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Control where client requests go, to the same pod or round-robin",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Hub service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Hub service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Hub service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Hub service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Hub service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra port to expose on Hub service",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "authenticatePrometheus": {
                            "type": "boolean",
                            "description": "Use authentication for Prometheus",
                            "default": false
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "If the operator is installed in your cluster, set to true to create a Service Monitor Entry",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "path": {
                                    "type": "string",
                                    "description": "HTTP path to scrape for metrics",
                                    "default": "/hub/metrics"
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Specify the timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus",
                                    "default": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "Specify honorLabels parameter to add the scrape endpoint",
                                    "default": false
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "proxy": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Proxy image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Proxy image repository",
                            "default": "bitnami/configurable-http-proxy"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Proxy image tag (immutable tags are recommended)",
                            "default": "4.5.6-debian-11-r16"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Proxy image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Proxy image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Proxy image pull secrets",
                            "default": [],
                            "items": {}
                        },
                        "debug": {
                            "type": "boolean",
                            "description": "Activate verbose output",
                            "default": false
                        }
                    }
                },
                "secretToken": {
                    "type": "string",
                    "description": "Proxy secret token (used for communication with the Hub)",
                    "default": ""
                },
                "command": {
                    "type": "array",
                    "description": "Override Proxy default command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override Proxy default args",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Add extra environment variables to the Proxy container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars",
                    "default": ""
                },
                "containerPort": {
                    "type": "object",
                    "properties": {
                        "api": {
                            "type": "number",
                            "description": "Proxy api container port",
                            "default": 8001
                        },
                        "metrics": {
                            "type": "number",
                            "description": "Proxy metrics container port",
                            "default": 8002
                        },
                        "http": {
                            "type": "number",
                            "description": "Proxy http container port",
                            "default": 8000
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Proxy containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Proxy containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Proxy containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 30
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Proxy containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Proxy containers",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Proxy containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Proxy container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Proxy container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Proxy pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Proxy pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Add lifecycle hooks to the Proxy deployment",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Add extra labels to the Proxy pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Add extra annotations to the Proxy pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `proxy.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `proxy.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `proxy.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `proxy.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `proxy.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment. Evaluated as a template.",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment. Evaluated as a template.",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment. Evaluated as a template.",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds Proxy pod needs to terminate gracefully",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Update strategy - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        },
                        "rollingUpdate": {
                            "type": "object",
                            "description": "Proxy deployment rolling update configuration parameters",
                            "default": {}
                        }
                    }
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for Proxy pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for Proxy container(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Proxy pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Proxy pod",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Deploy Proxy PodDisruptionBudget",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "string",
                            "description": "Set minimum available proxy instances",
                            "default": ""
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Set maximum available proxy instances",
                            "default": ""
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Override Hub service account name",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for the ServiceAccount",
                            "default": {}
                        }
                    }
                },
                "networkPolicy": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Deploy Proxy network policies",
                            "default": true
                        },
                        "allowInterspaceAccess": {
                            "type": "boolean",
                            "description": "Allow communication between pods in different namespaces",
                            "default": true
                        },
                        "extraIngress": {
                            "type": "string",
                            "description": "Add extra ingress rules to the NetworkPolicy",
                            "default": "## Any IP --> Proxy\n##\n- ports:\n    - port: {{ .Values.proxy.containerPort.http }}\n"
                        },
                        "extraEgress": {
                            "type": "string",
                            "description": "Add extra egress rules to the NetworkPolicy",
                            "default": ""
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "api": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "API service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "number",
                                            "description": "API service HTTP port",
                                            "default": 8001
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "string",
                                            "description": "NodePort for the HTTP endpoint",
                                            "default": ""
                                        }
                                    }
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Hub service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Hub service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Hub service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Hub service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Hub service",
                                    "default": {}
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra port to expose on Hub service",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "metrics": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Metrics service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "number",
                                            "description": "Metrics service port",
                                            "default": 8002
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "string",
                                            "description": "NodePort for the HTTP endpoint",
                                            "default": ""
                                        }
                                    }
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Hub service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Hub service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Hub service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Hub service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Hub service",
                                    "default": {}
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra port to expose on Hub service",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "public": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Public service type",
                                    "default": "LoadBalancer"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "number",
                                            "description": "Public service HTTP port",
                                            "default": 80
                                        }
                                    }
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "string",
                                            "description": "NodePort for the HTTP endpoint",
                                            "default": ""
                                        }
                                    }
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Hub service Cluster IP",
                                    "default": ""
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "Hub service Load Balancer IP",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Hub service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Hub service external traffic policy",
                                    "default": "Cluster"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional custom annotations for Hub service",
                                    "default": {}
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra port to expose on Hub service",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "ingress": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Set to true to enable ingress record generation",
                            "default": false
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Force Ingress API version (automatically detected if not set)",
                            "default": ""
                        },
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Ingress path type",
                            "default": "ImplementationSpecific"
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Set ingress rule hostname",
                            "default": "jupyterhub.local"
                        },
                        "path": {
                            "type": "string",
                            "description": "Path to the Proxy pod",
                            "default": "/"
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                            "default": false
                        },
                        "selfSigned": {
                            "type": "boolean",
                            "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "An array with additional hostname(s) to be covered with the ingress record",
                            "default": [],
                            "items": {}
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "Custom TLS certificates as secrets",
                            "default": [],
                            "items": {}
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "metrics": {
                    "type": "object",
                    "properties": {
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "If the operator is installed in your cluster, set to true to create a Service Monitor Entry",
                                    "default": false
                                },
                                "namespace": {
                                    "type": "string",
                                    "description": "Namespace which Prometheus is running in",
                                    "default": ""
                                },
                                "path": {
                                    "type": "string",
                                    "description": "HTTP path to scrape for metrics",
                                    "default": "/metrics"
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Interval at which metrics should be scraped",
                                    "default": "30s"
                                },
                                "scrapeTimeout": {
                                    "type": "string",
                                    "description": "Specify the timeout after which the scrape is ended",
                                    "default": ""
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus",
                                    "default": {}
                                },
                                "selector": {
                                    "type": "object",
                                    "description": "Prometheus instance selector labels",
                                    "default": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "RelabelConfigs to apply to samples before scraping",
                                    "default": [],
                                    "items": {}
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "MetricRelabelConfigs to apply to samples before ingestion",
                                    "default": [],
                                    "items": {}
                                },
                                "honorLabels": {
                                    "type": "boolean",
                                    "description": "Specify honorLabels parameter to add the scrape endpoint",
                                    "default": false
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        },
        "imagePuller": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy ImagePuller daemonset",
                    "default": true
                },
                "command": {
                    "type": "array",
                    "description": "Override ImagePuller default command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override ImagePuller default args",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Add extra environment variables to the ImagePuller container",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars",
                    "default": ""
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Override default startup probe",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the ImagePuller containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the ImagePuller containers",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled ImagePuller containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set ImagePuller container's Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set ImagePuller container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled ImagePuller pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set ImagePuller pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Add lifecycle hooks to the ImagePuller deployment",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Pod extra labels",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for ImagePuller pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `imagePuller.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `imagePuller.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `imagePuller.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `imagePuller.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `imagePuller.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment. Evaluated as a template.",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment. Evaluated as a template.",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment. Evaluated as a template.",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority Class Name",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds ImagePuller pod needs to terminate gracefully",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Update strategy - only really applicable for deployments with RWO PVs attached",
                            "default": "RollingUpdate"
                        },
                        "rollingUpdate": {
                            "type": "object",
                            "description": "ImagePuller deployment rolling update configuration parameters",
                            "default": {}
                        }
                    }
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for ImagePuller pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for ImagePuller container(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the ImagePuller pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the ImagePuller pod",
                    "default": [],
                    "items": {}
                }
            }
        },
        "singleuser": {
            "type": "object",
            "properties": {
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Single User image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Single User image repository",
                            "default": "bitnami/jupyter-base-notebook"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Single User image tag (immutabe tags are recommended)",
                            "default": "4.0.2-debian-11-r16"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Single User image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Single User image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Single User image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "notebookDir": {
                    "type": "string",
                    "description": "Notebook directory (it will be the same as the PVC volume mount)",
                    "default": "/opt/bitnami/jupyterhub-singleuser"
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Controls whether a process can gain more privileges than its parent process",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Override Single User default command",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables that should be set for the user pods",
                    "default": [],
                    "items": {}
                },
                "containerPort": {
                    "type": "number",
                    "description": "Single User container port",
                    "default": 8888
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Singleuser containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Singleuser containers",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Single User containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Single User container's Security Context runAsUser",
                            "default": 1001
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Single User pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Single User pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Single User pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Single User pods",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment. Evaluated as a template.",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment. Evaluated as a template.",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Single User pod priority class name",
                    "default": ""
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "Add lifecycle hooks to the Single User deployment to automate configuration before or after startup",
                    "default": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for Single User pods",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for Single User container(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Single User pods",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Single User pod",
                    "default": [],
                    "items": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specifies whether a ServiceAccount should be created",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "Override Single User service account name",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for the ServiceAccount",
                            "default": {}
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable persistent volume creation on Single User instances",
                            "default": true
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "Persistent Volumes storage class",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volumes access modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "Persistent Volumes size",
                            "default": "10Gi"
                        }
                    }
                },
                "networkPolicy": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Deploy Single User network policies",
                            "default": true
                        },
                        "allowInterspaceAccess": {
                            "type": "boolean",
                            "description": "Allow communication between pods in different namespaces",
                            "default": true
                        },
                        "allowCloudMetadataAccess": {
                            "type": "boolean",
                            "description": "Allow Single User pods to access Cloud Metada endpoints",
                            "default": false
                        },
                        "extraIngress": {
                            "type": "string",
                            "description": "Add extra ingress rules to the NetworkPolicy",
                            "default": ""
                        },
                        "extraEgress": {
                            "type": "string",
                            "description": "Add extra egress rules to the NetworkPolicy",
                            "default": ""
                        }
                    }
                }
            }
        },
        "auxiliaryImage": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Auxiliary image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Auxiliary image repository",
                    "default": "bitnami/os-shell"
                },
                "tag": {
                    "type": "string",
                    "description": "Auxiliary image tag (immutabe tags are recommended)",
                    "default": "11-debian-11-r51"
                },
                "digest": {
                    "type": "string",
                    "description": "Auxiliary image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Auxiliary image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Auxiliary image pull secrets",
                    "default": [],
                    "items": {}
                }
            }
        },
        "postgresql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Switch to enable or disable the PostgreSQL helm chart",
                    "default": true
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "username": {
                            "type": "string",
                            "description": "Name for a custom user to create",
                            "default": "bn_jupyterhub"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for the custom user to create",
                            "default": ""
                        },
                        "database": {
                            "type": "string",
                            "description": "Name for a custom database to create",
                            "default": "bitnami_jupyterhub"
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of existing secret to use for PostgreSQL credentials",
                            "default": ""
                        }
                    }
                },
                "architecture": {
                    "type": "string",
                    "description": "PostgreSQL architecture (`standalone` or `replication`)",
                    "default": "standalone"
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "ports": {
                            "type": "object",
                            "properties": {
                                "postgresql": {
                                    "type": "number",
                                    "description": "PostgreSQL service port",
                                    "default": 5432
                                }
                            }
                        }
                    }
                }
            }
        },
        "externalDatabase": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Database host",
                    "default": ""
                },
                "port": {
                    "type": "number",
                    "description": "Database port number",
                    "default": 5432
                },
                "user": {
                    "type": "string",
                    "description": "Non-root username for JupyterHub",
                    "default": "postgres"
                },
                "password": {
                    "type": "string",
                    "description": "Password for the non-root username for JupyterHub",
                    "default": ""
                },
                "database": {
                    "type": "string",
                    "description": "JupyterHub database name",
                    "default": "jupyterhub"
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of an existing secret resource containing the database credentials",
                    "default": ""
                },
                "existingSecretPasswordKey": {
                    "type": "string",
                    "description": "Name of an existing secret key containing the database credentials",
                    "default": ""
                }
            }
        }
    }
}