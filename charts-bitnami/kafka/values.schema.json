{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Default Kubernetes cluster domain",
            "default": "cluster.local"
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "serviceBindings": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create secret for service binding (Experimental)",
                    "default": false
                }
            }
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the statefulset",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the statefulset",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Kafka image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Kafka image repository",
                    "default": "bitnami/kafka"
                },
                "tag": {
                    "type": "string",
                    "description": "Kafka image tag (immutable tags are recommended)",
                    "default": "3.5.1-debian-11-r44"
                },
                "digest": {
                    "type": "string",
                    "description": "Kafka image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Kafka image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Specify if debug values should be set",
                    "default": false
                }
            }
        },
        "extraInit": {
            "type": "string",
            "description": "Additional content for the kafka init script, rendered as a template.",
            "default": ""
        },
        "config": {
            "type": "string",
            "description": "Configuration file for Kafka, rendered as a template. Auto-generated based on chart values when not specified.",
            "default": ""
        },
        "existingConfigmap": {
            "type": "string",
            "description": "ConfigMap with Kafka Configuration",
            "default": ""
        },
        "extraConfig": {
            "type": "string",
            "description": "Additional configuration to be appended at the end of the generated Kafka configuration file.",
            "default": ""
        },
        "secretConfig": {
            "type": "string",
            "description": "Additional configuration to be appended at the end of the generated Kafka configuration file.",
            "default": ""
        },
        "existingSecretConfig": {
            "type": "string",
            "description": "Secret with additonal configuration that will be appended to the end of the generated Kafka configuration file",
            "default": ""
        },
        "log4j": {
            "type": "string",
            "description": "An optional log4j.properties file to overwrite the default of the Kafka brokers",
            "default": ""
        },
        "existingLog4jConfigMap": {
            "type": "string",
            "description": "The name of an existing ConfigMap containing a log4j.properties file",
            "default": ""
        },
        "heapOpts": {
            "type": "string",
            "description": "Kafka Java Heap size",
            "default": "-Xmx1024m -Xms1024m"
        },
        "interBrokerProtocolVersion": {
            "type": "string",
            "description": "Override the setting 'inter.broker.protocol.version' during the ZK migration.",
            "default": ""
        },
        "listeners": {
            "type": "object",
            "properties": {
                "client": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name for the Kafka client listener",
                            "default": "CLIENT"
                        },
                        "containerPort": {
                            "type": "number",
                            "description": "Port for the Kafka client listener",
                            "default": 9092
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Security protocol for the Kafka client listener. Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'",
                            "default": "SASL_PLAINTEXT"
                        },
                        "sslClientAuth": {
                            "type": "string",
                            "description": "Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.authType for this listener. Allowed values are 'none', 'requested' and 'required'",
                            "default": ""
                        }
                    }
                },
                "controller": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name for the Kafka controller listener",
                            "default": "CONTROLLER"
                        },
                        "containerPort": {
                            "type": "number",
                            "description": "Port for the Kafka controller listener",
                            "default": 9093
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Security protocol for the Kafka controller listener. Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'",
                            "default": "SASL_PLAINTEXT"
                        },
                        "sslClientAuth": {
                            "type": "string",
                            "description": "Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.authType for this listener. Allowed values are 'none', 'requested' and 'required'",
                            "default": ""
                        }
                    }
                },
                "interbroker": {
                    "type": "object",
                    "properties": {
                        "name": {
                            "type": "string",
                            "description": "Name for the Kafka inter-broker listener",
                            "default": "INTERNAL"
                        },
                        "containerPort": {
                            "type": "number",
                            "description": "Port for the Kafka inter-broker listener",
                            "default": 9094
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Security protocol for the Kafka inter-broker listener. Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'",
                            "default": "SASL_PLAINTEXT"
                        },
                        "sslClientAuth": {
                            "type": "string",
                            "description": "Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.authType for this listener. Allowed values are 'none', 'requested' and 'required'",
                            "default": ""
                        }
                    }
                },
                "external": {
                    "type": "object",
                    "properties": {
                        "containerPort": {
                            "type": "number",
                            "description": "Port for the Kafka external listener",
                            "default": 9095
                        },
                        "protocol": {
                            "type": "string",
                            "description": "Security protocol for the Kafka external listener. . Allowed values are 'PLAINTEXT', 'SASL_PLAINTEXT', 'SASL_SSL' and 'SSL'",
                            "default": "SASL_PLAINTEXT"
                        },
                        "name": {
                            "type": "string",
                            "description": "Name for the Kafka external listener",
                            "default": "EXTERNAL"
                        },
                        "sslClientAuth": {
                            "type": "string",
                            "description": "Optional. If SASL_SSL is enabled, configure mTLS TLS authentication type. If SSL protocol is enabled, overrides tls.sslClientAuth for this listener. Allowed values are 'none', 'requested' and 'required'",
                            "default": ""
                        }
                    }
                },
                "extraListeners": {
                    "type": "array",
                    "description": "Array of listener objects to be appended to already existing listeners",
                    "default": [],
                    "items": {}
                },
                "overrideListeners": {
                    "type": "string",
                    "description": "Overrides the Kafka 'listeners' configuration setting.",
                    "default": ""
                },
                "advertisedListeners": {
                    "type": "string",
                    "description": "Overrides the Kafka 'advertised.listener' configuration setting.",
                    "default": ""
                },
                "securityProtocolMap": {
                    "type": "string",
                    "description": "Overrides the Kafka 'security.protocol.map' configuration setting.",
                    "default": ""
                }
            }
        },
        "sasl": {
            "type": "object",
            "properties": {
                "enabledMechanisms": {
                    "type": "string",
                    "description": "Comma-separated list of allowed SASL mechanisms when SASL listeners are configured. Allowed types: `PLAIN`, `SCRAM-SHA-256`, `SCRAM-SHA-512`",
                    "default": "PLAIN,SCRAM-SHA-256,SCRAM-SHA-512"
                },
                "interBrokerMechanism": {
                    "type": "string",
                    "description": "SASL mechanism for inter broker communication.",
                    "default": "PLAIN"
                },
                "controllerMechanism": {
                    "type": "string",
                    "description": "SASL mechanism for controller communications.",
                    "default": "PLAIN"
                },
                "interbroker": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "type": "string",
                            "description": "Username for inter-broker communications when SASL is enabled",
                            "default": "inter_broker_user"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for inter-broker communications when SASL is enabled. If not set and SASL is enabled for the controller listener, a random password will be generated.",
                            "default": ""
                        }
                    }
                },
                "controller": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "type": "string",
                            "description": "Username for controller communications when SASL is enabled",
                            "default": "controller_user"
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for controller communications when SASL is enabled. If not set and SASL is enabled for the inter-broker listener, a random password will be generated.",
                            "default": ""
                        }
                    }
                },
                "client": {
                    "type": "object",
                    "properties": {
                        "users": {
                            "type": "array",
                            "description": "Comma-separated list of usernames for client communications when SASL is enabled",
                            "default": [
                                "user1"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "passwords": {
                            "type": "string",
                            "description": "Comma-separated list of passwords for client communications when SASL is enabled, must match the number of client.users",
                            "default": ""
                        }
                    }
                },
                "zookeeper": {
                    "type": "object",
                    "properties": {
                        "user": {
                            "type": "string",
                            "description": "Username for zookeeper communications when SASL is enabled.",
                            "default": ""
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for zookeeper communications when SASL is enabled.",
                            "default": ""
                        }
                    }
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of the existing secret containing credentials for clientUsers, interBrokerUser, controllerUser and zookeeperUser",
                    "default": ""
                }
            }
        },
        "tls": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Format to use for TLS certificates. Allowed types: `JKS` and `PEM`",
                    "default": "JKS"
                },
                "pemChainIncluded": {
                    "type": "boolean",
                    "description": "Flag to denote that the Certificate Authority (CA) certificates are bundled with the endpoint cert.",
                    "default": false
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of the existing secret containing the TLS certificates for the Kafka nodes.",
                    "default": ""
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Generate automatically self-signed TLS certificates for Kafka brokers. Currently only supported if `tls.type` is `PEM`",
                    "default": false
                },
                "passwordsSecret": {
                    "type": "string",
                    "description": "Name of the secret containing the password to access the JKS files or PEM key when they are password-protected. (`key`: `password`)",
                    "default": ""
                },
                "passwordsSecretKeystoreKey": {
                    "type": "string",
                    "description": "The secret key from the tls.passwordsSecret containing the password for the Keystore.",
                    "default": "keystore-password"
                },
                "passwordsSecretTruststoreKey": {
                    "type": "string",
                    "description": "The secret key from the tls.passwordsSecret containing the password for the Truststore.",
                    "default": "truststore-password"
                },
                "passwordsSecretPemPasswordKey": {
                    "type": "string",
                    "description": "The secret key from the tls.passwordsSecret containing the password for the PEM key inside 'tls.passwordsSecret'.",
                    "default": ""
                },
                "keystorePassword": {
                    "type": "string",
                    "description": "Password to access the JKS keystore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.",
                    "default": ""
                },
                "truststorePassword": {
                    "type": "string",
                    "description": "Password to access the JKS truststore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.",
                    "default": ""
                },
                "keyPassword": {
                    "type": "string",
                    "description": "Password to access the PEM key when it is password-protected.",
                    "default": ""
                },
                "jksTruststoreSecret": {
                    "type": "string",
                    "description": "Name of the existing secret containing your truststore if truststore not existing or different from the one in the `tls.existingSecret`",
                    "default": ""
                },
                "jksTruststoreKey": {
                    "type": "string",
                    "description": "The secret key from the `tls.existingSecret` or `tls.jksTruststoreSecret` containing the truststore",
                    "default": ""
                },
                "endpointIdentificationAlgorithm": {
                    "type": "string",
                    "description": "The endpoint identification algorithm to validate server hostname using server certificate",
                    "default": "https"
                },
                "sslClientAuth": {
                    "type": "string",
                    "description": "Sets the default value for the ssl.client.auth Kafka setting.",
                    "default": "required"
                },
                "zookeeper": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable TLS for Zookeeper client connections.",
                            "default": false
                        },
                        "verifyHostname": {
                            "type": "boolean",
                            "description": "Hostname validation.",
                            "default": true
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the TLS certificates for ZooKeeper client communications.",
                            "default": ""
                        },
                        "existingSecretKeystoreKey": {
                            "type": "string",
                            "description": "The secret key from the  tls.zookeeper.existingSecret containing the Keystore.",
                            "default": "zookeeper.keystore.jks"
                        },
                        "existingSecretTruststoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.zookeeper.existingSecret containing the Truststore.",
                            "default": "zookeeper.truststore.jks"
                        },
                        "passwordsSecret": {
                            "type": "string",
                            "description": "Existing secret containing Keystore and Truststore passwords.",
                            "default": ""
                        },
                        "passwordsSecretKeystoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.zookeeper.passwordsSecret containing the password for the Keystore.",
                            "default": "keystore-password"
                        },
                        "passwordsSecretTruststoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.zookeeper.passwordsSecret containing the password for the Truststore.",
                            "default": "truststore-password"
                        },
                        "keystorePassword": {
                            "type": "string",
                            "description": "Password to access the JKS keystore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.",
                            "default": ""
                        },
                        "truststorePassword": {
                            "type": "string",
                            "description": "Password to access the JKS truststore when it is password-protected. Ignored when 'tls.passwordsSecret' is provided.",
                            "default": ""
                        }
                    }
                }
            }
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Extra environment variables to add to Kafka pods",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "ConfigMap with extra environment variables",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Secret with extra environment variables",
            "default": ""
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the Kafka pod(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the Kafka container(s)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the Kafka pod(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional Add init containers to the Kafka pod(s)",
            "default": [],
            "items": {}
        },
        "controller": {
            "type": "object",
            "properties": {
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Kafka controller-eligible nodes",
                    "default": 3
                },
                "controllerOnly": {
                    "type": "boolean",
                    "description": "If set to true, controller nodes will be deployed as dedicated controllers, instead of controller+broker processes.",
                    "default": false
                },
                "minId": {
                    "type": "number",
                    "description": "Minimal node.id values for controller-eligible nodes. Do not change after first initialization.",
                    "default": 0
                },
                "zookeeperMigrationMode": {
                    "type": "boolean",
                    "description": "Set to true to deploy cluster controller quorum",
                    "default": false
                },
                "config": {
                    "type": "string",
                    "description": "Configuration file for Kafka controller-eligible nodes, rendered as a template. Auto-generated based on chart values when not specified.",
                    "default": ""
                },
                "existingConfigmap": {
                    "type": "string",
                    "description": "ConfigMap with Kafka Configuration for controller-eligible nodes.",
                    "default": ""
                },
                "extraConfig": {
                    "type": "string",
                    "description": "Additional configuration to be appended at the end of the generated Kafka controller-eligible nodes configuration file.",
                    "default": ""
                },
                "secretConfig": {
                    "type": "string",
                    "description": "Additional configuration to be appended at the end of the generated Kafka controller-eligible nodes configuration file.",
                    "default": ""
                },
                "existingSecretConfig": {
                    "type": "string",
                    "description": "Secret with additonal configuration that will be appended to the end of the generated Kafka controller-eligible nodes configuration file",
                    "default": ""
                },
                "heapOpts": {
                    "type": "string",
                    "description": "Kafka Java Heap size for controller-eligible nodes",
                    "default": "-Xmx1024m -Xms1024m"
                },
                "command": {
                    "type": "array",
                    "description": "Override Kafka container command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override Kafka container arguments",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables to add to Kafka pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap with extra environment variables",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret with extra environment variables",
                    "default": ""
                },
                "extraContainerPorts": {
                    "type": "array",
                    "description": "Kafka controller-eligible extra containerPorts.",
                    "default": [],
                    "items": {}
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Kafka containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Kafka containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Kafka containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "lifecycleHooks for the Kafka container to automate configuration before or after startup",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for the pods",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Kafka pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Kafka pods's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kafka containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Kafka containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Kafka containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Force the child process to be run as non-privileged",
                            "default": false
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Allows the pod to mount the RootFS as ReadOnly only",
                            "default": true
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Kafka containers' server Security Context capabilities to be dropped",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Kafka pods host aliases",
                    "default": [],
                    "items": {}
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Specify if host network should be enabled for Kafka pods",
                    "default": false
                },
                "hostIPC": {
                    "type": "boolean",
                    "description": "Specify if host IPC should be enabled for Kafka pods",
                    "default": false
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Kafka pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Extra annotations for Kafka pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds the pod needs to gracefully terminate",
                    "default": ""
                },
                "podManagementPolicy": {
                    "type": "string",
                    "description": "StatefulSet controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees. There are two valid pod management policies: OrderedReady and Parallel",
                    "default": "Parallel"
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Name of the existing priority class to be used by kafka pods",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by pod(s)",
                    "default": ""
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "description": "Whether information about services should be injected into pod's environment variable",
                    "default": true
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kafka statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Kafka pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Kafka container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Kafka pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional Add init containers to the Kafka pod(s)",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Deploy a pdb object for the Kafka pod",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of unavailable Kafka replicas",
                            "default": ""
                        },
                        "maxUnavailable": {
                            "type": "number",
                            "description": "Maximum number/percentage of unavailable Kafka replicas",
                            "default": 1
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kafka data persistence using PVC, note that ZooKeeper persistence is unaffected",
                            "default": true
                        },
                        "existingClaim": {
                            "type": "string",
                            "description": "A manually managed Persistent Volume and Claim",
                            "default": ""
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "PVC Storage Class for Kafka data volume",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume Access Modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "PVC Storage Request for Kafka data volume",
                            "default": "8Gi"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the PVC",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Labels for the PVC",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume for Kafka data PVC. If set, the PVC can't have a PV dynamically provisioned for it",
                            "default": {}
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "Mount path of the Kafka data volume",
                            "default": "/bitnami/kafka"
                        }
                    }
                },
                "logPersistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kafka logs persistence using PVC, note that ZooKeeper persistence is unaffected",
                            "default": false
                        },
                        "existingClaim": {
                            "type": "string",
                            "description": "A manually managed Persistent Volume and Claim",
                            "default": ""
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "PVC Storage Class for Kafka logs volume",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume Access Modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "PVC Storage Request for Kafka logs volume",
                            "default": "8Gi"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the PVC",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume for Kafka log data PVC. If set, the PVC can't have a PV dynamically provisioned for it",
                            "default": {}
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "Mount path of the Kafka logs volume",
                            "default": "/opt/bitnami/kafka/logs"
                        }
                    }
                }
            }
        },
        "broker": {
            "type": "object",
            "properties": {
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Kafka broker-only nodes",
                    "default": 0
                },
                "minId": {
                    "type": "number",
                    "description": "Minimal node.id values for broker-only nodes. Do not change after first initialization.",
                    "default": 100
                },
                "zookeeperMigrationMode": {
                    "type": "boolean",
                    "description": "Set to true to deploy cluster controller quorum",
                    "default": false
                },
                "config": {
                    "type": "string",
                    "description": "Configuration file for Kafka broker-only nodes, rendered as a template. Auto-generated based on chart values when not specified.",
                    "default": ""
                },
                "existingConfigmap": {
                    "type": "string",
                    "description": "ConfigMap with Kafka Configuration for broker-only nodes.",
                    "default": ""
                },
                "extraConfig": {
                    "type": "string",
                    "description": "Additional configuration to be appended at the end of the generated Kafka broker-only nodes configuration file.",
                    "default": ""
                },
                "secretConfig": {
                    "type": "string",
                    "description": "Additional configuration to be appended at the end of the generated Kafka broker-only nodes configuration file.",
                    "default": ""
                },
                "existingSecretConfig": {
                    "type": "string",
                    "description": "Secret with additonal configuration that will be appended to the end of the generated Kafka broker-only nodes configuration file",
                    "default": ""
                },
                "heapOpts": {
                    "type": "string",
                    "description": "Kafka Java Heap size for broker-only nodes",
                    "default": "-Xmx1024m -Xms1024m"
                },
                "command": {
                    "type": "array",
                    "description": "Override Kafka container command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override Kafka container arguments",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables to add to Kafka pods",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap with extra environment variables",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret with extra environment variables",
                    "default": ""
                },
                "extraContainerPorts": {
                    "type": "array",
                    "description": "Kafka broker-only extra containerPorts.",
                    "default": [],
                    "items": {}
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Kafka containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 10
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Kafka containers",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Kafka containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "lifecycleHooks for the Kafka container to automate configuration before or after startup",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for the pods",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Kafka pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Kafka pod's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kafka containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Kafka containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Kafka containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Force the child process to be run as non-privileged",
                            "default": false
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Allows the pod to mount the RootFS as ReadOnly only",
                            "default": true
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Kafka containers' server Security Context capabilities to be dropped",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Kafka pods host aliases",
                    "default": [],
                    "items": {}
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Specify if host network should be enabled for Kafka pods",
                    "default": false
                },
                "hostIPC": {
                    "type": "boolean",
                    "description": "Specify if host IPC should be enabled for Kafka pods",
                    "default": false
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Kafka pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Extra annotations for Kafka pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "Seconds the pod needs to gracefully terminate",
                    "default": ""
                },
                "podManagementPolicy": {
                    "type": "string",
                    "description": "StatefulSet controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees. There are two valid pod management policies: OrderedReady and Parallel",
                    "default": "Parallel"
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Name of the existing priority class to be used by kafka pods",
                    "default": ""
                },
                "runtimeClassName": {
                    "type": "string",
                    "description": "Name of the runtime class to be used by pod(s)",
                    "default": ""
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "description": "Whether information about services should be injected into pod's environment variable",
                    "default": true
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kafka statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Kafka pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Kafka container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Kafka pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional Add init containers to the Kafka pod(s)",
                    "default": [],
                    "items": {}
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Deploy a pdb object for the Kafka pod",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of unavailable Kafka replicas",
                            "default": ""
                        },
                        "maxUnavailable": {
                            "type": "number",
                            "description": "Maximum number/percentage of unavailable Kafka replicas",
                            "default": 1
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kafka data persistence using PVC, note that ZooKeeper persistence is unaffected",
                            "default": true
                        },
                        "existingClaim": {
                            "type": "string",
                            "description": "A manually managed Persistent Volume and Claim",
                            "default": ""
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "PVC Storage Class for Kafka data volume",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume Access Modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "PVC Storage Request for Kafka data volume",
                            "default": "8Gi"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the PVC",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Labels for the PVC",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume for Kafka data PVC. If set, the PVC can't have a PV dynamically provisioned for it",
                            "default": {}
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "Mount path of the Kafka data volume",
                            "default": "/bitnami/kafka"
                        }
                    }
                },
                "logPersistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kafka logs persistence using PVC, note that ZooKeeper persistence is unaffected",
                            "default": false
                        },
                        "existingClaim": {
                            "type": "string",
                            "description": "A manually managed Persistent Volume and Claim",
                            "default": ""
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "PVC Storage Class for Kafka logs volume",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume Access Modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "PVC Storage Request for Kafka logs volume",
                            "default": "8Gi"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the PVC",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume for Kafka log data PVC. If set, the PVC can't have a PV dynamically provisioned for it",
                            "default": {}
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "Mount path of the Kafka logs volume",
                            "default": "/opt/bitnami/kafka/logs"
                        }
                    }
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "number",
                            "description": "Kafka svc port for client connections",
                            "default": 9092
                        },
                        "controller": {
                            "type": "number",
                            "description": "Kafka svc port for controller connections. It is used if \"kraft.enabled: true\"",
                            "default": 9093
                        },
                        "interbroker": {
                            "type": "number",
                            "description": "Kafka svc port for inter-broker connections",
                            "default": 9094
                        },
                        "external": {
                            "type": "number",
                            "description": "Kafka svc port for external connections",
                            "default": 9095
                        }
                    }
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in the Kafka service (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "string",
                            "description": "Node port for the Kafka client connections",
                            "default": ""
                        },
                        "external": {
                            "type": "string",
                            "description": "Node port for the Kafka external connections",
                            "default": ""
                        }
                    }
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Kafka service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "Kafka service Load Balancer IP",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Kafka service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Kafka service external traffic policy",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for Kafka service",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "controller": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the controller-eligible headless service.",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Labels for the controller-eligible headless service.",
                                    "default": {}
                                }
                            }
                        },
                        "broker": {
                            "type": "object",
                            "properties": {
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations for the broker-only headless service.",
                                    "default": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Labels for the broker-only headless service.",
                                    "default": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "externalAccess": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Kubernetes external cluster access to Kafka brokers",
                    "default": false
                },
                "autoDiscovery": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable using an init container to auto-detect external IPs/ports by querying the K8s API",
                            "default": false
                        },
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image repository",
                                    "default": "bitnami/kubectl"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image tag (immutable tags are recommended)",
                                    "default": "1.25.13-debian-11-r11"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Kubectl image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Init container auto-discovery image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Init container auto-discovery image pull secrets",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the auto-discovery init container",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the auto-discovery init container",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "controller": {
                    "type": "object",
                    "properties": {
                        "forceExpose": {
                            "type": "boolean",
                            "description": "If set to true, force exposing controller-eligible nodes although they are configured as controller-only nodes",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Kubernetes Service type for external access. It can be NodePort, LoadBalancer or ClusterIP",
                                    "default": "LoadBalancer"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "external": {
                                            "type": "number",
                                            "description": "Kafka port used for external access when service type is LoadBalancer",
                                            "default": 9094
                                        }
                                    }
                                },
                                "loadBalancerIPs": {
                                    "type": "array",
                                    "description": "Array of load balancer IPs for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerNames": {
                                    "type": "array",
                                    "description": "Array of load balancer Names for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerAnnotations": {
                                    "type": "array",
                                    "description": "Array of load balancer annotations for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Address(es) that are allowed when service is LoadBalancer",
                                    "default": [],
                                    "items": {}
                                },
                                "nodePorts": {
                                    "type": "array",
                                    "description": "Array of node ports used for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "externalIPs": {
                                    "type": "array",
                                    "description": "Use distinct service host IPs to configure Kafka external listener when service type is NodePort. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "useHostIPs": {
                                    "type": "boolean",
                                    "description": "Use service host IPs to configure Kafka external listener when service type is NodePort",
                                    "default": false
                                },
                                "usePodIPs": {
                                    "type": "boolean",
                                    "description": "using the MY_POD_IP address for external access.",
                                    "default": false
                                },
                                "domain": {
                                    "type": "string",
                                    "description": "Domain or external ip used to configure Kafka external listener when service type is NodePort or ClusterIP",
                                    "default": ""
                                },
                                "publishNotReadyAddresses": {
                                    "type": "boolean",
                                    "description": "Indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready",
                                    "default": false
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Service labels for external access",
                                    "default": {}
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Service annotations for external access",
                                    "default": {}
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in the Kafka external service",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "broker": {
                    "type": "object",
                    "properties": {
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Kubernetes Service type for external access. It can be NodePort, LoadBalancer or ClusterIP",
                                    "default": "LoadBalancer"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "external": {
                                            "type": "number",
                                            "description": "Kafka port used for external access when service type is LoadBalancer",
                                            "default": 9094
                                        }
                                    }
                                },
                                "loadBalancerIPs": {
                                    "type": "array",
                                    "description": "Array of load balancer IPs for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerNames": {
                                    "type": "array",
                                    "description": "Array of load balancer Names for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerAnnotations": {
                                    "type": "array",
                                    "description": "Array of load balancer annotations for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Address(es) that are allowed when service is LoadBalancer",
                                    "default": [],
                                    "items": {}
                                },
                                "nodePorts": {
                                    "type": "array",
                                    "description": "Array of node ports used for each Kafka broker. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "externalIPs": {
                                    "type": "array",
                                    "description": "Use distinct service host IPs to configure Kafka external listener when service type is NodePort. Length must be the same as replicaCount",
                                    "default": [],
                                    "items": {}
                                },
                                "useHostIPs": {
                                    "type": "boolean",
                                    "description": "Use service host IPs to configure Kafka external listener when service type is NodePort",
                                    "default": false
                                },
                                "usePodIPs": {
                                    "type": "boolean",
                                    "description": "using the MY_POD_IP address for external access.",
                                    "default": false
                                },
                                "domain": {
                                    "type": "string",
                                    "description": "Domain or external ip used to configure Kafka external listener when service type is NodePort or ClusterIP",
                                    "default": ""
                                },
                                "publishNotReadyAddresses": {
                                    "type": "boolean",
                                    "description": "Indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready",
                                    "default": false
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Service labels for external access",
                                    "default": {}
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Service annotations for external access",
                                    "default": {}
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Extra ports to expose in the Kafka external service",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                }
            }
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether a NetworkPolicy should be created",
                    "default": false
                },
                "allowExternal": {
                    "type": "boolean",
                    "description": "Don't require client label for connections",
                    "default": true
                },
                "explicitNamespacesSelector": {
                    "type": "object",
                    "description": "A Kubernetes LabelSelector to explicitly select namespaces from which traffic could be allowed",
                    "default": {}
                },
                "externalAccess": {
                    "type": "object",
                    "properties": {
                        "from": {
                            "type": "array",
                            "description": "customize the from section for External Access on tcp-external port",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner and group of the persistent volume",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Init container volume-permissions image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "Init container volume-permissions resource limits",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "Init container volume-permissions resource requests",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the init container",
                            "default": 0
                        }
                    }
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable creation of ServiceAccount for Kafka pods",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service account to use. If not set and `create` is `true`, a name is generated",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for the ServiceAccount",
                    "default": {}
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create & use RBAC resources or not",
                    "default": false
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "kafka": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to create a standalone Kafka exporter to expose Kafka metrics",
                            "default": false
                        },
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Kafka exporter image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Kafka exporter image repository",
                                    "default": "bitnami/kafka-exporter"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Kafka exporter image tag (immutable tags are recommended)",
                                    "default": "1.7.0-debian-11-r102"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Kafka exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Kafka exporter image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Specify docker-registry secret names as an array",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "certificatesSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the optional certificate and key files",
                            "default": ""
                        },
                        "tlsCert": {
                            "type": "string",
                            "description": "The secret key from the certificatesSecret if 'client-cert' key different from the default (cert-file)",
                            "default": "cert-file"
                        },
                        "tlsKey": {
                            "type": "string",
                            "description": "The secret key from the certificatesSecret if 'client-key' key different from the default (key-file)",
                            "default": "key-file"
                        },
                        "tlsCaSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the optional ca certificate for Kafka exporter client authentication",
                            "default": ""
                        },
                        "tlsCaCert": {
                            "type": "string",
                            "description": "The secret key from the certificatesSecret or tlsCaSecret if 'ca-cert' key different from the default (ca-file)",
                            "default": "ca-file"
                        },
                        "extraFlags": {
                            "type": "object",
                            "description": "Extra flags to be passed to Kafka exporter",
                            "default": {}
                        },
                        "command": {
                            "type": "array",
                            "description": "Override Kafka exporter container command",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override Kafka exporter container arguments",
                            "default": [],
                            "items": {}
                        },
                        "containerPorts": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "Kafka exporter metrics container port",
                                    "default": 9308
                                }
                            }
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the container",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the container",
                                    "default": {}
                                }
                            }
                        },
                        "podSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable security context for the pods",
                                    "default": true
                                },
                                "fsGroup": {
                                    "type": "number",
                                    "description": "Set Kafka exporter pod's Security Context fsGroup",
                                    "default": 1001
                                },
                                "seccompProfile": {
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "type": "string",
                                            "description": "Set Kafka exporter pod's Security Context seccomp profile",
                                            "default": "RuntimeDefault"
                                        }
                                    }
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable Kafka exporter containers' Security Context",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "Set Kafka exporter containers' Security Context runAsUser",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set Kafka exporter containers' Security Context runAsNonRoot",
                                    "default": true
                                },
                                "allowPrivilegeEscalation": {
                                    "type": "boolean",
                                    "description": "Set Kafka exporter containers' Security Context allowPrivilegeEscalation",
                                    "default": false
                                },
                                "readOnlyRootFilesystem": {
                                    "type": "boolean",
                                    "description": "Set Kafka exporter containers' Security Context readOnlyRootFilesystem",
                                    "default": true
                                },
                                "capabilities": {
                                    "type": "object",
                                    "properties": {
                                        "drop": {
                                            "type": "array",
                                            "description": "Set Kafka exporter containers' Security Context capabilities to be dropped",
                                            "default": [
                                                "ALL"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "hostAliases": {
                            "type": "array",
                            "description": "Kafka exporter pods host aliases",
                            "default": [],
                            "items": {}
                        },
                        "podLabels": {
                            "type": "object",
                            "description": "Extra labels for Kafka exporter pods",
                            "default": {}
                        },
                        "podAnnotations": {
                            "type": "object",
                            "description": "Extra annotations for Kafka exporter pods",
                            "default": {}
                        },
                        "podAffinityPreset": {
                            "type": "string",
                            "description": "Pod affinity preset. Ignored if `metrics.kafka.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "podAntiAffinityPreset": {
                            "type": "string",
                            "description": "Pod anti-affinity preset. Ignored if `metrics.kafka.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": "soft"
                        },
                        "nodeAffinityPreset": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Node affinity preset type. Ignored if `metrics.kafka.affinity` is set. Allowed values: `soft` or `hard`",
                                    "default": ""
                                },
                                "key": {
                                    "type": "string",
                                    "description": "Node label key to match Ignored if `metrics.kafka.affinity` is set.",
                                    "default": ""
                                },
                                "values": {
                                    "type": "array",
                                    "description": "Node label values to match. Ignored if `metrics.kafka.affinity` is set.",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "affinity": {
                            "type": "object",
                            "description": "Affinity for pod assignment",
                            "default": {}
                        },
                        "nodeSelector": {
                            "type": "object",
                            "description": "Node labels for pod assignment",
                            "default": {}
                        },
                        "tolerations": {
                            "type": "array",
                            "description": "Tolerations for pod assignment",
                            "default": [],
                            "items": {}
                        },
                        "schedulerName": {
                            "type": "string",
                            "description": "Name of the k8s scheduler (other than default) for Kafka exporter",
                            "default": ""
                        },
                        "enableServiceLinks": {
                            "type": "boolean",
                            "description": "Whether information about services should be injected into pod's environment variable",
                            "default": true
                        },
                        "priorityClassName": {
                            "type": "string",
                            "description": "Kafka exporter pods' priorityClassName",
                            "default": ""
                        },
                        "topologySpreadConstraints": {
                            "type": "array",
                            "description": "Topology Spread Constraints for pod assignment",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumes": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumes for the Kafka exporter pod(s)",
                            "default": [],
                            "items": {}
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Optionally specify extra list of additional volumeMounts for the Kafka exporter container(s)",
                            "default": [],
                            "items": {}
                        },
                        "sidecars": {
                            "type": "array",
                            "description": "Add additional sidecar containers to the Kafka exporter pod(s)",
                            "default": [],
                            "items": {}
                        },
                        "initContainers": {
                            "type": "array",
                            "description": "Add init containers to the Kafka exporter pods",
                            "default": [],
                            "items": {}
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Kafka exporter metrics service port",
                                            "default": 9308
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Static clusterIP or None for headless services",
                                    "default": ""
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.metrics.kafka.service.ports.metrics }}"
                                                },
                                                "io/path": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "/metrics"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "serviceAccount": {
                            "type": "object",
                            "properties": {
                                "create": {
                                    "type": "boolean",
                                    "description": "Enable creation of ServiceAccount for Kafka exporter pods",
                                    "default": true
                                },
                                "name": {
                                    "type": "string",
                                    "description": "The name of the service account to use. If not set and `create` is `true`, a name is generated",
                                    "default": ""
                                },
                                "automountServiceAccountToken": {
                                    "type": "boolean",
                                    "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                                    "default": true
                                }
                            }
                        }
                    }
                },
                "jmx": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to expose JMX metrics to Prometheus",
                            "default": false
                        },
                        "kafkaJmxPort": {
                            "type": "number",
                            "description": "JMX port where the exporter will collect metrics, exposed in the Kafka container.",
                            "default": 5555
                        },
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "JMX exporter image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "JMX exporter image repository",
                                    "default": "bitnami/jmx-exporter"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "JMX exporter image tag (immutable tags are recommended)",
                                    "default": "0.19.0-debian-11-r66"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "JMX exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "JMX exporter image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Specify docker-registry secret names as an array",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable Prometheus JMX exporter containers' Security Context",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "Set Prometheus JMX exporter containers' Security Context runAsUser",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set Prometheus JMX exporter containers' Security Context runAsNonRoot",
                                    "default": true
                                },
                                "allowPrivilegeEscalation": {
                                    "type": "boolean",
                                    "description": "Set Prometheus JMX exporter containers' Security Context allowPrivilegeEscalation",
                                    "default": false
                                },
                                "readOnlyRootFilesystem": {
                                    "type": "boolean",
                                    "description": "Set Prometheus JMX exporter containers' Security Context readOnlyRootFilesystem",
                                    "default": true
                                },
                                "capabilities": {
                                    "type": "object",
                                    "properties": {
                                        "drop": {
                                            "type": "array",
                                            "description": "Set Prometheus JMX exporter containers' Security Context capabilities to be dropped",
                                            "default": [
                                                "ALL"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "containerPorts": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "Prometheus JMX exporter metrics container port",
                                    "default": 5556
                                }
                            }
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the JMX exporter container",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the JMX exporter container",
                                    "default": {}
                                }
                            }
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "Prometheus JMX exporter metrics service port",
                                            "default": 5556
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Static clusterIP or None for headless services",
                                    "default": ""
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Control where client requests go, to the same pod or round-robin",
                                    "default": "None"
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.metrics.jmx.service.ports.metrics }}"
                                                },
                                                "io/path": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "/"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "whitelistObjectNames": {
                            "type": "array",
                            "description": "Allows setting which JMX objects you want to expose to via JMX stats to JMX exporter",
                            "default": [
                                "kafka.controller:*",
                                "kafka.server:*",
                                "java.lang:*",
                                "kafka.network:*",
                                "kafka.log:*"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "config": {
                            "type": "string",
                            "description": "Configuration file for JMX exporter",
                            "default": "jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:{{ .Values.metrics.jmx.kafkaJmxPort }}/jmxrmi\nlowercaseOutputName: true\nlowercaseOutputLabelNames: true\nssl: false\n{{- if .Values.metrics.jmx.whitelistObjectNames }}\nwhitelistObjectNames: [\"{{ join \"\\\",\\\"\" .Values.metrics.jmx.whitelistObjectNames }}\"]\n{{- end }}"
                        },
                        "existingConfigmap": {
                            "type": "string",
                            "description": "Name of existing ConfigMap with JMX exporter configuration",
                            "default": ""
                        },
                        "extraRules": {
                            "type": "string",
                            "description": "Add extra rules to JMX exporter configuration",
                            "default": ""
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (requires `metrics.kafka.enabled` or `metrics.jmx.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator PrometheusRule (requires `metrics.kafka.enabled` or `metrics.jmx.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "groups": {
                            "type": "array",
                            "description": "Prometheus Rule Groups for Kafka",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "provisioning": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable kafka provisioning Job",
                    "default": false
                },
                "numPartitions": {
                    "type": "number",
                    "description": "Default number of partitions for topics when unspecified",
                    "default": 1
                },
                "replicationFactor": {
                    "type": "number",
                    "description": "Default replication factor for topics when unspecified",
                    "default": 1
                },
                "topics": {
                    "type": "array",
                    "description": "Kafka topics to provision",
                    "default": [],
                    "items": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "extraProvisioningCommands": {
                    "type": "array",
                    "description": "Extra commands to run to provision cluster resources",
                    "default": [],
                    "items": {}
                },
                "parallel": {
                    "type": "number",
                    "description": "Number of provisioning commands to run at the same time",
                    "default": 1
                },
                "preScript": {
                    "type": "string",
                    "description": "Extra bash script to run before topic provisioning. $CLIENT_CONF is path to properties file with most needed configurations",
                    "default": ""
                },
                "postScript": {
                    "type": "string",
                    "description": "Extra bash script to run after topic provisioning. $CLIENT_CONF is path to properties file with most needed configurations",
                    "default": ""
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "tls": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Format to use for TLS certificates. Allowed types: `JKS` and `PEM`.",
                                    "default": "jks"
                                },
                                "certificatesSecret": {
                                    "type": "string",
                                    "description": "Existing secret containing the TLS certificates for the Kafka provisioning Job.",
                                    "default": ""
                                },
                                "cert": {
                                    "type": "string",
                                    "description": "The secret key from the certificatesSecret if 'cert' key different from the default (tls.crt)",
                                    "default": "tls.crt"
                                },
                                "key": {
                                    "type": "string",
                                    "description": "The secret key from the certificatesSecret if 'key' key different from the default (tls.key)",
                                    "default": "tls.key"
                                },
                                "caCert": {
                                    "type": "string",
                                    "description": "The secret key from the certificatesSecret if 'caCert' key different from the default (ca.crt)",
                                    "default": "ca.crt"
                                },
                                "keystore": {
                                    "type": "string",
                                    "description": "The secret key from the certificatesSecret if 'keystore' key different from the default (keystore.jks)",
                                    "default": "keystore.jks"
                                },
                                "truststore": {
                                    "type": "string",
                                    "description": "The secret key from the certificatesSecret if 'truststore' key different from the default (truststore.jks)",
                                    "default": "truststore.jks"
                                },
                                "passwordsSecret": {
                                    "type": "string",
                                    "description": "Name of the secret containing passwords to access the JKS files or PEM key when they are password-protected.",
                                    "default": ""
                                },
                                "keyPasswordSecretKey": {
                                    "type": "string",
                                    "description": "The secret key from the passwordsSecret if 'keyPasswordSecretKey' key different from the default (key-password)",
                                    "default": "key-password"
                                },
                                "keystorePasswordSecretKey": {
                                    "type": "string",
                                    "description": "The secret key from the passwordsSecret if 'keystorePasswordSecretKey' key different from the default (keystore-password)",
                                    "default": "keystore-password"
                                },
                                "truststorePasswordSecretKey": {
                                    "type": "string",
                                    "description": "The secret key from the passwordsSecret if 'truststorePasswordSecretKey' key different from the default (truststore-password)",
                                    "default": "truststore-password"
                                },
                                "keyPassword": {
                                    "type": "string",
                                    "description": "Password to access the password-protected PEM key if necessary. Ignored if 'passwordsSecret' is provided.",
                                    "default": ""
                                },
                                "keystorePassword": {
                                    "type": "string",
                                    "description": "Password to access the JKS keystore. Ignored if 'passwordsSecret' is provided.",
                                    "default": ""
                                },
                                "truststorePassword": {
                                    "type": "string",
                                    "description": "Password to access the JKS truststore. Ignored if 'passwordsSecret' is provided.",
                                    "default": ""
                                }
                            }
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override provisioning container command",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override provisioning container arguments",
                    "default": [],
                    "items": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Extra environment variables to add to the provisioning pod",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap with extra environment variables",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret with extra environment variables",
                    "default": ""
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Extra annotations for Kafka provisioning pods",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Kafka provisioning pods",
                    "default": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable creation of ServiceAccount for Kafka provisioning pods",
                            "default": false
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the service account to use. If not set and `create` is `true`, a name is generated",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                            "default": true
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Kafka provisioning container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Kafka provisioning container",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context for the pods",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Kafka provisioning pod's Security Context fsGroup",
                            "default": 1001
                        },
                        "seccompProfile": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Set Kafka provisioning pod's Security Context seccomp profile",
                                    "default": "RuntimeDefault"
                                }
                            }
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Kafka provisioning containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Kafka provisioning containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Kafka provisioning containers' Security Context runAsNonRoot",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Set Kafka provisioning containers' Security Context allowPrivilegeEscalation",
                            "default": false
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Set Kafka provisioning containers' Security Context readOnlyRootFilesystem",
                            "default": true
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Set Kafka provisioning containers' Security Context capabilities to be dropped",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default) for kafka provisioning",
                    "default": ""
                },
                "enableServiceLinks": {
                    "type": "boolean",
                    "description": "Whether information about services should be injected into pod's environment variable",
                    "default": true
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Kafka provisioning pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Kafka provisioning container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Kafka provisioning pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional Add init containers to the Kafka provisioning pod(s)",
                    "default": [],
                    "items": {}
                },
                "waitForKafka": {
                    "type": "boolean",
                    "description": "If true use an init container to wait until kafka is ready before starting provisioning",
                    "default": true
                }
            }
        },
        "kraft": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Switch to enable or disable the KRaft mode for Kafka",
                    "default": true
                },
                "clusterId": {
                    "type": "string",
                    "description": "Kafka Kraft cluster ID. If not set, a random cluster ID will be generated the first time Kraft is initialized.",
                    "default": ""
                },
                "controllerQuorumVoters": {
                    "type": "string",
                    "description": "Override the Kafka controller quorum voters of the Kafka Kraft cluster. If not set, it will be automatically configured to use all controller-elegible nodes.",
                    "default": ""
                }
            }
        },
        "zookeeperChrootPath": {
            "type": "string",
            "description": "Path which puts data under some path in the global ZooKeeper namespace",
            "default": ""
        },
        "zookeeper": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Switch to enable or disable the ZooKeeper helm chart. Must be false if you use KRaft mode.",
                    "default": false
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of ZooKeeper nodes",
                    "default": 1
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable ZooKeeper auth",
                                    "default": false
                                },
                                "clientUser": {
                                    "type": "string",
                                    "description": "User that will use ZooKeeper client (zkCli.sh) to authenticate. Must exist in the serverUsers comma-separated list.",
                                    "default": ""
                                },
                                "clientPassword": {
                                    "type": "string",
                                    "description": "Password that will use ZooKeeper client (zkCli.sh) to authenticate. Must exist in the serverPasswords comma-separated list.",
                                    "default": ""
                                },
                                "serverUsers": {
                                    "type": "string",
                                    "description": "Comma, semicolon or whitespace separated list of user to be created. Specify them as a string, for example: \"user1,user2,admin\"",
                                    "default": ""
                                },
                                "serverPasswords": {
                                    "type": "string",
                                    "description": "Comma, semicolon or whitespace separated list of passwords to assign to users when created. Specify them as a string, for example: \"pass4user1, pass4user2, pass4admin\"",
                                    "default": ""
                                }
                            }
                        }
                    }
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable persistence on ZooKeeper using PVC(s)",
                            "default": true
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "Persistent Volume storage class",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume access modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "Persistent Volume size",
                            "default": "8Gi"
                        }
                    }
                }
            }
        },
        "externalZookeeper": {
            "type": "object",
            "properties": {
                "servers": {
                    "type": "array",
                    "description": "List of external zookeeper servers to use. Typically used in combination with 'zookeeperChrootPath'. Must be empty if you use KRaft mode.",
                    "default": [],
                    "items": {}
                }
            }
        }
    }
}