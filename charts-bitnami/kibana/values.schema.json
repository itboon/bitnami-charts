{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template with a string (will prepend the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template with a string",
            "default": ""
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "A list of extra kubernetes resources to be deployed",
            "default": [],
            "items": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Kibana image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Kibana image repository",
                    "default": "bitnami/kibana"
                },
                "tag": {
                    "type": "string",
                    "description": "Kibana image tag (immutable tags are recommended)",
                    "default": "8.9.2-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "Kibana image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Kibana image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable %%MAIN_CONTAINER%% image debug mode",
                    "default": false
                }
            }
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of replicas of the Kibana Pod",
            "default": 1
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Set up update strategy for Kibana installation.",
                    "default": "RollingUpdate"
                }
            }
        },
        "schedulerName": {
            "type": "string",
            "description": "Alternative scheduler",
            "default": ""
        },
        "priorityClassName": {
            "type": "string",
            "description": "%%MAIN_CONTAINER_NAME%% pods' priorityClassName",
            "default": ""
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "In seconds, time the given to the %%MAIN_CONTAINER_NAME%% pod needs to terminate gracefully",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment",
            "default": [],
            "items": {}
        },
        "hostAliases": {
            "type": "array",
            "description": "Add deployment host aliases",
            "default": [],
            "items": {}
        },
        "plugins": {
            "type": "array",
            "description": "Array containing the Kibana plugins to be installed in deployment",
            "default": [],
            "items": {}
        },
        "savedObjects": {
            "type": "object",
            "properties": {
                "urls": {
                    "type": "array",
                    "description": "Array containing links to NDJSON files to be imported during Kibana initialization",
                    "default": [],
                    "items": {}
                },
                "configmap": {
                    "type": "string",
                    "description": "Configmap containing NDJSON files to be imported during Kibana initialization (evaluated as a template)",
                    "default": ""
                }
            }
        },
        "extraConfiguration": {
            "type": "object",
            "description": "Extra settings to be added to the default kibana.yml configmap that the chart creates (unless replaced using `configurationCM`). Evaluated as a template",
            "default": {}
        },
        "configurationCM": {
            "type": "string",
            "description": "ConfigMap containing a kibana.yml file that will replace the default one specified in configuration.yaml",
            "default": ""
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the %%MAIN_CONTAINER_NAME%% container(s) to automate configuration before or after startup",
            "default": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array containing extra env vars to configure Kibana",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "ConfigMap containing extra env vars to configure Kibana",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Secret containing extra env vars to configure Kibana (in case of sensitive data)",
            "default": ""
        },
        "extraVolumes": {
            "type": "array",
            "description": "Array to add extra volumes. Requires setting `extraVolumeMounts`",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Array to add extra mounts. Normally used with `extraVolumes`",
            "default": [],
            "items": {}
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes volume permissions in the data directory (for cases where the default k8s `runAsUser` and `fsUser` values do not work)",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image name",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Init container volume-permissions image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "description": "Volume Permissions resources",
                    "default": {}
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable persistence",
                    "default": true
                },
                "storageClass": {
                    "type": "string",
                    "description": "Kibana data Persistent Volume Storage Class",
                    "default": ""
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Provide an existing `PersistentVolumeClaim`",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "Persistent Volume access modes",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Size for the PV",
                    "default": "10Gi"
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                },
                "subPath": {
                    "type": "string",
                    "description": "The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services",
                    "default": ""
                },
                "selector": {
                    "type": "object",
                    "description": "Selector to match an existing Persistent Volume for WordPress data PVC",
                    "default": {}
                },
                "dataSource": {
                    "type": "object",
                    "description": "Custom PVC data source",
                    "default": {}
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable the startup probe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Delay before startup probe is initiated",
                    "default": 120
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "How often to perform the probe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "When the probe times out",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                    "default": 1
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable the Liveness probe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Delay before liveness probe is initiated",
                    "default": 120
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "How often to perform the probe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "When the probe times out",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable the Readiness probe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Delay before readiness probe is initiated",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "How often to perform the probe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "When the probe times out",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive successes for the probe to be considered successful after having failed.",
                    "default": 1
                }
            }
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom liveness probe for the Web component",
            "default": {}
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Custom liveness probe for the Web component",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Custom readiness probe for the Web component",
            "default": {}
        },
        "forceInitScripts": {
            "type": "boolean",
            "description": "Force execution of init scripts",
            "default": false
        },
        "initScriptsCM": {
            "type": "string",
            "description": "Configmap with init scripts to execute",
            "default": ""
        },
        "initScriptsSecret": {
            "type": "string",
            "description": "Secret with init scripts to execute (for sensitive data)",
            "default": ""
        },
        "service": {
            "type": "object",
            "properties": {
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Kubernetes Service port",
                            "default": 5601
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type",
                    "default": "ClusterIP"
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Specify the nodePort value for the LoadBalancer and NodePort service types",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "%%MAIN_CONTAINER_NAME%% service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "loadBalancerIP if Kibana service type is `LoadBalancer`",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "%%MAIN_CONTAINER_NAME%% service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Enable client source IP preservation",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for Kibana service (evaluated as a template)",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Extra labels for Kibana service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in the service (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress controller resource",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress Path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Override API Version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress resource. If specified as \"*\" no host rule is configured",
                    "default": "kibana.local"
                },
                "path": {
                    "type": "string",
                    "description": "The Path to Kibana. You may need to set this to '/*' in order to use this with ALB ingress controllers.",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the hostname defined at ingress.hostname parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "The list of additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "Additional arbitrary path/backend objects",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "extraRules": {
                    "type": "array",
                    "description": "The list of additional rules to be added to this ingress record. Evaluated as a template",
                    "default": [],
                    "items": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                    "default": {}
                }
            }
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "Port to expose at container level",
                    "default": 5601
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled %%MAIN_CONTAINER_NAME%% pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set %%MAIN_CONTAINER_NAME%% pod's Security Context fsGroup",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled %%MAIN_CONTAINER_NAME%% containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set %%MAIN_CONTAINER_NAME%% containers' Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set %%MAIN_CONTAINER_NAME%% container's Security Context runAsNonRoot",
                    "default": true
                }
            }
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the container",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the container",
                    "default": {}
                }
            }
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Pod annotations",
            "default": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels to add to Pod",
            "default": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Attach additional containers to the pod",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the pod",
            "default": [],
            "items": {}
        },
        "configuration": {
            "type": "object",
            "properties": {
                "server": {
                    "type": "object",
                    "properties": {
                        "basePath": {
                            "type": "string",
                            "description": "",
                            "default": ""
                        },
                        "rewriteBasePath": {
                            "type": "boolean",
                            "description": "",
                            "default": false
                        }
                    }
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Start a side-car prometheus exporter",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "80"
                                        },
                                        "io/path": {
                                            "type": "string",
                                            "description": "",
                                            "default": "_prometheus/metrics"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "If `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        }
                    }
                }
            }
        },
        "tls": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable SSL/TLS encryption for Kibana server (HTTPS)",
                    "default": false
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Create self-signed TLS certificates. Currently only supports PEM certificates.",
                    "default": false
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Name of the existing secret containing Kibana server certificates",
                    "default": ""
                },
                "usePemCerts": {
                    "type": "boolean",
                    "description": "Use this variable if your secrets contain PEM certificates instead of PKCS12",
                    "default": false
                },
                "keyPassword": {
                    "type": "string",
                    "description": "Password to access the PEM key when it is password-protected.",
                    "default": ""
                },
                "keystorePassword": {
                    "type": "string",
                    "description": "Password to access the PKCS12 keystore when it is password-protected.",
                    "default": ""
                },
                "passwordsSecret": {
                    "type": "string",
                    "description": "Name of a existing secret containing the Keystore or PEM key password",
                    "default": ""
                }
            }
        },
        "elasticsearch": {
            "type": "object",
            "properties": {
                "hosts": {
                    "type": "array",
                    "description": "List of elasticsearch hosts to connect to.",
                    "default": [],
                    "items": {}
                },
                "port": {
                    "type": "string",
                    "description": "Elasticsearch port",
                    "default": ""
                },
                "security": {
                    "type": "object",
                    "properties": {
                        "auth": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Set to 'true' if Elasticsearch has authentication enabled",
                                    "default": false
                                },
                                "kibanaPassword": {
                                    "type": "string",
                                    "description": "Password of the 'kibana_system' user, used to authenticate Kibana connection with Elasticsearch.",
                                    "default": ""
                                },
                                "existingSecret": {
                                    "type": "string",
                                    "description": "Name of the existing secret containing the password for the 'kibana_system' user.",
                                    "default": ""
                                },
                                "createSystemUser": {
                                    "type": "boolean",
                                    "description": "If enabled, Kibana will use Elasticsearch API to create the 'kibana_system' user at startup.",
                                    "default": false
                                },
                                "elasticsearchPasswordSecret": {
                                    "type": "string",
                                    "description": "Name of the existing secret containing the password for the 'elastic' user.",
                                    "default": ""
                                }
                            }
                        },
                        "tls": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Set to 'true' if Elasticsearch API uses TLS/SSL (HTTPS)",
                                    "default": false
                                },
                                "verificationMode": {
                                    "type": "string",
                                    "description": "Verification mode for SSL communications.",
                                    "default": "full"
                                },
                                "existingSecret": {
                                    "type": "string",
                                    "description": "Name of the existing secret containing Elasticsearch Truststore or CA certificate. Required unless verificationMode=none",
                                    "default": ""
                                },
                                "usePemCerts": {
                                    "type": "boolean",
                                    "description": "Set to 'true' to use PEM certificates instead of PKCS12.",
                                    "default": false
                                },
                                "truststorePassword": {
                                    "type": "string",
                                    "description": "Password to access the PKCS12 trustore in case it is password-protected.",
                                    "default": ""
                                },
                                "passwordsSecret": {
                                    "type": "string",
                                    "description": "Name of a existing secret containing the Truststore password",
                                    "default": ""
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}