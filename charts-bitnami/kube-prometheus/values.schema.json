{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override `kube-prometheus.name` template with a string (will prepend the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override `kube-prometheus.fullname` template with a string",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "operator": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy Prometheus Operator to the cluster",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Prometheus Operator image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Prometheus Operator image repository",
                            "default": "bitnami/prometheus-operator"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Prometheus Operator image tag (immutable tags are recommended)",
                            "default": "0.68.0-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Prometheus Operator image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Prometheus Operator image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "extraArgs": {
                    "type": "array",
                    "description": "Additional arguments passed to Prometheus Operator",
                    "default": [],
                    "items": {}
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the Prometheus Operator container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Prometheus Operator nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for Prometheus Operator nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for Prometheus Operator nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Prometheus Operator pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Prometheus Operator container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Prometheus Operator pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Prometheus Operator pod(s)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specify whether to create a ServiceAccount for Prometheus Operator",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to create",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the Kubernetess scheduler (other than default)",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "In seconds, time the given to the Prometheus Operator pod needs to terminate gracefully",
                    "default": ""
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable pod security context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the container",
                            "default": 1001
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for the container filesystem",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable container security context",
                            "default": true
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Linux Kernel capabilities which should be dropped",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Force the container to run as a non root user",
                            "default": true
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Switch privilegeEscalation possibility on or off",
                            "default": false
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Mount / (root) as a readonly filesystem",
                            "default": false
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Prometheus Operator service port",
                                    "default": 8080
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Specific cluster IP when service type is cluster IP. Use `None` for headless service",
                            "default": ""
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Kubernetes Service nodePort",
                                    "default": ""
                                }
                            }
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "`loadBalancerIP` if service type is `LoadBalancer`",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address that are allowed when svc is `LoadBalancer`",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Enable client source IP preservation",
                            "default": "Cluster"
                        },
                        "healthCheckNodePort": {
                            "type": "string",
                            "description": "Specifies the health check node port (numeric port number) for the service if `externalTrafficPolicy` is set to Local.",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels for Prometheus Operator service",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional annotations for Prometheus Operator service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Creates a ServiceMonitor to monitor Prometheus Operator",
                            "default": true
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        },
                        "extraParameters": {
                            "type": "object",
                            "description": "Any extra parameter to be added to the endpoint configured in the ServiceMonitor",
                            "default": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "description": "Configure resource requests and limits",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Prometheus Operator Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Prometheus Operator Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Prometheus Operator Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Prometheus Operator Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Prometheus Operator Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Prometheus Operator Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Prometheus Operator Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Prometheus Operator pods",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Prometheus Operator pods",
                    "default": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class assigned to the Pods",
                    "default": ""
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off liveness probe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before liveness probe is initiated",
                            "default": 120
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off readiness probe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before readiness probe is initiated",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off startup probe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before startup probe is initiated",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level for Prometheus Operator",
                    "default": "info"
                },
                "logFormat": {
                    "type": "string",
                    "description": "Log format for Prometheus Operator",
                    "default": "logfmt"
                },
                "configReloaderResources": {
                    "type": "object",
                    "description": "Set the prometheus config reloader side-car CPU and memory requests and limits.",
                    "default": {}
                },
                "kubeletService": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "If true, the operator will create and maintain a service for scraping kubelets",
                            "default": true
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace to deploy the kubelet service",
                            "default": "kube-system"
                        }
                    }
                },
                "prometheusConfigReloader": {
                    "type": "object",
                    "properties": {
                        "image": {
                            "type": "object",
                            "description": "Prometheus Config Reloader image. If not set, the same as `operator.image.registry`",
                            "default": {}
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable container security context",
                                    "default": true
                                },
                                "readOnlyRootFilesystem": {
                                    "type": "boolean",
                                    "description": "mount / (root) as a readonly filesystem",
                                    "default": false
                                },
                                "allowPrivilegeEscalation": {
                                    "type": "boolean",
                                    "description": "Switch privilegeEscalation possibility on or off",
                                    "default": false
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Force the container to run as a non root user",
                                    "default": true
                                },
                                "capabilities": {
                                    "type": "object",
                                    "properties": {
                                        "drop": {
                                            "type": "array",
                                            "description": "Linux Kernel capabilities which should be dropped",
                                            "default": [
                                                "ALL"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "livenessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Turn on and off liveness probe",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Delay before liveness probe is initiated",
                                    "default": 10
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "How often to perform the probe",
                                    "default": 10
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "When the probe times out",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive failures for the probe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive successes for the probe",
                                    "default": 1
                                }
                            }
                        },
                        "readinessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Turn on and off readiness probe",
                                    "default": true
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Delay before readiness probe is initiated",
                                    "default": 15
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "How often to perform the probe",
                                    "default": 20
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "When the probe times out",
                                    "default": 5
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive failures for the probe",
                                    "default": 6
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive successes for the probe",
                                    "default": 1
                                }
                            }
                        }
                    }
                },
                "namespaces": {
                    "type": "string",
                    "description": "Optional comma-separated list of namespaces to watch (default=all).",
                    "default": ""
                }
            }
        },
        "prometheus": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy Prometheus to the cluster",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Prometheus image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Prometheus image repository",
                            "default": "bitnami/prometheus"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Prometheus image tag (immutable tags are recommended)",
                            "default": "2.47.0-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Prometheus image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specify whether to create a ServiceAccount for Prometheus",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to create",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional annotations for created Prometheus ServiceAccount",
                            "default": {}
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the container",
                            "default": 1001
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for the container filesystem",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable container security context",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "Mount / (root) as a readonly filesystem",
                            "default": false
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Switch privilegeEscalation possibility on or off",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Force the container to run as a non root user",
                            "default": true
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Linux Kernel capabilities which should be dropped",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Create a pod disruption budget for Prometheus",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number / percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number / percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Prometheus service port",
                                    "default": 9090
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Specific cluster IP when service type is cluster IP. Use `None` for headless service",
                            "default": ""
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Specify the nodePort value for the LoadBalancer and NodePort service types.",
                                    "default": ""
                                }
                            }
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "`loadBalancerIP` if service type is `LoadBalancer`",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address that are allowed when service is `LoadBalancer`",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Enable client source IP preservation",
                            "default": "Cluster"
                        },
                        "healthCheckNodePort": {
                            "type": "string",
                            "description": "Specifies the health check node port",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels for Prometheus service  (this value is evaluated as a template)",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional annotations for Prometheus service  (this value is evaluated as a template)",
                            "default": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Creates a ServiceMonitor to monitor Prometheus itself",
                            "default": true
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "ingress": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable ingress controller resource",
                            "default": false
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Ingress Path type",
                            "default": "ImplementationSpecific"
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Override API Version (automatically detected if not set)",
                            "default": ""
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Default host for the ingress resource",
                            "default": "prometheus.local"
                        },
                        "path": {
                            "type": "string",
                            "description": "The Path to Prometheus. You may need to set this to '/*' in order to use this with ALB ingress controllers",
                            "default": "/"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                            "default": {}
                        },
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS configuration for the hostname defined at prometheus.ingress.hostname parameter",
                            "default": false
                        },
                        "selfSigned": {
                            "type": "boolean",
                            "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "The list of additional hostnames to be covered with this ingress record.",
                            "default": [],
                            "items": {}
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "Additional arbitrary path/backend objects",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                            "default": [],
                            "items": {}
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "externalUrl": {
                    "type": "string",
                    "description": "External URL used to access Prometheus",
                    "default": ""
                },
                "resources": {
                    "type": "object",
                    "description": "CPU/Memory resource requests/limits for node",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Prometheus Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Prometheus Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Prometheus Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Prometheus Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Prometheus Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Prometheus Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Prometheus Node labels for pod assignment",
                    "default": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Prometheus Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Prometheus Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "scrapeInterval": {
                    "type": "string",
                    "description": "Interval between consecutive scrapes",
                    "default": ""
                },
                "evaluationInterval": {
                    "type": "string",
                    "description": "Interval between consecutive evaluations",
                    "default": ""
                },
                "scrapeTimeout": {
                    "type": "string",
                    "description": "Timeout after which the global scrape is ended",
                    "default": ""
                },
                "sampleLimit": {
                    "type": "string",
                    "description": "Per-scrape max number of scraped samples. Requires Prometheus v2.45.0 and newer",
                    "default": ""
                },
                "enforcedSampleLimit": {
                    "type": "string",
                    "description": "Override sampleLimits set by ServiceMonitor, PodMonitor or Probe objects",
                    "default": ""
                },
                "listenLocal": {
                    "type": "boolean",
                    "description": "ListenLocal makes the Prometheus server listen on loopback",
                    "default": false
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off liveness probe",
                            "default": true
                        },
                        "path": {
                            "type": "string",
                            "description": "Path of the HTTP service for checking the healthy state",
                            "default": "/-/healthy"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before liveness probe is initiated",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 10
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off readiness probe",
                            "default": true
                        },
                        "path": {
                            "type": "string",
                            "description": "Path of the HTTP service for checking the ready state",
                            "default": "/-/ready"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before readiness probe is initiated",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 10
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off readiness probe",
                            "default": true
                        },
                        "path": {
                            "type": "string",
                            "description": "Path of the HTTP service for checking the ready state",
                            "default": "/-/ready"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before readiness probe is initiated",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 15
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 60
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "enableAdminAPI": {
                    "type": "boolean",
                    "description": "Enable Prometheus adminitrative API",
                    "default": false
                },
                "enableFeatures": {
                    "type": "array",
                    "description": "Enable access to Prometheus disabled features.",
                    "default": [],
                    "items": {}
                },
                "alertingEndpoints": {
                    "type": "array",
                    "description": "Alertmanagers to which alerts will be sent",
                    "default": [],
                    "items": {}
                },
                "externalLabels": {
                    "type": "object",
                    "description": "External labels to add to any time series or alerts when communicating with external systems",
                    "default": {}
                },
                "replicaExternalLabelName": {
                    "type": "string",
                    "description": "Name of the external label used to denote replica name",
                    "default": ""
                },
                "replicaExternalLabelNameClear": {
                    "type": "boolean",
                    "description": "Clear external label used to denote replica name",
                    "default": false
                },
                "routePrefix": {
                    "type": "string",
                    "description": "Prefix used to register routes, overriding externalUrl route",
                    "default": "/"
                },
                "prometheusExternalLabelName": {
                    "type": "string",
                    "description": "Name of the external label used to denote Prometheus instance name",
                    "default": ""
                },
                "prometheusExternalLabelNameClear": {
                    "type": "boolean",
                    "description": "Clear external label used to denote Prometheus instance name",
                    "default": false
                },
                "secrets": {
                    "type": "array",
                    "description": "Secrets that should be mounted into the Prometheus Pods",
                    "default": [],
                    "items": {}
                },
                "configMaps": {
                    "type": "array",
                    "description": "ConfigMaps that should be mounted into the Prometheus Pods",
                    "default": [],
                    "items": {}
                },
                "querySpec": {
                    "type": "object",
                    "description": "The query command line flags when starting Prometheus",
                    "default": {}
                },
                "ruleNamespaceSelector": {
                    "type": "object",
                    "description": "Namespaces to be selected for PrometheusRules discovery",
                    "default": {}
                },
                "ruleSelector": {
                    "type": "object",
                    "description": "PrometheusRules to be selected for target discovery",
                    "default": {}
                },
                "serviceMonitorSelector": {
                    "type": "object",
                    "description": "ServiceMonitors to be selected for target discovery",
                    "default": {}
                },
                "serviceMonitorNamespaceSelector": {
                    "type": "object",
                    "description": "Namespaces to be selected for ServiceMonitor discovery",
                    "default": {}
                },
                "podMonitorSelector": {
                    "type": "object",
                    "description": "PodMonitors to be selected for target discovery.",
                    "default": {}
                },
                "podMonitorNamespaceSelector": {
                    "type": "object",
                    "description": "Namespaces to be selected for PodMonitor discovery",
                    "default": {}
                },
                "probeSelector": {
                    "type": "object",
                    "description": "Probes to be selected for target discovery.",
                    "default": {}
                },
                "probeNamespaceSelector": {
                    "type": "object",
                    "description": "Namespaces to be selected for Probe discovery",
                    "default": {}
                },
                "scrapeConfigSelector": {
                    "type": "object",
                    "description": "ScrapeConfig to be selected for target discovery.",
                    "default": {}
                },
                "scrapeConfigNamespaceSelector": {
                    "type": "object",
                    "description": "Namespaces to be selected for ScrapeConfig discovery",
                    "default": {}
                },
                "retention": {
                    "type": "string",
                    "description": "Metrics retention days",
                    "default": "10d"
                },
                "retentionSize": {
                    "type": "string",
                    "description": "Maximum size of metrics",
                    "default": ""
                },
                "disableCompaction": {
                    "type": "boolean",
                    "description": "Disable the compaction of the Prometheus TSDB",
                    "default": false
                },
                "walCompression": {
                    "type": "boolean",
                    "description": "Enable compression of the write-ahead log using Snappy",
                    "default": false
                },
                "paused": {
                    "type": "boolean",
                    "description": "If true, the Operator won't process any Prometheus configuration changes",
                    "default": false
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Prometheus replicas desired",
                    "default": 1
                },
                "shards": {
                    "type": "number",
                    "description": "Number of Prometheus shards desired",
                    "default": 1
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level for Prometheus",
                    "default": "info"
                },
                "logFormat": {
                    "type": "string",
                    "description": "Log format for Prometheus",
                    "default": "logfmt"
                },
                "podMetadata": {
                    "type": "object",
                    "properties": {
                        "labels": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        }
                    }
                },
                "remoteRead": {
                    "type": "array",
                    "description": "The remote_read spec configuration for Prometheus",
                    "default": [],
                    "items": {}
                },
                "remoteWrite": {
                    "type": "array",
                    "description": "The remote_write spec configuration for Prometheus",
                    "default": [],
                    "items": {}
                },
                "enableRemoteWriteReceiver": {
                    "type": "boolean",
                    "description": "Enable Prometheus to be used as a receiver for the Prometheus remote write protocol.",
                    "default": false
                },
                "storageSpec": {
                    "type": "object",
                    "description": "Prometheus StorageSpec for persistent data",
                    "default": {}
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Use PVCs to persist data. If the storageSpec is provided this will not take effect.",
                            "default": false
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "Persistent Volume Storage Class",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume Access Modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "Persistent Volume Size",
                            "default": "8Gi"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Persistent Volume Claim annotations",
                            "default": {}
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class assigned to the Pods",
                    "default": ""
                },
                "containers": {
                    "type": "array",
                    "description": "Containers allows injecting additional containers",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the prometheus pod(s)",
                    "default": [],
                    "items": {}
                },
                "volumes": {
                    "type": "array",
                    "description": "Volumes allows configuration of additional volumes",
                    "default": [],
                    "items": {}
                },
                "volumeMounts": {
                    "type": "array",
                    "description": "VolumeMounts allows configuration of additional VolumeMounts. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "additionalPrometheusRules": {
                    "type": "array",
                    "description": "PrometheusRule defines recording and alerting rules for a Prometheus instance.",
                    "default": [],
                    "items": {}
                },
                "additionalArgs": {
                    "type": "array",
                    "description": "Allows setting additional arguments for the Prometheus container",
                    "default": [],
                    "items": {}
                },
                "additionalScrapeConfigs": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable additional scrape configs",
                            "default": false
                        },
                        "type": {
                            "type": "string",
                            "description": "Indicates if the cart should use external additional scrape configs or internal configs",
                            "default": "external"
                        },
                        "external": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Name of the secret that Prometheus should use for the additional external scrape configuration",
                                    "default": ""
                                },
                                "key": {
                                    "type": "string",
                                    "description": "Name of the key inside the secret to be used for the additional external scrape configuration",
                                    "default": ""
                                }
                            }
                        },
                        "internal": {
                            "type": "object",
                            "properties": {
                                "jobList": {
                                    "type": "array",
                                    "description": "A list of Prometheus scrape jobs",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "additionalScrapeConfigsExternal": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Deprecated: Enable additional scrape configs that are managed externally to this chart",
                            "default": false
                        },
                        "name": {
                            "type": "string",
                            "description": "Deprecated: Name of the secret that Prometheus should use for the additional scrape configuration",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Deprecated: Name of the key inside the secret to be used for the additional scrape configuration",
                            "default": ""
                        }
                    }
                },
                "additionalAlertRelabelConfigsExternal": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable additional Prometheus alert relabel configs that are managed externally to this chart",
                            "default": false
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the secret that Prometheus should use for the additional Prometheus alert relabel configuration",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Name of the key inside the secret to be used for the additional Prometheus alert relabel configuration",
                            "default": ""
                        }
                    }
                },
                "additionalAlertManagerExternal": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable additional Prometheus AlertManager configs that are managed externally to this chart",
                            "default": false
                        },
                        "name": {
                            "type": "string",
                            "description": "Name of the secret that Prometheus should use for the additional Prometheus AlertManager configuration",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Name of the key inside the secret to be used for the additional Prometheus AlertManager configuration",
                            "default": ""
                        }
                    }
                },
                "thanos": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Create a Thanos sidecar container",
                            "default": false
                        },
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "Thanos image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "Thanos image name",
                                    "default": "bitnami/thanos"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "Thanos image tag",
                                    "default": "0.32.2-debian-11-r5"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "Thanos image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "Thanos image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Specify docker-registry secret names as an array",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable container security context",
                                    "default": true
                                },
                                "readOnlyRootFilesystem": {
                                    "type": "boolean",
                                    "description": "mount / (root) as a readonly filesystem",
                                    "default": false
                                },
                                "allowPrivilegeEscalation": {
                                    "type": "boolean",
                                    "description": "Switch privilegeEscalation possibility on or off",
                                    "default": false
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Force the container to run as a non root user",
                                    "default": true
                                },
                                "capabilities": {
                                    "type": "object",
                                    "properties": {
                                        "drop": {
                                            "type": "array",
                                            "description": "Linux Kernel capabilities which should be dropped",
                                            "default": [
                                                "ALL"
                                            ],
                                            "items": {
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        "prometheusUrl": {
                            "type": "string",
                            "description": "Override default prometheus url `http://localhost:9090`",
                            "default": ""
                        },
                        "extraArgs": {
                            "type": "array",
                            "description": "Additional arguments passed to the thanos sidecar container",
                            "default": [],
                            "items": {}
                        },
                        "objectStorageConfig": {
                            "type": "object",
                            "properties": {
                                "secretName": {
                                    "type": "string",
                                    "description": "Support mounting a Secret for the objectStorageConfig of the sideCar container.",
                                    "default": ""
                                },
                                "secretKey": {
                                    "type": "string",
                                    "description": "Secret key with the configuration file.",
                                    "default": "thanos.yaml"
                                }
                            }
                        },
                        "extraVolumeMounts": {
                            "type": "array",
                            "description": "Additional volumeMounts from `prometheus.volumes` for thanos sidecar container",
                            "default": [],
                            "items": {}
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the Thanos sidecar container",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The resources requests for the Thanos sidecar container",
                                    "default": {}
                                }
                            }
                        },
                        "livenessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Turn on and off liveness probe",
                                    "default": true
                                },
                                "path": {
                                    "type": "string",
                                    "description": "Path of the HTTP service for checking the healthy state",
                                    "default": "/-/healthy"
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Delay before liveness probe is initiated",
                                    "default": 0
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "How often to perform the probe",
                                    "default": 5
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "When the probe times out",
                                    "default": 3
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive failures for the probe",
                                    "default": 120
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive successes for the probe",
                                    "default": 1
                                }
                            }
                        },
                        "readinessProbe": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Turn on and off readiness probe",
                                    "default": true
                                },
                                "path": {
                                    "type": "string",
                                    "description": "Path of the HTTP service for checking the ready state",
                                    "default": "/-/ready"
                                },
                                "initialDelaySeconds": {
                                    "type": "number",
                                    "description": "Delay before readiness probe is initiated",
                                    "default": 0
                                },
                                "periodSeconds": {
                                    "type": "number",
                                    "description": "How often to perform the probe",
                                    "default": 5
                                },
                                "timeoutSeconds": {
                                    "type": "number",
                                    "description": "When the probe times out",
                                    "default": 3
                                },
                                "failureThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive failures for the probe",
                                    "default": 120
                                },
                                "successThreshold": {
                                    "type": "number",
                                    "description": "Minimum consecutive successes for the probe",
                                    "default": 1
                                }
                            }
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Kubernetes service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "grpc": {
                                            "type": "number",
                                            "description": "Thanos service port",
                                            "default": 10901
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Specific cluster IP when service type is cluster IP. Use `None` to create headless service by default.",
                                    "default": "None"
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "grpc": {
                                            "type": "string",
                                            "description": "Specify the nodePort value for the LoadBalancer and NodePort service types.",
                                            "default": ""
                                        }
                                    }
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "`loadBalancerIP` if service type is `LoadBalancer`",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Address that are allowed when svc is `LoadBalancer`",
                                    "default": [],
                                    "items": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Additional labels for Thanos service",
                                    "default": {}
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional annotations for Thanos service",
                                    "default": {}
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Additional ports to expose from the Thanos sidecar container",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Prometheus service external traffic policy",
                                    "default": "Cluster"
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "ingress": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable ingress controller resource",
                                    "default": false
                                },
                                "pathType": {
                                    "type": "string",
                                    "description": "Ingress path type",
                                    "default": "ImplementationSpecific"
                                },
                                "apiVersion": {
                                    "type": "string",
                                    "description": "Force Ingress API version (automatically detected if not set)",
                                    "default": ""
                                },
                                "hostname": {
                                    "type": "string",
                                    "description": "Default host for the ingress record",
                                    "default": "thanos.prometheus.local"
                                },
                                "path": {
                                    "type": "string",
                                    "description": "Default path for the ingress record",
                                    "default": "/"
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                                    "default": {}
                                },
                                "ingressClassName": {
                                    "type": "string",
                                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                                    "default": ""
                                },
                                "tls": {
                                    "type": "boolean",
                                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                                    "default": false
                                },
                                "selfSigned": {
                                    "type": "boolean",
                                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                                    "default": false
                                },
                                "extraHosts": {
                                    "type": "array",
                                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                                    "default": [],
                                    "items": {}
                                },
                                "extraPaths": {
                                    "type": "array",
                                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                                    "default": [],
                                    "items": {}
                                },
                                "extraTls": {
                                    "type": "array",
                                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                                    "default": [],
                                    "items": {}
                                },
                                "secrets": {
                                    "type": "array",
                                    "description": "Custom TLS certificates as secrets",
                                    "default": [],
                                    "items": {}
                                },
                                "extraRules": {
                                    "type": "array",
                                    "description": "The list of additional rules to be added to this ingress record. Evaluated as a template",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "configReloader": {
                    "type": "object",
                    "properties": {
                        "service": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable config-reloader sidecar service",
                                    "default": false
                                },
                                "type": {
                                    "type": "string",
                                    "description": "Kubernetes service type",
                                    "default": "ClusterIP"
                                },
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "number",
                                            "description": "config-reloader sidecar container service port",
                                            "default": 8080
                                        }
                                    }
                                },
                                "clusterIP": {
                                    "type": "string",
                                    "description": "Specific cluster IP when service type is cluster IP. Use `None` to create headless service by default.",
                                    "default": "None"
                                },
                                "nodePorts": {
                                    "type": "object",
                                    "properties": {
                                        "http": {
                                            "type": "string",
                                            "description": "Specify the nodePort value for the LoadBalancer and NodePort service types.",
                                            "default": ""
                                        }
                                    }
                                },
                                "loadBalancerIP": {
                                    "type": "string",
                                    "description": "`loadBalancerIP` if service type is `LoadBalancer`",
                                    "default": ""
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Address that are allowed when svc is `LoadBalancer`",
                                    "default": [],
                                    "items": {}
                                },
                                "labels": {
                                    "type": "object",
                                    "description": "Additional labels for Prometheus service",
                                    "default": {}
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Additional annotations for Prometheus service",
                                    "default": {}
                                },
                                "extraPorts": {
                                    "type": "array",
                                    "description": "Additional ports to expose from the config-reloader sidecar container",
                                    "default": [],
                                    "items": {}
                                },
                                "externalTrafficPolicy": {
                                    "type": "string",
                                    "description": "Prometheus service external traffic policy",
                                    "default": "Cluster"
                                },
                                "sessionAffinity": {
                                    "type": "string",
                                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                                    "default": "None"
                                },
                                "sessionAffinityConfig": {
                                    "type": "object",
                                    "description": "Additional settings for the sessionAffinity",
                                    "default": {}
                                }
                            }
                        },
                        "serviceMonitor": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Creates a ServiceMonitor to monitor Prometheus config-reloader sidecar",
                                    "default": false
                                },
                                "interval": {
                                    "type": "string",
                                    "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                                    "default": ""
                                },
                                "path": {
                                    "type": "string",
                                    "description": "HTTP path to scrape for metrics",
                                    "default": "/metrics"
                                },
                                "jobLabel": {
                                    "type": "string",
                                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                                    "default": ""
                                },
                                "metricRelabelings": {
                                    "type": "array",
                                    "description": "Metric relabeling",
                                    "default": [],
                                    "items": {}
                                },
                                "relabelings": {
                                    "type": "array",
                                    "description": "Relabel configs",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        }
                    }
                },
                "portName": {
                    "type": "string",
                    "description": "Port name used for the pods and governing service. This defaults to web",
                    "default": "web"
                }
            }
        },
        "alertmanager": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy Alertmanager to the cluster",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Prometheus image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Prometheus image repository",
                            "default": "bitnami/alertmanager"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Prometheus image tag (immutable tags are recommended)",
                            "default": "0.26.0-debian-11-r14"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Prometheus image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Specify whether to create a ServiceAccount for Alertmanager",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to create",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Automount service account token for the server service account",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable security context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the container",
                            "default": 1001
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for the container filesystem",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable container security context",
                            "default": true
                        },
                        "readOnlyRootFilesystem": {
                            "type": "boolean",
                            "description": "mount / (root) as a readonly filesystem",
                            "default": false
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Switch privilegeEscalation possibility on or off",
                            "default": false
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Force the container to run as a non root user",
                            "default": true
                        },
                        "capabilities": {
                            "type": "object",
                            "properties": {
                                "drop": {
                                    "type": "array",
                                    "description": "Linux Kernel capabilities which should be dropped",
                                    "default": [
                                        "ALL"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Create a pod disruption budget for Alertmanager",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number / percentage of pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number / percentage of pods that may be made unavailable",
                            "default": ""
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Alertmanager service port",
                                    "default": 9093
                                }
                            }
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Specific cluster IP when service type is cluster IP. Use `None` for headless service",
                            "default": ""
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Specify the nodePort value for the LoadBalancer and NodePort service types.",
                                    "default": ""
                                }
                            }
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "`loadBalancerIP` if service type is `LoadBalancer`",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Address that are allowed when svc is `LoadBalancer`",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Enable client source IP preservation",
                            "default": "Cluster"
                        },
                        "healthCheckNodePort": {
                            "type": "string",
                            "description": "Specifies the health check node port",
                            "default": ""
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose (normally used with the `sidecar` value)",
                            "default": [],
                            "items": {}
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional annotations for Alertmanager service (this value is evaluated as a template)",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Creates a ServiceMonitor to monitor Alertmanager",
                            "default": true
                        },
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval. If not set, the Prometheus default scrape interval is used.",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "selector": {
                            "type": "object",
                            "description": "ServiceMonitor selector labels",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        },
                        "extraParameters": {
                            "type": "object",
                            "description": "Any extra parameter to be added to the endpoint configured in the ServiceMonitor",
                            "default": {}
                        }
                    }
                },
                "ingress": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable ingress controller resource",
                            "default": false
                        },
                        "pathType": {
                            "type": "string",
                            "description": "Ingress Path type",
                            "default": "ImplementationSpecific"
                        },
                        "apiVersion": {
                            "type": "string",
                            "description": "Override API Version (automatically detected if not set)",
                            "default": ""
                        },
                        "hostname": {
                            "type": "string",
                            "description": "Default host for the ingress resource",
                            "default": "alertmanager.local"
                        },
                        "path": {
                            "type": "string",
                            "description": "The Path to Alert Manager. You may need to set this to '/*' in order to use this with ALB ingress controllers.",
                            "default": "/"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                            "default": {}
                        },
                        "ingressClassName": {
                            "type": "string",
                            "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                            "default": ""
                        },
                        "tls": {
                            "type": "boolean",
                            "description": "Enable TLS configuration for the hostname defined at alertmanager.ingress.hostname parameter",
                            "default": false
                        },
                        "selfSigned": {
                            "type": "boolean",
                            "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                            "default": false
                        },
                        "extraHosts": {
                            "type": "array",
                            "description": "The list of additional hostnames to be covered with this ingress record.",
                            "default": [],
                            "items": {}
                        },
                        "extraPaths": {
                            "type": "array",
                            "description": "Additional arbitrary path/backend objects",
                            "default": [],
                            "items": {}
                        },
                        "extraTls": {
                            "type": "array",
                            "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                            "default": [],
                            "items": {}
                        },
                        "secrets": {
                            "type": "array",
                            "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                            "default": [],
                            "items": {}
                        },
                        "extraRules": {
                            "type": "array",
                            "description": "Additional rules to be covered with this ingress record",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "externalUrl": {
                    "type": "string",
                    "description": "External URL used to access Alertmanager",
                    "default": ""
                },
                "resources": {
                    "type": "object",
                    "description": "CPU/Memory resource requests/limits for node",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Alertmanager Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Alertmanager Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Alertmanager Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Alertmanager Node label key to match Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Alertmanager Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Alertmanager Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Alertmanager Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Alertmanager Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "config": {
                    "type": "object",
                    "properties": {
                        "global": {
                            "type": "object",
                            "properties": {
                                "resolve_timeout": {
                                    "type": "string",
                                    "description": "",
                                    "default": "5m"
                                }
                            }
                        },
                        "route": {
                            "type": "object",
                            "properties": {
                                "group_wait": {
                                    "type": "string",
                                    "description": "",
                                    "default": "30s"
                                },
                                "group_interval": {
                                    "type": "string",
                                    "description": "",
                                    "default": "5m"
                                },
                                "repeat_interval": {
                                    "type": "string",
                                    "description": "",
                                    "default": "12h"
                                },
                                "receiver": {
                                    "type": "string",
                                    "description": "",
                                    "default": null
                                },
                                "routes": {
                                    "type": "array",
                                    "description": "",
                                    "items": {
                                        "type": "object",
                                        "properties": {
                                            "match": {
                                                "type": "object",
                                                "properties": {
                                                    "alertname": {
                                                        "type": "string",
                                                        "description": ""
                                                    }
                                                }
                                            },
                                            "receiver": {
                                                "type": "string",
                                                "description": ""
                                            }
                                        }
                                    }
                                },
                                "group_by": {
                                    "type": "array",
                                    "description": "",
                                    "default": [
                                        "job"
                                    ],
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "receivers": {
                            "type": "array",
                            "description": "",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "templateFiles": {
                    "type": "object",
                    "description": "Extra files to be added inside the `alertmanager-{{ template \"kube-prometheus.alertmanager.fullname\" . }}` secret.",
                    "default": {}
                },
                "externalConfig": {
                    "type": "boolean",
                    "description": "Alertmanager configuration is created externally. If true, `alertmanager.config` is ignored, and a secret will not be created.",
                    "default": false
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Alertmanager replicas desired",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off liveness probe",
                            "default": true
                        },
                        "path": {
                            "type": "string",
                            "description": "Path of the HTTP service for checking the healthy state",
                            "default": "/-/healthy"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before liveness probe is initiated",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 120
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Turn on and off readiness probe",
                            "default": true
                        },
                        "path": {
                            "type": "string",
                            "description": "Path of the HTTP service for checking the ready state",
                            "default": "/-/ready"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Delay before readiness probe is initiated",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "How often to perform the probe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "When the probe times out",
                            "default": 3
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive failures for the probe",
                            "default": 120
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Minimum consecutive successes for the probe",
                            "default": 1
                        }
                    }
                },
                "podMetadata": {
                    "type": "object",
                    "properties": {
                        "labels": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        }
                    }
                },
                "logLevel": {
                    "type": "string",
                    "description": "Log level for Alertmanager",
                    "default": "info"
                },
                "logFormat": {
                    "type": "string",
                    "description": "Log format for Alertmanager",
                    "default": "logfmt"
                },
                "secrets": {
                    "type": "array",
                    "description": "Secrets that should be mounted into the Alertmanager Pods",
                    "default": [],
                    "items": {}
                },
                "configMaps": {
                    "type": "array",
                    "description": "ConfigMaps that should be mounted into the Alertmanager Pods",
                    "default": [],
                    "items": {}
                },
                "retention": {
                    "type": "string",
                    "description": "Metrics retention days",
                    "default": "120h"
                },
                "storageSpec": {
                    "type": "object",
                    "description": "Alertmanager StorageSpec for persistent data",
                    "default": {}
                },
                "persistence": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Use PVCs to persist data. If the storageSpec is provided this will not take effect.",
                            "default": false
                        },
                        "storageClass": {
                            "type": "string",
                            "description": "Persistent Volume Storage Class",
                            "default": ""
                        },
                        "accessModes": {
                            "type": "array",
                            "description": "Persistent Volume Access Modes",
                            "default": [
                                "ReadWriteOnce"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "size": {
                            "type": "string",
                            "description": "Persistent Volume Size",
                            "default": "8Gi"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Persistent Volume Claim annotations",
                            "default": {}
                        }
                    }
                },
                "paused": {
                    "type": "boolean",
                    "description": "If true, the Operator won't process any Alertmanager configuration changes",
                    "default": false
                },
                "listenLocal": {
                    "type": "boolean",
                    "description": "ListenLocal makes the Alertmanager server listen on loopback",
                    "default": false
                },
                "containers": {
                    "type": "array",
                    "description": "Containers allows injecting additional containers",
                    "default": [],
                    "items": {}
                },
                "volumes": {
                    "type": "array",
                    "description": "Volumes allows configuration of additional volumes. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "volumeMounts": {
                    "type": "array",
                    "description": "VolumeMounts allows configuration of additional VolumeMounts. Evaluated as a template",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class assigned to the Pods",
                    "default": ""
                },
                "additionalPeers": {
                    "type": "array",
                    "description": "AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster",
                    "default": [],
                    "items": {}
                },
                "routePrefix": {
                    "type": "string",
                    "description": "Prefix used to register routes, overriding externalUrl route",
                    "default": "/"
                },
                "portName": {
                    "type": "string",
                    "description": "Port name used for the pods and governing service. This defaults to web",
                    "default": "web"
                },
                "configNamespaceSelector": {
                    "type": "object",
                    "description": "Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace. This defaults to {}",
                    "default": {}
                },
                "configSelector": {
                    "type": "object",
                    "description": "AlertmanagerConfigs to be selected for to merge and configure Alertmanager with. This defaults to {}",
                    "default": {}
                },
                "configuration": {
                    "type": "object",
                    "description": "EXPERIMENTAL: alertmanagerConfiguration specifies the global Alertmanager configuration. If defined, it takes precedence over the `configSecret` field. This field may change in future releases. The specified global alertmanager config will not force add a namespace label in routes and inhibitRules",
                    "default": {}
                }
            }
        },
        "node-exporter": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "object",
                    "properties": {
                        "labels": {
                            "type": "object",
                            "properties": {
                                "jobLabel": {
                                    "type": "string",
                                    "description": "",
                                    "default": "node-exporter"
                                }
                            }
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "",
                            "default": true
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "",
                            "default": "jobLabel"
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "properties": {
                        "collector": {
                            "type": "object",
                            "properties": {
                                "filesystem": {
                                    "type": "object",
                                    "properties": {
                                        "ignored-mount-points": {
                                            "type": "string",
                                            "description": "",
                                            "default": "^/(dev|proc|sys|var/lib/docker/.+)($|/)"
                                        },
                                        "ignored-fs-types": {
                                            "type": "string",
                                            "description": "",
                                            "default": "^(autofs|binfmt_misc|cgroup|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|mqueue|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|sysfs|tracefs)$"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "kube-state-metrics": {
            "type": "object",
            "properties": {
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "",
                            "default": true
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "",
                            "default": true
                        }
                    }
                }
            }
        },
        "exporters": {
            "type": "object",
            "properties": {
                "node-exporter": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable node-exporter",
                            "default": true
                        }
                    }
                },
                "kube-state-metrics": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable kube-state-metrics",
                            "default": true
                        }
                    }
                }
            }
        },
        "kubelet": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create a ServiceMonitor to scrape kubelet service",
                    "default": true
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace where kubelet service is deployed. Related configuration `operator.kubeletService.namespace`",
                    "default": "kube-system"
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "https": {
                            "type": "boolean",
                            "description": "Enable scraping of the kubelet over HTTPS",
                            "default": true
                        },
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": "k8s-app"
                        },
                        "resource": {
                            "type": "boolean",
                            "description": "Enable scraping /metrics/resource from kubelet's service",
                            "default": false
                        },
                        "resourcePath": {
                            "type": "string",
                            "description": "From kubernetes 1.18, /metrics/resource/v1alpha1 was renamed to /metrics/resource",
                            "default": "/metrics/resource/v1alpha1"
                        },
                        "resourceRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "resourceMetricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        },
                        "cAdvisor": {
                            "type": "boolean",
                            "description": "Enable scraping /metrics/cadvisor from kubelet's service",
                            "default": true
                        },
                        "cAdvisorMetricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling for scraping cAdvisor",
                            "default": [],
                            "items": {}
                        },
                        "cAdvisorRelabelings": {
                            "type": "array",
                            "description": "Relabel configs for scraping cAdvisor",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        }
                    }
                }
            }
        },
        "blackboxExporter": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Blackbox Exporter deployment",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Blackbox Exporter image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Blackbox Exporter image repository",
                            "default": "bitnami/blackbox-exporter"
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Blackbox Exporter image pull policy",
                            "default": "IfNotPresent"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Blackbox Exporter image tag (immutable tags are recommended)",
                            "default": "0.24.0-debian-11-r109"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Blackbox Exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to blackboxExporter nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for blackboxExporter nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for blackboxExporter nodes",
                    "default": ""
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Number of Blackbox Exporter replicas to deploy",
                    "default": 1
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe on Blackbox Exporter nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe on Blackbox Exporter nodes",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 60
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe on Blackbox Exporter containers",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 15
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom livenessProbe that overrides the default one",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readinessProbe that overrides the default one",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "existingConfigMap": {
                    "type": "string",
                    "description": "ConfigMap pointing to the Blackbox Exporter configuration",
                    "default": ""
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Blackbox Exporter HTTP container port",
                            "default": 19115
                        }
                    }
                },
                "serviceAccount": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable creation of ServiceAccount for WordPress pod",
                            "default": true
                        },
                        "name": {
                            "type": "string",
                            "description": "The name of the ServiceAccount to use.",
                            "default": ""
                        },
                        "automountServiceAccountToken": {
                            "type": "boolean",
                            "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                            "default": true
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for the ServiceAccount",
                            "default": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the blackboxExporter containers",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the blackboxExporter containers",
                            "default": {}
                        }
                    }
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Blackbox Exporter pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Set Blackbox Exporter pod's Security Context fsGroup",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled Blackbox Exporter containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set Blackbox Exporter containers' Security Context runAsUser",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set Blackbox Exporter containers' Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the blackboxExporter container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "blackboxExporter pods host aliases",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for blackboxExporter pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for blackboxExporter pods",
                    "default": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `blackboxExporter.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `blackboxExporter.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `blackboxExporter.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `blackboxExporter.affinity` is set",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `blackboxExporter.affinity` is set",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for Blackbox Exporter pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Blackbox Exporter pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Blackbox Exporter pods assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Blackbox Exporter pods' priorityClassName",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Kubernetes pod scheduler registry",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "string",
                    "description": "In seconds, time the given to the Blackbox Exporter pod needs to terminate gracefully",
                    "default": ""
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Blackbox Exporter statefulset strategy type",
                            "default": "RollingUpdate"
                        }
                    }
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the Blackbox Exporter pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the Blackbox Exporter container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the Blackbox Exporter pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the Blackbox Exporter pod(s)",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Blackbox Exporter service type",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Blackbox Exporter HTTP service port",
                                    "default": 19115
                                }
                            }
                        },
                        "nodePorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "string",
                                    "description": "Node port for HTTP",
                                    "default": ""
                                }
                            }
                        },
                        "sessionAffinity": {
                            "type": "string",
                            "description": "Control where client requests go, to the same pod or round-robin",
                            "default": "None"
                        },
                        "sessionAffinityConfig": {
                            "type": "object",
                            "description": "Additional settings for the sessionAffinity",
                            "default": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Blackbox Exporter service Cluster IP",
                            "default": ""
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Blackbox Exporter service Load Balancer IP",
                            "default": ""
                        },
                        "loadBalancerSourceRanges": {
                            "type": "array",
                            "description": "Blackbox Exporter service Load Balancer sources",
                            "default": [],
                            "items": {}
                        },
                        "externalTrafficPolicy": {
                            "type": "string",
                            "description": "Blackbox Exporter service external traffic policy",
                            "default": "Cluster"
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Additional custom annotations for Blackbox Exporter service",
                            "default": {}
                        },
                        "extraPorts": {
                            "type": "array",
                            "description": "Extra ports to expose in the Blackbox Exporter service",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "kubeApiServer": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create a ServiceMonitor to scrape kube-apiserver service",
                    "default": true
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval. If not set, the Prometheus default scrape interval is used.",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": "component"
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        }
                    }
                }
            }
        },
        "kubeControllerManager": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create a ServiceMonitor to scrape kube-controller-manager service",
                    "default": true
                },
                "endpoints": {
                    "type": "array",
                    "description": "If your kube controller manager is not deployed as a pod, specify IPs it can be found on",
                    "default": [],
                    "items": {}
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace where kube-controller-manager service is deployed.",
                    "default": "kube-system"
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to create a Service object for kube-controller-manager",
                            "default": true
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Listening port of the kube-controller-manager Service object",
                                    "default": 10252
                                }
                            }
                        },
                        "targetPorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Port to target on the kube-controller-manager Pods. This should be the port that kube-controller-manager is exposing metrics on",
                                    "default": 10252
                                }
                            }
                        },
                        "selector": {
                            "type": "object",
                            "description": "Optional PODs Label selector for the service",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels for kube-controller-manaer service",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": "component"
                        },
                        "https": {
                            "type": "boolean",
                            "description": "Enable scraping kube-controller-manager over https",
                            "default": false
                        },
                        "insecureSkipVerify": {
                            "type": "string",
                            "description": "Skip TLS certificate validation when scraping",
                            "default": ""
                        },
                        "serverName": {
                            "type": "string",
                            "description": "Name of the server to use when validating TLS certificate",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        }
                    }
                }
            }
        },
        "kubeScheduler": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create a ServiceMonitor to scrape kube-scheduler service",
                    "default": true
                },
                "endpoints": {
                    "type": "array",
                    "description": "If your kube scheduler is not deployed as a pod, specify IPs it can be found on",
                    "default": [],
                    "items": {}
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace where kube-scheduler service is deployed.",
                    "default": "kube-system"
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to create a Service object for kube-scheduler",
                            "default": true
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Listening port of the kube scheduler Service object",
                                    "default": 10251
                                }
                            }
                        },
                        "targetPorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Port to target on the kube scheduler Pods. This should be the port that kube scheduler is exposing metrics on",
                                    "default": 10251
                                }
                            }
                        },
                        "selector": {
                            "type": "object",
                            "description": "Optional PODs Label selector for the service",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels for kube-scheduler service",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                            "default": ""
                        },
                        "https": {
                            "type": "boolean",
                            "description": "Enable scraping kube-scheduler over https",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": "component"
                        },
                        "insecureSkipVerify": {
                            "type": "string",
                            "description": "Skip TLS certificate validation when scraping",
                            "default": ""
                        },
                        "serverName": {
                            "type": "string",
                            "description": "Name of the server to use when validating TLS certificate",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        }
                    }
                }
            }
        },
        "coreDns": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create a ServiceMonitor to scrape coredns service",
                    "default": true
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace where core dns service is deployed.",
                    "default": "kube-system"
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to create a Service object for coredns",
                            "default": true
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Listening port of the coredns Service object",
                                    "default": 9153
                                }
                            }
                        },
                        "targetPorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Port to target on the coredns Pods. This should be the port that coredns is exposing metrics on",
                                    "default": 9153
                                }
                            }
                        },
                        "selector": {
                            "type": "object",
                            "description": "Optional PODs Label selector for the service",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels for coredns service",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval. If not set, the Prometheus default scrape interval is used.",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": "k8s-app"
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabel configs to apply to samples before ingestion.",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs to apply to samples before ingestion.",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        }
                    }
                }
            }
        },
        "kubeProxy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Create a ServiceMonitor to scrape the kube-proxy Service",
                    "default": true
                },
                "endpoints": {
                    "type": "array",
                    "description": "If your kube-proxy is not deployed as a pod, specify IPs it can be found on",
                    "default": [],
                    "items": {}
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace where kube-proxy service is deployed.",
                    "default": "kube-system"
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to create a Service object for kube-proxy",
                            "default": true
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Listening port of the kube-proxy Service object",
                                    "default": 10249
                                }
                            }
                        },
                        "targetPorts": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Port to target on the kube-proxy Pods. This should be the port that kube-proxy is exposing metrics on",
                                    "default": 10249
                                }
                            }
                        },
                        "selector": {
                            "type": "object",
                            "description": "Optional PODs Label selector for the service",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels for kube-proxy service",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "https": {
                            "type": "boolean",
                            "description": "Enable scraping kube-proxy over https.",
                            "default": false
                        },
                        "interval": {
                            "type": "string",
                            "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": "k8s-app"
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Metric relabeling",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Relabel configs",
                            "default": [],
                            "items": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        }
                    }
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create and use RBAC resources or not",
                    "default": true
                },
                "pspEnabled": {
                    "type": "boolean",
                    "description": "Whether to create a PodSecurityPolicy and bound it with RBAC. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                    "default": true
                }
            }
        }
    }
}