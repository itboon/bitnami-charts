{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override `kube-state-metrics.name` template with a string (will prepend the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override `kube-state-metrics.fullname` template with a string",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Add labels to all the deployed resources",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Add annotations to all the deployed resources",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "Add deployment host aliases",
            "default": [],
            "items": {}
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create & use RBAC resources or not",
                    "default": true
                },
                "pspEnabled": {
                    "type": "boolean",
                    "description": "Whether to create a PodSecurityPolicy and bound it with RBAC. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                    "default": true
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                    "default": {}
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "kube-state-metrics image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "kube-state-metrics image repository",
                    "default": "bitnami/kube-state-metrics"
                },
                "tag": {
                    "type": "string",
                    "description": "kube-state-metrics image tag (immutable tags are recommended)",
                    "default": "2.10.0-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "kube-state-metrics image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "kube-state-metrics image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "extraArgs": {
            "type": "object",
            "description": "Additional command line arguments to pass to kube-state-metrics",
            "default": {}
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the kube-state-metrics container(s) to automate configuration before or after startup",
            "default": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array with extra environment variables to add to kube-state-metrics nodes",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars for kube-state-metrics pod(s)",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars for kube-state-metrics pod(s)",
            "default": ""
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the kube-state-metrics pod(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the kube-state-metrics container(s)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the kube-state-metrics pod(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the kube-state-metrics pod(s)",
            "default": [],
            "items": {}
        },
        "namespaces": {
            "type": "string",
            "description": "Comma-separated list of namespaces to be enabled. Defaults to all namespaces. Evaluated as a template.",
            "default": ""
        },
        "kubeResources": {
            "type": "object",
            "properties": {
                "certificatesigningrequests": {
                    "type": "boolean",
                    "description": "Enable the `certificatesigningrequests` resource",
                    "default": true
                },
                "configmaps": {
                    "type": "boolean",
                    "description": "Enable the `configmaps` resource",
                    "default": true
                },
                "cronjobs": {
                    "type": "boolean",
                    "description": "Enable the `cronjobs` resource",
                    "default": true
                },
                "daemonsets": {
                    "type": "boolean",
                    "description": "Enable the `daemonsets` resource",
                    "default": true
                },
                "deployments": {
                    "type": "boolean",
                    "description": "Enable the `deployments` resource",
                    "default": true
                },
                "endpoints": {
                    "type": "boolean",
                    "description": "Enable the `endpoints` resource",
                    "default": true
                },
                "horizontalpodautoscalers": {
                    "type": "boolean",
                    "description": "Enable the `horizontalpodautoscalers` resource",
                    "default": true
                },
                "ingresses": {
                    "type": "boolean",
                    "description": "Enable the `ingresses` resource",
                    "default": true
                },
                "jobs": {
                    "type": "boolean",
                    "description": "Enable the `jobs` resource",
                    "default": true
                },
                "limitranges": {
                    "type": "boolean",
                    "description": "Enable the `limitranges` resource",
                    "default": true
                },
                "mutatingwebhookconfigurations": {
                    "type": "boolean",
                    "description": "Enable the `mutatingwebhookconfigurations` resource",
                    "default": true
                },
                "namespaces": {
                    "type": "boolean",
                    "description": "Enable the `namespaces` resource",
                    "default": true
                },
                "networkpolicies": {
                    "type": "boolean",
                    "description": "Enable the `networkpolicies` resource",
                    "default": true
                },
                "nodes": {
                    "type": "boolean",
                    "description": "Enable the `nodes` resource",
                    "default": true
                },
                "persistentvolumeclaims": {
                    "type": "boolean",
                    "description": "Enable the `persistentvolumeclaims` resource",
                    "default": true
                },
                "persistentvolumes": {
                    "type": "boolean",
                    "description": "Enable the `persistentvolumes` resource",
                    "default": true
                },
                "poddisruptionbudgets": {
                    "type": "boolean",
                    "description": "Enable the `poddisruptionbudgets` resource",
                    "default": true
                },
                "pods": {
                    "type": "boolean",
                    "description": "Enable the `pods` resource",
                    "default": true
                },
                "replicasets": {
                    "type": "boolean",
                    "description": "Enable the `replicasets` resource",
                    "default": true
                },
                "replicationcontrollers": {
                    "type": "boolean",
                    "description": "Enable the `replicationcontrollers` resource",
                    "default": true
                },
                "resourcequotas": {
                    "type": "boolean",
                    "description": "Enable the `resourcequotas` resource",
                    "default": true
                },
                "secrets": {
                    "type": "boolean",
                    "description": "Enable the `secrets` resource",
                    "default": true
                },
                "services": {
                    "type": "boolean",
                    "description": "Enable the `services` resource",
                    "default": true
                },
                "statefulsets": {
                    "type": "boolean",
                    "description": "Enable the `statefulsets` resource",
                    "default": true
                },
                "storageclasses": {
                    "type": "boolean",
                    "description": "Enable the `storageclasses` resource",
                    "default": true
                },
                "verticalpodautoscalers": {
                    "type": "boolean",
                    "description": "Enable the `verticalpodautoscalers` resource",
                    "default": false
                },
                "validatingwebhookconfigurations": {
                    "type": "boolean",
                    "description": "Enable the `validatingwebhookconfigurations` resource",
                    "default": false
                },
                "volumeattachments": {
                    "type": "boolean",
                    "description": "Enable the `volumeattachments` resource",
                    "default": true
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled kube-state-metrics pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set kube-state-metrics pod's Security Context fsGroup",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled kube-state-metrics containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set kube-state-metrics containers' Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set kube-state-metrics container's Security Context runAsNonRoot",
                    "default": true
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "kube-state-metrics service port",
                            "default": 8080
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Specify the nodePort value for the LoadBalancer and NodePort service types.",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Specific cluster IP when service type is cluster IP. Use `None` for headless service",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "`loadBalancerIP` if service type is `LoadBalancer`",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Address that are allowed when svc is `LoadBalancer`",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "kube-state-metrics service external traffic policy",
                    "default": "Cluster"
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for kube-state-metrics service",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Additional labels for kube-state-metrics service",
                    "default": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                }
            }
        },
        "hostNetwork": {
            "type": "boolean",
            "description": "Enable hostNetwork mode",
            "default": false
        },
        "priorityClassName": {
            "type": "string",
            "description": "Priority class assigned to the Pods",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default)",
            "default": ""
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "In seconds, time the given to the kube-state-metrics pod needs to terminate gracefully",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment",
            "default": [],
            "items": {}
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the container",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the container",
                    "default": {}
                }
            }
        },
        "replicaCount": {
            "type": "number",
            "description": "Desired number of controller pods",
            "default": 1
        },
        "podLabels": {
            "type": "object",
            "description": "Pod labels",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Pod annotations",
            "default": {}
        },
        "updateStrategy": {
            "type": "object",
            "description": "Allows setting of `RollingUpdate` strategy",
            "default": {}
        },
        "minReadySeconds": {
            "type": "number",
            "description": "How many seconds a pod needs to be ready before killing the next, during update",
            "default": 0
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match. Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Turn on and off liveness probe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Delay before liveness probe is initiated",
                    "default": 120
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "How often to perform the probe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "When the probe times out",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive failures for the probe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive successes for the probe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Turn on and off readiness probe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Delay before readiness probe is initiated",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "How often to perform the probe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "When the probe times out",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive failures for the probe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive successes for the probe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Turn on and off startup probe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Delay before startup probe is initiated",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "How often to perform the probe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "When the probe times out",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive failures for the probe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Minimum consecutive successes for the probe",
                    "default": 1
                }
            }
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom liveness probe for the Web component",
            "default": {}
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Custom liveness probe for the Web component",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Custom readiness probe for the Web component",
            "default": {}
        },
        "serviceMonitor": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Creates a ServiceMonitor to monitor kube-state-metrics",
                    "default": false
                },
                "namespace": {
                    "type": "string",
                    "description": "Namespace in which Prometheus is running",
                    "default": ""
                },
                "jobLabel": {
                    "type": "string",
                    "description": "The name of the label on the target service to use as the job name in prometheus.",
                    "default": ""
                },
                "interval": {
                    "type": "string",
                    "description": "Scrape interval (use by default, falling back to Prometheus' default)",
                    "default": ""
                },
                "scrapeTimeout": {
                    "type": "string",
                    "description": "Timeout after which the scrape is ended",
                    "default": ""
                },
                "selector": {
                    "type": "object",
                    "description": "ServiceMonitor selector labels",
                    "default": {}
                },
                "honorLabels": {
                    "type": "boolean",
                    "description": "Honor metrics labels",
                    "default": false
                },
                "relabelings": {
                    "type": "array",
                    "description": "ServiceMonitor relabelings",
                    "default": [],
                    "items": {}
                },
                "metricRelabelings": {
                    "type": "array",
                    "description": "ServiceMonitor metricRelabelings",
                    "default": [],
                    "items": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Extra labels for the ServiceMonitor",
                    "default": {}
                },
                "extraParameters": {
                    "type": "object",
                    "description": "Any extra parameter to be added to the endpoint configured in the ServiceMonitor",
                    "default": {}
                }
            }
        },
        "selfMonitor": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Creates a selfMonitor to monitor kube-state-metrics itself",
                    "default": false
                },
                "telemetryPort": {
                    "type": "number",
                    "description": "Kube-state-metrics telemetry Port",
                    "default": 8081
                },
                "telemetryNodePort": {
                    "type": "string",
                    "description": "Kube-state-metrics Node Port",
                    "default": ""
                }
            }
        }
    }
}