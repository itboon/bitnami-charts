{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override kubernetes-event-exporter.fullname include (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override kubernetes-event-exporter.fullname template",
            "default": ""
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "replicaCount": {
            "type": "number",
            "description": "Desired number of pod replicas",
            "default": 1
        },
        "revisionHistoryLimit": {
            "type": "number",
            "description": "Desired number of old ReplicaSets to retain ",
            "default": 10
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "HTTP container port",
                    "default": 2112
                }
            }
        },
        "extraContainerPorts": {
            "type": "array",
            "description": "Optionally specify extra list of additional port-mappings for the container",
            "default": [],
            "items": {}
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Container image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Container image name",
                    "default": "bitnami/kubernetes-event-exporter"
                },
                "tag": {
                    "type": "string",
                    "description": "Container image tag",
                    "default": "1.4.0-debian-11-r14"
                },
                "digest": {
                    "type": "string",
                    "description": "Container image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Container image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "Add deployment host aliases",
            "default": [],
            "items": {}
        },
        "config": {
            "type": "object",
            "properties": {
                "logLevel": {
                    "type": "string",
                    "description": "Verbosity of the logs (options: `fatal`, `error`, `warn`, `info` or `debug`)",
                    "default": "debug"
                },
                "logFormat": {
                    "type": "string",
                    "description": "How the logs are formatted. Allowed values: `pretty` or `json`",
                    "default": "pretty"
                },
                "receivers": {
                    "type": "array",
                    "description": "",
                    "items": {
                        "type": "object",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": ""
                            },
                            "file": {
                                "type": "object",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": ""
                                    },
                                    "layout": {
                                        "type": "object",
                                        "description": ""
                                    }
                                }
                            }
                        }
                    }
                },
                "route": {
                    "type": "object",
                    "properties": {
                        "routes": {
                            "type": "array",
                            "description": "",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "match": {
                                        "type": "array",
                                        "description": "",
                                        "items": {
                                            "type": "object",
                                            "properties": {
                                                "receiver": {
                                                    "type": "string",
                                                    "description": ""
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Create the RBAC roles for API accessibility",
                    "default": true
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                    "default": {}
                }
            }
        },
        "podAnnotations": {
            "type": "object",
            "description": "Pod annotations",
            "default": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Pod labels",
            "default": {}
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable security context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Group ID for the container",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable container security context",
                    "default": true
                },
                "capabilities": {
                    "type": "object",
                    "properties": {
                        "add": {
                            "type": "array",
                            "description": "Add capabilities for the securityContext",
                            "default": [],
                            "items": {}
                        },
                        "drop": {
                            "type": "array",
                            "description": "Drop capabilities for the securityContext",
                            "default": [
                                "ALL"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Allows the pod to mount the RootFS as ReadOnly only",
                    "default": true
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "If the pod should run as a non root container.",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Define the uid with which the pod will run",
                    "default": 1001
                }
            }
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "Lifecycle for the container to automate configuration before or after startup",
            "default": {}
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "Specify resource limits which the container is not allowed to succeed.",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "Specify resource requests which the container needs to spawn.",
                    "default": {}
                }
            }
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Configure startup probe for Kubernetes event exporter pod",
            "default": {}
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Configure liveness probe for Kubernetes event exporter pod",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Configure readiness probe for Kubernetes event exporter pod",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment",
            "default": {}
        },
        "priorityClassName": {
            "type": "string",
            "description": "Set Priority Class Name to allow priority control over other pods",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default)",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment",
            "default": [],
            "items": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match. Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Deployment strategy type.",
                    "default": "RollingUpdate"
                }
            }
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array containing extra env vars to be added to all containers",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "ConfigMap containing extra env vars to be added to all containers",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Secret containing extra env vars to be added to all containers",
            "default": ""
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Array to add extra mounts (normally used with extraVolumes)",
            "default": [],
            "items": {}
        },
        "extraVolumes": {
            "type": "array",
            "description": "Array to add extra volumes",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Attach additional init containers to pods",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to pods",
            "default": [],
            "items": {}
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable exposing  statistics",
                    "default": false
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ .Values.metrics.service.ports.http }}"
                                        }
                                    }
                                }
                            }
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Metrics service HTTP port",
                                    "default": 2112
                                }
                            }
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "endpoints": {
                            "type": "array",
                            "description": "",
                            "items": {
                                "type": "object",
                                "properties": {
                                    "path": {
                                        "type": "string",
                                        "description": ""
                                    }
                                }
                            }
                        },
                        "enabled": {
                            "type": "boolean",
                            "description": "Create ServiceMonitor Resource for scraping metrics using PrometheusOperator",
                            "default": false
                        },
                        "port": {
                            "type": "string",
                            "description": "Metrics service HTTP port",
                            "default": "http"
                        },
                        "path": {
                            "type": "string",
                            "description": "Metrics service HTTP path. Deprecated: Use @param metrics.serviceMonitor.endpoints instead",
                            "default": ""
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace which Prometheus is running in",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped",
                            "default": "30s"
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Specify the timeout after which the scrape is ended",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create PrometheusRule Resource for scraping metrics using PrometheusOperator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace which Prometheus is running in",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "groups": {
                            "type": "array",
                            "description": "Groups, containing the alert rules.",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "autoscaling": {
            "type": "object",
            "properties": {
                "vpa": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable VPA",
                            "default": false
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for VPA resource",
                            "default": {}
                        },
                        "recommenders": {
                            "type": "array",
                            "description": "Recommender responsible for generating recommendation for the object.",
                            "default": [],
                            "items": {}
                        },
                        "controlledResources": {
                            "type": "array",
                            "description": "VPA List of resources that the vertical pod autoscaler can control. Defaults to cpu and memory",
                            "default": [],
                            "items": {}
                        },
                        "maxAllowed": {
                            "type": "object",
                            "description": "VPA Max allowed resources for the pod",
                            "default": {}
                        },
                        "minAllowed": {
                            "type": "object",
                            "description": "VPA Min allowed resources for the pod",
                            "default": {}
                        },
                        "updatePolicy": {
                            "type": "object",
                            "properties": {
                                "minReplicas": {
                                    "type": "number",
                                    "description": "Specifies minimal number of replicas which need to be alive for VPA Updater to attempt pod eviction",
                                    "default": 1
                                },
                                "updateMode": {
                                    "type": "string",
                                    "description": "Autoscaling update policy Specifies whether recommended updates are applied when a Pod is started and whether recommended updates are applied during the life of a Pod",
                                    "default": "Auto"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}