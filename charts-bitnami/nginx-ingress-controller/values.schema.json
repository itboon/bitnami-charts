{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Add labels to all the deployed resources",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Add annotations to all the deployed resources",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Nginx Ingress Controller image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Nginx Ingress Controller image repository",
                    "default": "bitnami/nginx-ingress-controller"
                },
                "tag": {
                    "type": "string",
                    "description": "Nginx Ingress Controller image tag (immutable tags are recommended)",
                    "default": "1.8.1-debian-11-r48"
                },
                "digest": {
                    "type": "string",
                    "description": "Nginx Ingress Controller image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Nginx Ingress Controller image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "",
                    "default": 80
                },
                "https": {
                    "type": "number",
                    "description": "",
                    "default": 443
                },
                "metrics": {
                    "type": "number",
                    "description": "",
                    "default": 10254
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "Deployment pod host aliases",
            "default": [],
            "items": {}
        },
        "config": {
            "type": "object",
            "description": "Custom configuration options for NGINX",
            "default": {}
        },
        "proxySetHeaders": {
            "type": "object",
            "description": "Custom headers before sending traffic to backends",
            "default": {}
        },
        "addHeaders": {
            "type": "object",
            "description": "Custom headers before sending response traffic to the client",
            "default": {}
        },
        "defaultBackendService": {
            "type": "string",
            "description": "Default 404 backend service; required only if `defaultBackend.enabled = false`",
            "default": ""
        },
        "electionID": {
            "type": "string",
            "description": "Election ID to use for status update",
            "default": "ingress-controller-leader"
        },
        "reportNodeInternalIp": {
            "type": "boolean",
            "description": "If using `hostNetwork=true`, setting `reportNodeInternalIp=true`, will pass the flag `report-node-internal-ip-address` to Nginx Ingress Controller",
            "default": false
        },
        "watchIngressWithoutClass": {
            "type": "boolean",
            "description": "Process Ingress objects without ingressClass annotation/ingressClassName field",
            "default": false
        },
        "ingressClassResource": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the IngressClass resource",
                    "default": "nginx"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Create the IngressClass resource",
                    "default": true
                },
                "default": {
                    "type": "boolean",
                    "description": "Set the created IngressClass resource as default class",
                    "default": false
                },
                "controllerClass": {
                    "type": "string",
                    "description": "IngressClass identifier for the controller",
                    "default": "k8s.io/ingress-nginx"
                },
                "parameters": {
                    "type": "object",
                    "description": "Optional parameters for the controller",
                    "default": {}
                }
            }
        },
        "publishService": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set the endpoint records on the Ingress objects to reflect those on the service",
                    "default": false
                },
                "pathOverride": {
                    "type": "string",
                    "description": "Allows overriding of the publish service to bind to",
                    "default": ""
                }
            }
        },
        "scope": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Limit the scope of the controller.",
                    "default": false
                },
                "namespace": {
                    "type": "string",
                    "description": "Scope namespace. Defaults to `.Release.Namespace`",
                    "default": ""
                }
            }
        },
        "configMapNamespace": {
            "type": "string",
            "description": "Allows customization of the configmap / nginx-configmap namespace",
            "default": ""
        },
        "tcpConfigMapNamespace": {
            "type": "string",
            "description": "Allows customization of the tcp-services-configmap namespace",
            "default": ""
        },
        "udpConfigMapNamespace": {
            "type": "string",
            "description": "Allows customization of the udp-services-configmap namespace",
            "default": ""
        },
        "maxmindLicenseKey": {
            "type": "string",
            "description": "License key used to download Geolite2 database",
            "default": ""
        },
        "dhParam": {
            "type": "string",
            "description": "A base64ed Diffie-Hellman parameter",
            "default": ""
        },
        "tcp": {
            "type": "object",
            "description": "TCP service key:value pairs",
            "default": {}
        },
        "udp": {
            "type": "object",
            "description": "UDP service key:value pairs",
            "default": {}
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the %%MAIN_CONTAINER_NAME%% container(s) to automate configuration before or after startup",
            "default": {}
        },
        "extraArgs": {
            "type": "object",
            "description": "Additional command line arguments to pass to nginx-ingress-controller",
            "default": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Extra environment variables to be set on Nginx Ingress container",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of a existing ConfigMap containing extra environment variables",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of a existing Secret containing extra environment variables",
            "default": ""
        },
        "kind": {
            "type": "string",
            "description": "Install as Deployment or DaemonSet",
            "default": "Deployment"
        },
        "daemonset": {
            "type": "object",
            "properties": {
                "useHostPort": {
                    "type": "boolean",
                    "description": "If `kind` is `DaemonSet`, this will enable `hostPort` for `TCP/80` and `TCP/443`",
                    "default": false
                },
                "hostPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "",
                            "default": 80
                        },
                        "https": {
                            "type": "number",
                            "description": "",
                            "default": 443
                        }
                    }
                }
            }
        },
        "replicaCount": {
            "type": "number",
            "description": "Desired number of Controller pods",
            "default": 1
        },
        "updateStrategy": {
            "type": "object",
            "description": "Strategy to use to update Pods",
            "default": {}
        },
        "revisionHistoryLimit": {
            "type": "number",
            "description": "The number of old history to retain to allow rollback",
            "default": 10
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Controller pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Group ID for the container filesystem",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Controller containers' Security Context",
                    "default": true
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Switch to allow priviledge escalation on the Controller container",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "User ID for the Controller container",
                    "default": 1001
                },
                "capabilities": {
                    "type": "object",
                    "properties": {
                        "drop": {
                            "type": "array",
                            "description": "Linux Kernel capabilities that should be dropped",
                            "default": [
                                "ALL"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "add": {
                            "type": "array",
                            "description": "Linux Kernel capabilities that should be added",
                            "default": [
                                "NET_BIND_SERVICE"
                            ],
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set container's Security Context runAsNonRoot",
                    "default": true
                }
            }
        },
        "minReadySeconds": {
            "type": "number",
            "description": "How many seconds a pod needs to be ready before killing the next, during update",
            "default": 0
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the Controller container",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the Controller container",
                    "default": {}
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 3
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 3
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 3
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Override default liveness probe",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Override default readiness probe",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom liveness probe for the Web component",
            "default": {}
        },
        "lifecycle": {
            "type": "object",
            "description": "LifecycleHooks to set additional configuration at startup",
            "default": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels for Controller pods",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for Controller pods",
            "default": {}
        },
        "priorityClassName": {
            "type": "string",
            "description": "Controller priorityClassName",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default)",
            "default": ""
        },
        "hostNetwork": {
            "type": "boolean",
            "description": "If the Nginx deployment / daemonset should run on the host's network namespace",
            "default": false
        },
        "dnsPolicy": {
            "type": "string",
            "description": "By default, while using host network, name resolution uses the host's DNS",
            "default": "ClusterFirst"
        },
        "dnsConfig": {
            "type": "object",
            "description": "is an object with optional parameters to pass to the DNS resolver",
            "default": {}
        },
        "terminationGracePeriodSeconds": {
            "type": "number",
            "description": "How many seconds to wait before terminating a pod",
            "default": 60
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match. Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment. Evaluated as a template.",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment. Evaluated as a template.",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment. Evaluated as a template.",
            "default": [],
            "items": {}
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for Controller pods",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for Controller container(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add init containers to the controller pods",
            "default": [],
            "items": {}
        },
        "customTemplate": {
            "type": "object",
            "properties": {
                "configMapName": {
                    "type": "string",
                    "description": "",
                    "default": ""
                },
                "configMapKey": {
                    "type": "string",
                    "description": "",
                    "default": ""
                }
            }
        },
        "sidecars": {
            "type": "array",
            "description": "Add sidecars to the controller pods.",
            "default": [],
            "items": {}
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in",
            "default": [],
            "items": {}
        },
        "podSecurityPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                    "default": false
                }
            }
        },
        "defaultBackend": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable a default backend based on NGINX",
                    "default": true
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Add deployment host aliases",
                    "default": [],
                    "items": {}
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Default backend image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Default backend image repository",
                            "default": "bitnami/nginx"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Default backend image tag (immutable tags are recommended)",
                            "default": "1.25.2-debian-11-r2"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Default backend image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "extraArgs": {
                    "type": "object",
                    "description": "Additional command line arguments to pass to Nginx container",
                    "default": {}
                },
                "containerPort": {
                    "type": "number",
                    "description": "HTTP container port number",
                    "default": 8080
                },
                "serverBlockConfig": {
                    "type": "string",
                    "description": "NGINX backend default server block configuration",
                    "default": "location /healthz {\n  return 200;\n}\n\nlocation / {\n  return 404;\n}"
                },
                "replicaCount": {
                    "type": "number",
                    "description": "Desired number of default backend pods",
                    "default": 1
                },
                "podSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Default backend pods' Security Context",
                            "default": true
                        },
                        "fsGroup": {
                            "type": "number",
                            "description": "Group ID for the container filesystem",
                            "default": 1001
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Default backend containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the Default backend container",
                            "default": 1001
                        },
                        "runAsNonRoot": {
                            "type": "boolean",
                            "description": "Set container's Security Context runAsNonRoot",
                            "default": true
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the Default backend container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the Default backend container",
                            "default": {}
                        }
                    }
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 30
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 3
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 0
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom liveness probe for the Web component",
                    "default": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Custom liveness probe for the Web component",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Custom readiness probe for the Web component",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Extra labels for Controller pods",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for Controller pods",
                    "default": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "priorityClassName",
                    "default": ""
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Name of the k8s scheduler (other than default)",
                    "default": ""
                },
                "terminationGracePeriodSeconds": {
                    "type": "number",
                    "description": "In seconds, time the given to the pod to terminate gracefully",
                    "default": 60
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Topology Spread Constraints for pod assignment",
                    "default": [],
                    "items": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Node label key to match. Ignored if `affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Node label values to match. Ignored if `affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "command": {
                    "type": "array",
                    "description": "Override default container command (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Override default container args (useful when using custom images)",
                    "default": [],
                    "items": {}
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "for the %%MAIN_CONTAINER_NAME%% container(s) to automate configuration before or after startup",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to %%MAIN_CONTAINER_NAME%% nodes",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "Name of existing ConfigMap containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Name of existing Secret containing extra env vars for %%MAIN_CONTAINER_NAME%% nodes",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumes for the %%MAIN_CONTAINER_NAME%% pod(s)",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Optionally specify extra list of additional volumeMounts for the %%MAIN_CONTAINER_NAME%% container(s)",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Add additional sidecar containers to the %%MAIN_CONTAINER_NAME%% pod(s)",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)",
                    "default": [],
                    "items": {}
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for pod assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for pod assignment",
                    "default": [],
                    "items": {}
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes Service type for default backend",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "http": {
                                    "type": "number",
                                    "description": "Default backend service HTTP port",
                                    "default": 80
                                }
                            }
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the default backend service",
                            "default": {}
                        }
                    }
                },
                "pdb": {
                    "type": "object",
                    "properties": {
                        "create": {
                            "type": "boolean",
                            "description": "Enable/disable a Pod Disruption Budget creation for Default backend",
                            "default": false
                        },
                        "minAvailable": {
                            "type": "number",
                            "description": "Minimum number/percentage of Default backend pods that should remain scheduled",
                            "default": 1
                        },
                        "maxUnavailable": {
                            "type": "string",
                            "description": "Maximum number/percentage of Default backend pods that may be made unavailable",
                            "default": ""
                        }
                    }
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "",
                            "default": 80
                        },
                        "https": {
                            "type": "number",
                            "description": "",
                            "default": 443
                        }
                    }
                },
                "targetPorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "",
                            "default": "http"
                        },
                        "https": {
                            "type": "string",
                            "description": "",
                            "default": "https"
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "",
                            "default": ""
                        },
                        "https": {
                            "type": "string",
                            "description": "",
                            "default": ""
                        },
                        "tcp": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        },
                        "udp": {
                            "type": "object",
                            "description": "",
                            "default": {}
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type for Controller",
                    "default": "LoadBalancer"
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for controller service",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Labels for controller service",
                    "default": {}
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Controller Internal Cluster Service IP (optional)",
                    "default": ""
                },
                "externalIPs": {
                    "type": "array",
                    "description": "Controller Service external IP addresses",
                    "default": [],
                    "items": {}
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "Kubernetes LoadBalancerIP to request for Controller (optional, cloud specific)",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "List of IP CIDRs allowed access to load balancer (if supported)",
                    "default": [],
                    "items": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Set external traffic policy to: \"Local\" to preserve source IP on providers supporting it",
                    "default": ""
                },
                "healthCheckNodePort": {
                    "type": "number",
                    "description": "Set this to the managed health-check port the kube-proxy will expose. If blank, a random port in the `NodePort` range will be assigned",
                    "default": 0
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable the creation of a ServiceAccount for Controller pods",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the created ServiceAccount",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for service account.",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether RBAC rules should be created",
                    "default": true
                },
                "rules": {
                    "type": "array",
                    "description": "Custom RBAC rules",
                    "default": [],
                    "items": {}
                }
            }
        },
        "pdb": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable/disable a Pod Disruption Budget creation for Controller",
                    "default": false
                },
                "minAvailable": {
                    "type": "number",
                    "description": "Minimum number/percentage of Controller pods that should remain scheduled",
                    "default": 1
                },
                "maxUnavailable": {
                    "type": "string",
                    "description": "Maximum number/percentage of Controller pods that may be made unavailable",
                    "default": ""
                }
            }
        },
        "autoscaling": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable autoscaling for Controller",
                    "default": false
                },
                "minReplicas": {
                    "type": "number",
                    "description": "Minimum number of Controller replicas",
                    "default": 1
                },
                "maxReplicas": {
                    "type": "number",
                    "description": "Maximum number of Controller replicas",
                    "default": 11
                },
                "targetCPU": {
                    "type": "string",
                    "description": "Target CPU utilization percentage",
                    "default": ""
                },
                "targetMemory": {
                    "type": "string",
                    "description": "Target Memory utilization percentage",
                    "default": ""
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "service": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ coalesce .Values.metrics.service.ports.metrics .Values.metrics.service.port }}"
                                        }
                                    }
                                }
                            }
                        },
                        "type": {
                            "type": "string",
                            "description": "Type of Prometheus metrics service to create",
                            "default": "ClusterIP"
                        },
                        "ports": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "Service HTTP management port",
                                    "default": 9913
                                }
                            }
                        },
                        "labels": {
                            "type": "object",
                            "description": "Labels for the Prometheus exporter service",
                            "default": {}
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Enable exposing Controller statistics",
                    "default": false
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create ServiceMonitor resource for scraping metrics using PrometheusOperator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped",
                            "default": "30s"
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Specify the timeout after which the scrape is ended",
                            "default": ""
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "ServiceMonitor selector labels",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Extra annotations for the ServiceMonitor",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create PrometheusRules resource for scraping metrics using PrometheusOperator",
                            "default": false
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Used to pass Labels that are required by the Installed Prometheus Operator",
                            "default": {}
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace which Prometheus is running in",
                            "default": ""
                        },
                        "rules": {
                            "type": "array",
                            "description": "Rules to be prometheus in YAML format, check values for an example",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        }
    }
}