{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override nginx.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override nginx.fullname template",
            "default": ""
        },
        "namespaceOverride": {
            "type": "string",
            "description": "String to fully override common.names.namespace",
            "default": ""
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Extra objects to deploy (value evaluated as a template)",
            "default": [],
            "items": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Add labels to all the deployed resources",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Add annotations to all the deployed resources",
            "default": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the the deployment(s)/statefulset(s)",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "NGINX image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "NGINX image repository",
                    "default": "bitnami/nginx"
                },
                "tag": {
                    "type": "string",
                    "description": "NGINX image tag (immutable tags are recommended)",
                    "default": "1.25.2-debian-11-r3"
                },
                "digest": {
                    "type": "string",
                    "description": "NGINX image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "NGINX image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Set to true if you would like to see extra information on logs",
                    "default": false
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "Deployment pod host aliases",
            "default": [],
            "items": {}
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Extra environment variables to be set on NGINX containers",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "ConfigMap with extra environment variables",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Secret with extra environment variables",
            "default": ""
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of NGINX replicas to deploy",
            "default": 1
        },
        "revisionHistoryLimit": {
            "type": "number",
            "description": "The number of old history to retain to allow rollback",
            "default": 10
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "NGINX deployment strategy type",
                    "default": "RollingUpdate"
                },
                "rollingUpdate": {
                    "type": "object",
                    "description": "NGINX deployment rolling update configuration parameters",
                    "default": {}
                }
            }
        },
        "podLabels": {
            "type": "object",
            "description": "Additional labels for NGINX pods",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for NGINX pods",
            "default": {}
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "hostNetwork": {
            "type": "boolean",
            "description": "Specify if host network should be enabled for NGINX pod",
            "default": false
        },
        "hostIPC": {
            "type": "boolean",
            "description": "Specify if host IPC should be enabled for NGINX pod",
            "default": false
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment. Evaluated as a template.",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment. Evaluated as a template.",
            "default": [],
            "items": {}
        },
        "priorityClassName": {
            "type": "string",
            "description": "NGINX pods' priorityClassName",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default)",
            "default": ""
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "In seconds, time the given to the NGINX pod needs to terminate gracefully",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment",
            "default": [],
            "items": {}
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled NGINX pods' Security Context",
                    "default": false
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set NGINX pod's Security Context fsGroup",
                    "default": 1001
                },
                "sysctls": {
                    "type": "array",
                    "description": "sysctl settings of the NGINX pods",
                    "default": [],
                    "items": {}
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled NGINX containers' Security Context",
                    "default": false
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set NGINX container's Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set NGINX container's Security Context runAsNonRoot",
                    "default": true
                }
            }
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "Sets http port inside NGINX container",
                    "default": 8080
                },
                "https": {
                    "type": "string",
                    "description": "Sets https port inside NGINX container",
                    "default": ""
                }
            }
        },
        "extraContainerPorts": {
            "type": "array",
            "description": "Array of additional container ports for the Nginx container",
            "default": [],
            "items": {}
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the NGINX container",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the NGINX container",
                    "default": {}
                }
            }
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "Optional lifecycleHooks for the NGINX container",
            "default": {}
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 3
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 3
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom liveness probe for the Web component",
            "default": {}
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Override default liveness probe",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Override default readiness probe",
            "default": {}
        },
        "autoscaling": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable autoscaling for NGINX deployment",
                    "default": false
                },
                "minReplicas": {
                    "type": "string",
                    "description": "Minimum number of replicas to scale back",
                    "default": ""
                },
                "maxReplicas": {
                    "type": "string",
                    "description": "Maximum number of replicas to scale out",
                    "default": ""
                },
                "targetCPU": {
                    "type": "string",
                    "description": "Target CPU utilization percentage",
                    "default": ""
                },
                "targetMemory": {
                    "type": "string",
                    "description": "Target Memory utilization percentage",
                    "default": ""
                }
            }
        },
        "extraVolumes": {
            "type": "array",
            "description": "Array to add extra volumes",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Array to add extra mount",
            "default": [],
            "items": {}
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable creation of ServiceAccount for nginx pod",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to use.",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for service account. Evaluated as a template.",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Auto-mount the service account token in the pod",
                    "default": false
                }
            }
        },
        "sidecars": {
            "type": "array",
            "description": "Sidecar parameters",
            "default": [],
            "items": {}
        },
        "sidecarSingleProcessNamespace": {
            "type": "boolean",
            "description": "Enable sharing the process namespace with sidecars",
            "default": false
        },
        "initContainers": {
            "type": "array",
            "description": "Extra init containers",
            "default": [],
            "items": {}
        },
        "pdb": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Created a PodDisruptionBudget",
                    "default": false
                },
                "minAvailable": {
                    "type": "number",
                    "description": "Min number of pods that must still be available after the eviction.",
                    "default": 1
                },
                "maxUnavailable": {
                    "type": "number",
                    "description": "Max number of pods that can be unavailable after the eviction.",
                    "default": 0
                }
            }
        },
        "cloneStaticSiteFromGit": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Get the server static content from a Git repository",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Git image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Git image repository",
                            "default": "bitnami/git"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Git image tag (immutable tags are recommended)",
                            "default": "2.41.0-debian-11-r76"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Git image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Git image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "repository": {
                    "type": "string",
                    "description": "Git Repository to clone static content from",
                    "default": ""
                },
                "branch": {
                    "type": "string",
                    "description": "Git branch to checkout",
                    "default": ""
                },
                "interval": {
                    "type": "number",
                    "description": "Interval for sidecar container pull from the Git repository",
                    "default": 60
                },
                "gitClone": {
                    "type": "object",
                    "properties": {
                        "command": {
                            "type": "array",
                            "description": "Override default container command for git-clone-repository",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override default container args for git-clone-repository",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "gitSync": {
                    "type": "object",
                    "properties": {
                        "command": {
                            "type": "array",
                            "description": "Override default container command for git-repo-syncer",
                            "default": [],
                            "items": {}
                        },
                        "args": {
                            "type": "array",
                            "description": "Override default container args for git-repo-syncer",
                            "default": [],
                            "items": {}
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the git-repo-syncer container",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the git-repo-syncer container",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Additional environment variables to set for the in the containers that clone static site from git",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Add extra volume mounts for the Git containers",
                    "default": [],
                    "items": {}
                }
            }
        },
        "serverBlock": {
            "type": "string",
            "description": "Custom server block to be added to NGINX configuration",
            "default": ""
        },
        "existingServerBlockConfigmap": {
            "type": "string",
            "description": "ConfigMap with custom server block to be added to NGINX configuration",
            "default": ""
        },
        "staticSiteConfigmap": {
            "type": "string",
            "description": "Name of existing ConfigMap with the server static site content",
            "default": ""
        },
        "staticSitePVC": {
            "type": "string",
            "description": "Name of existing PVC with the server static site content",
            "default": ""
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Service type",
                    "default": "LoadBalancer"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "Service HTTP port",
                            "default": 80
                        },
                        "https": {
                            "type": "number",
                            "description": "Service HTTPS port",
                            "default": 443
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "",
                            "default": ""
                        },
                        "https": {
                            "type": "string",
                            "description": "",
                            "default": ""
                        }
                    }
                },
                "targetPort": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "",
                            "default": "http"
                        },
                        "https": {
                            "type": "string",
                            "description": "",
                            "default": "https"
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "NGINX service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "LoadBalancer service IP address",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "NGINX service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Service annotations",
                    "default": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Enable client source IP preservation",
                    "default": "Cluster"
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set to true to enable ingress record generation",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress resource",
                    "default": "nginx.local"
                },
                "path": {
                    "type": "string",
                    "description": "The Path to Nginx. You may need to set this to '/*' in order to use this with ALB ingress controllers.",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "Set the ingerssClassName on the ingress record for k8s 1.18+",
                    "default": ""
                },
                "tls": {
                    "type": "boolean",
                    "description": "Create TLS Secret",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "The list of additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "Any additional arbitrary paths that may need to be added to the ingress under the main host.",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "The tls configuration for additional hostnames to be covered with this ingress record.",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "If you're providing your own certificates, please use this to add the certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "The list of additional rules to be added to this ingress record. Evaluated as a template",
                    "default": [],
                    "items": {}
                }
            }
        },
        "healthIngress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Set to true to enable health ingress record generation",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "hostname": {
                    "type": "string",
                    "description": "When the health ingress is enabled, a host pointing to this will be created",
                    "default": "example.local"
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the hostname defined at `healthIngress.hostname` parameter",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostnames to be covered",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "TLS Secret configuration",
                    "default": [],
                    "items": {}
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "extraRules": {
                    "type": "array",
                    "description": "The list of additional rules to be added to this ingress record. Evaluated as a template",
                    "default": [],
                    "items": {}
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Start a Prometheus exporter sidecar container",
                    "default": false
                },
                "port": {
                    "type": "string",
                    "description": "NGINX Container Status Port scraped by Prometheus Exporter",
                    "default": ""
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "NGINX Prometheus exporter image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "NGINX Prometheus exporter image repository",
                            "default": "bitnami/nginx-exporter"
                        },
                        "tag": {
                            "type": "string",
                            "description": "NGINX Prometheus exporter image tag (immutable tags are recommended)",
                            "default": "0.11.0-debian-11-r324"
                        },
                        "digest": {
                            "type": "string",
                            "description": "NGINX Prometheus exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "NGINX Prometheus exporter image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Additional annotations for NGINX Prometheus exporter pod(s)",
                    "default": {}
                },
                "securityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled NGINX Exporter containers' Security Context",
                            "default": false
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "Set NGINX Exporter container's Security Context runAsUser",
                            "default": 1001
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ .Values.metrics.service.port }}"
                                        }
                                    }
                                }
                            }
                        },
                        "port": {
                            "type": "number",
                            "description": "NGINX Prometheus exporter service port",
                            "default": 9113
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the NGINX Prometheus exporter container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the NGINX Prometheus exporter container",
                            "default": {}
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PodMonitor will be discovered by Prometheus",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "honorLabels chooses the metric's labels on collisions with target labels",
                            "default": false
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator PrometheusRule (also requires `metrics.enabled` to be `true` and `metrics.prometheusRule.rules`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace for the PrometheusRule Resource (defaults to the Release Namespace)",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "rules": {
                            "type": "array",
                            "description": "Prometheus Rule definitions",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        }
    }
}