{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template (will maintain the release name)",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template",
            "default": ""
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "PyTorch image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "PyTorch image repository",
                    "default": "bitnami/pytorch"
                },
                "tag": {
                    "type": "string",
                    "description": "PyTorch image tag (immutable tags are recommended)",
                    "default": "2.0.1-debian-11-r97"
                },
                "digest": {
                    "type": "string",
                    "description": "PyTorch image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "PyTorch image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "worldSize": {
            "type": "number",
            "description": "Number of nodes that will run the code",
            "default": 1
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "pytorch": {
                    "type": "number",
                    "description": "PyTorch master port. `MASTER_PORT` will be set to this value",
                    "default": 49875
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 3
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 5
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 3
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 5
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Custom livenessProbe that overrides the default one",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Custom readinessProbe that overrides the default one",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom startupProbe that overrides the default one",
            "default": {}
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled Pytorch pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set Pytorch pods' Security Context fsGroup",
                    "default": 1001
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set Pytorch pods' Security Context runAsUser",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled Pytorch containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set Pytorch containers' Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set Pytorch containers' Security Context runAsNonRoot",
                    "default": true
                },
                "readOnlyRootFilesystem": {
                    "type": "boolean",
                    "description": "Set Pytorch containers' Security Context runAsNonRoot",
                    "default": false
                }
            }
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the Pytorch containers",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the Pytorch containers",
                    "default": {}
                }
            }
        },
        "entrypoint": {
            "type": "object",
            "properties": {
                "file": {
                    "type": "string",
                    "description": "Main entrypoint to your application",
                    "default": ""
                },
                "args": {
                    "type": "array",
                    "description": "Args required by your entrypoint",
                    "default": [],
                    "items": {}
                }
            }
        },
        "architecture": {
            "type": "string",
            "description": "Run PyTorch in standalone or distributed mode. Possible values: `standalone`, `distributed`",
            "default": "standalone"
        },
        "hostAliases": {
            "type": "array",
            "description": "Deployment pod host aliases",
            "default": [],
            "items": {}
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels for Pytorch pods",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for Pytorch pods",
            "default": {}
        },
        "existingConfigmap": {
            "type": "string",
            "description": "Config map that contains the files you want to load in PyTorch",
            "default": ""
        },
        "cloneFilesFromGit": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable in order to download files from git repository",
                    "default": false
                },
                "repository": {
                    "type": "string",
                    "description": "Repository that holds the files",
                    "default": ""
                },
                "revision": {
                    "type": "string",
                    "description": "Revision from the repository to checkout",
                    "default": ""
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Add extra volume mounts for the Git container",
                    "default": [],
                    "items": {}
                }
            }
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment. Evaluated as a template.",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment. Evaluated as a template.",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment. Evaluated as a template.",
            "default": [],
            "items": {}
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Pytorch statefulset strategy type",
                    "default": "RollingUpdate"
                }
            }
        },
        "podManagementPolicy": {
            "type": "string",
            "description": "Statefulset Pod management policy, it needs to be Parallel to be able to complete the cluster join",
            "default": "OrderedReady"
        },
        "priorityClassName": {
            "type": "string",
            "description": "Pytorch pods' priorityClassName",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
            "default": [],
            "items": {}
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default) for Pytorch pods",
            "default": ""
        },
        "terminationGracePeriodSeconds": {
            "type": "string",
            "description": "Seconds Redmine pod needs to terminate gracefully",
            "default": ""
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the Pytorch container(s) to automate configuration before or after startup",
            "default": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array with extra environment variables to add to Pytorch nodes",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars for Pytorch nodes",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars for Pytorch nodes",
            "default": ""
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the Pytorch pod(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the Pytorch container(s)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the Pytorch pod(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the %%MAIN_CONTAINER_NAME%% pod(s)",
            "default": [],
            "items": {}
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "pytorch": {
                            "type": "number",
                            "description": "Scheduler Service port",
                            "default": 49875
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "pytorch": {
                            "type": "string",
                            "description": "Node port for Pytorch",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Pytorch service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "Pytorch service Load Balancer IP",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Pytorch service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Pytorch service external traffic policy",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for Pytorch service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in Pytorch service (normally used with the `sidecars` value)",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the headless service.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "git": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Git image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Git image repository",
                    "default": "bitnami/git"
                },
                "tag": {
                    "type": "string",
                    "description": "Git image tag (immutable tags are recommended)",
                    "default": "2.41.0-debian-11-r76"
                },
                "digest": {
                    "type": "string",
                    "description": "Git image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Git image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes volume permissions in the data directory (for cases where the default k8s `runAsUser` and `fsUser` values do not work)",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r43"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable persistence using Persistent Volume Claims",
                    "default": true
                },
                "mountPath": {
                    "type": "string",
                    "description": "Path to mount the volume at.",
                    "default": "/bitnami/pytorch"
                },
                "subPath": {
                    "type": "string",
                    "description": "The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "Storage class of backing PVC",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                },
                "accessModes": {
                    "type": "array",
                    "description": "Persistent Volume Access Modes",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Size of data volume",
                    "default": "8Gi"
                },
                "existingClaim": {
                    "type": "string",
                    "description": "The name of an existing PVC to use for persistence",
                    "default": ""
                },
                "selector": {
                    "type": "object",
                    "description": "Selector to match an existing Persistent Volume for WordPress data PVC",
                    "default": {}
                },
                "dataSource": {
                    "type": "object",
                    "description": "Custom PVC data source",
                    "default": {}
                }
            }
        }
    }
}