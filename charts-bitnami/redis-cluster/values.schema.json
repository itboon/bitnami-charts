{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                },
                "redis": {
                    "type": "object",
                    "properties": {
                        "password": {
                            "type": "string",
                            "description": "Redis&reg; password (overrides `password`)",
                            "default": ""
                        }
                    }
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "Redis&reg; cluster image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "Redis&reg; cluster image repository",
                    "default": "bitnami/redis-cluster"
                },
                "tag": {
                    "type": "string",
                    "description": "Redis&reg; cluster image tag (immutable tags are recommended)",
                    "default": "7.2.1-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "Redis&reg; cluster image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "Redis&reg; cluster image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable image debug mode",
                    "default": false
                }
            }
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable NetworkPolicy",
                    "default": false
                },
                "allowExternal": {
                    "type": "boolean",
                    "description": "The Policy model to apply. Don't require client label for connections",
                    "default": true
                },
                "ingressNSMatchLabels": {
                    "type": "object",
                    "description": "Allow connections from other namespacess. Just set label for namespace and set label for pods (optional).",
                    "default": {}
                },
                "ingressNSPodMatchLabels": {
                    "type": "object",
                    "description": "For other namespaces match by pod labels and namespace labels",
                    "default": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to create",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for Cassandra Service Account",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount API credentials for a service account.",
                    "default": false
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether RBAC resources should be created",
                    "default": false
                },
                "role": {
                    "type": "object",
                    "properties": {
                        "rules": {
                            "type": "array",
                            "description": "Rules to create. It follows the role specification",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Redis&reg; pod Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Group ID for the pods",
                    "default": 1001
                },
                "runAsUser": {
                    "type": "number",
                    "description": "User ID for the pods",
                    "default": 1001
                },
                "sysctls": {
                    "type": "array",
                    "description": "Set namespaced sysctls for the pods",
                    "default": [],
                    "items": {}
                }
            }
        },
        "podDisruptionBudget": {
            "type": "object",
            "description": "Limits the number of pods of the replicated application that are down simultaneously from voluntary disruptions",
            "default": {}
        },
        "minAvailable": {
            "type": "string",
            "description": "Min number of pods that must still be available after the eviction",
            "default": ""
        },
        "maxUnavailable": {
            "type": "string",
            "description": "Max number of pods that can be unavailable after the eviction",
            "default": ""
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "User ID for the containers.",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Run container as non root",
                    "default": true
                }
            }
        },
        "usePassword": {
            "type": "boolean",
            "description": "Use password authentication",
            "default": true
        },
        "password": {
            "type": "string",
            "description": "Redis&reg; password (ignored if existingSecret set)",
            "default": ""
        },
        "existingSecret": {
            "type": "string",
            "description": "Name of existing secret object (for password authentication)",
            "default": ""
        },
        "existingSecretPasswordKey": {
            "type": "string",
            "description": "Name of key containing password to be retrieved from the existing secret",
            "default": ""
        },
        "usePasswordFile": {
            "type": "boolean",
            "description": "Mount passwords as files instead of environment variables",
            "default": false
        },
        "tls": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable TLS support for replication traffic",
                    "default": false
                },
                "authClients": {
                    "type": "boolean",
                    "description": "Require clients to authenticate or not",
                    "default": true
                },
                "autoGenerated": {
                    "type": "boolean",
                    "description": "Generate automatically self-signed TLS certificates",
                    "default": false
                },
                "existingSecret": {
                    "type": "string",
                    "description": "The name of the existing secret that contains the TLS certificates",
                    "default": ""
                },
                "certificatesSecret": {
                    "type": "string",
                    "description": "DEPRECATED. Use tls.existingSecret instead",
                    "default": ""
                },
                "certFilename": {
                    "type": "string",
                    "description": "Certificate filename",
                    "default": ""
                },
                "certKeyFilename": {
                    "type": "string",
                    "description": "Certificate key filename",
                    "default": ""
                },
                "certCAFilename": {
                    "type": "string",
                    "description": "CA Certificate filename",
                    "default": ""
                },
                "dhParamsFilename": {
                    "type": "string",
                    "description": "File containing DH params (in order to support DH based ciphers)",
                    "default": ""
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "ports": {
                    "type": "object",
                    "properties": {
                        "redis": {
                            "type": "number",
                            "description": "Kubernetes Redis service port",
                            "default": 6379
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "redis": {
                            "type": "string",
                            "description": "Node port for Redis",
                            "default": ""
                        }
                    }
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in the service (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Provide any additional annotations which may be required.",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Additional labels for redis service",
                    "default": {}
                },
                "type": {
                    "type": "string",
                    "description": "Service type for default redis service",
                    "default": "ClusterIP"
                },
                "clusterIP": {
                    "type": "string",
                    "description": "Service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "Load balancer IP if `service.type` is `LoadBalancer`",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "Service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Service external traffic policy",
                    "default": "Cluster"
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the headless service.",
                            "default": {}
                        }
                    }
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable persistence on Redis&reg;",
                    "default": true
                },
                "path": {
                    "type": "string",
                    "description": "Path to mount the volume at, to use other images Redis&reg; images.",
                    "default": "/bitnami/redis/data"
                },
                "subPath": {
                    "type": "string",
                    "description": "The subdirectory of the volume to mount to, useful in dev environments and one PV for multiple services",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "Storage class of backing PVC",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                },
                "accessModes": {
                    "type": "array",
                    "description": "Persistent Volume Access Modes",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Size of data volume",
                    "default": "8Gi"
                },
                "matchLabels": {
                    "type": "object",
                    "description": "Persistent Volume selectors",
                    "default": {}
                },
                "matchExpressions": {
                    "type": "object",
                    "description": "matchExpressions Persistent Volume selectors",
                    "default": {}
                }
            }
        },
        "persistentVolumeClaimRetentionPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Controls if and how PVCs are deleted during the lifecycle of a StatefulSet",
                    "default": false
                },
                "whenScaled": {
                    "type": "string",
                    "description": "Volume retention behavior when the replica count of the StatefulSet is reduced",
                    "default": "Retain"
                },
                "whenDeleted": {
                    "type": "string",
                    "description": "Volume retention behavior that applies when the StatefulSet is deleted",
                    "default": "Retain"
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes volume permissions in the registry (for cases where the default k8s `runAsUser` and `fsUser` values do not work)",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag",
                            "default": "11-debian-11-r60"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the containers.",
                            "default": 0
                        },
                        "privileged": {
                            "type": "boolean",
                            "description": "Run container as privileged",
                            "default": false
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                }
            }
        },
        "podSecurityPolicy": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                    "default": false
                }
            }
        },
        "redis": {
            "type": "object",
            "properties": {
                "command": {
                    "type": "array",
                    "description": "Redis&reg; entrypoint string. The command `redis-server` is executed if this is not provided",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Arguments for the provided command if needed",
                    "default": [],
                    "items": {}
                },
                "updateStrategy": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Argo Workflows statefulset strategy type",
                            "default": "RollingUpdate"
                        },
                        "rollingUpdate": {
                            "type": "object",
                            "properties": {
                                "partition": {
                                    "type": "number",
                                    "description": "Partition update strategy",
                                    "default": 0
                                }
                            }
                        }
                    }
                },
                "podManagementPolicy": {
                    "type": "string",
                    "description": "Statefulset Pod management policy, it needs to be Parallel to be able to complete the cluster join",
                    "default": "Parallel"
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Deployment pod host aliases",
                    "default": [],
                    "items": {}
                },
                "hostNetwork": {
                    "type": "boolean",
                    "description": "Host networking requested for this pod. Use the host's network namespace.",
                    "default": false
                },
                "useAOFPersistence": {
                    "type": "string",
                    "description": "Whether to use AOF Persistence mode or not",
                    "default": "yes"
                },
                "containerPorts": {
                    "type": "object",
                    "properties": {
                        "redis": {
                            "type": "number",
                            "description": "Redis&reg; port",
                            "default": 6379
                        },
                        "bus": {
                            "type": "number",
                            "description": "The busPort should be obtained adding 10000 to the redisPort. By default: 10000 + 6379 = 16379",
                            "default": 16379
                        }
                    }
                },
                "lifecycleHooks": {
                    "type": "object",
                    "description": "LifecycleHook to set additional configuration before or after startup. Evaluated as a template",
                    "default": {}
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Extra volumes to add to the deployment",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Extra volume mounts to add to the container",
                    "default": [],
                    "items": {}
                },
                "customLivenessProbe": {
                    "type": "object",
                    "description": "Override default liveness probe",
                    "default": {}
                },
                "customReadinessProbe": {
                    "type": "object",
                    "description": "Override default readiness probe",
                    "default": {}
                },
                "customStartupProbe": {
                    "type": "object",
                    "description": "Custom startupProbe that overrides the default one",
                    "default": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Extra init containers to add to the deployment",
                    "default": [],
                    "items": {}
                },
                "sidecars": {
                    "type": "array",
                    "description": "Extra sidecar containers to add to the deployment",
                    "default": [],
                    "items": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Additional labels for Redis&reg; pod",
                    "default": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Redis&reg; Master pod priorityClassName",
                    "default": ""
                },
                "defaultConfigOverride": {
                    "type": "string",
                    "description": "Optional default Redis&reg; configuration for the nodes",
                    "default": ""
                },
                "configmap": {
                    "type": "string",
                    "description": "Additional Redis&reg; configuration for the nodes",
                    "default": ""
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "An array to add extra environment variables",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap with extra environment variables",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret with extra environment variables",
                    "default": ""
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Redis&reg; additional annotations",
                    "default": {}
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                },
                "schedulerName": {
                    "type": "string",
                    "description": "Use an alternate scheduler, e.g. \"stork\".",
                    "default": ""
                },
                "shareProcessNamespace": {
                    "type": "boolean",
                    "description": "Enable shared process namespace in a pod.",
                    "default": false
                },
                "livenessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable livenessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for livenessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for livenessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for livenessProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for livenessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for livenessProbe",
                            "default": 1
                        }
                    }
                },
                "readinessProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable readinessProbe",
                            "default": true
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for readinessProbe",
                            "default": 5
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for readinessProbe",
                            "default": 5
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for readinessProbe",
                            "default": 1
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for readinessProbe",
                            "default": 5
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for readinessProbe",
                            "default": 1
                        }
                    }
                },
                "startupProbe": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable startupProbe",
                            "default": false
                        },
                        "path": {
                            "type": "string",
                            "description": "Path to check for startupProbe",
                            "default": "/"
                        },
                        "initialDelaySeconds": {
                            "type": "number",
                            "description": "Initial delay seconds for startupProbe",
                            "default": 300
                        },
                        "periodSeconds": {
                            "type": "number",
                            "description": "Period seconds for startupProbe",
                            "default": 10
                        },
                        "timeoutSeconds": {
                            "type": "number",
                            "description": "Timeout seconds for startupProbe",
                            "default": 5
                        },
                        "failureThreshold": {
                            "type": "number",
                            "description": "Failure threshold for startupProbe",
                            "default": 6
                        },
                        "successThreshold": {
                            "type": "number",
                            "description": "Success threshold for startupProbe",
                            "default": 1
                        }
                    }
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Redis&reg; pod affinity preset. Ignored if `redis.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Redis&reg; pod anti-affinity preset. Ignored if `redis.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Redis&reg; node affinity preset type. Ignored if `redis.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Redis&reg; node label key to match Ignored if `redis.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Redis&reg; node label values to match. Ignored if `redis.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity settings for Redis&reg; pod assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for Redis&reg; pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for Redis&reg; pods assignment",
                    "default": [],
                    "items": {}
                },
                "topologySpreadConstraints": {
                    "type": "array",
                    "description": "Pod topology spread constraints for Redis&reg; pod",
                    "default": [],
                    "items": {}
                }
            }
        },
        "updateJob": {
            "type": "object",
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "number",
                    "description": "Number of seconds the Job to create the cluster will be waiting for the Nodes to be ready.",
                    "default": 600
                },
                "command": {
                    "type": "array",
                    "description": "Container command (using container default if not set)",
                    "default": [],
                    "items": {}
                },
                "args": {
                    "type": "array",
                    "description": "Container args (using container default if not set)",
                    "default": [],
                    "items": {}
                },
                "hostAliases": {
                    "type": "array",
                    "description": "Deployment pod host aliases",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Job annotations",
                    "default": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Job pod annotations",
                    "default": {}
                },
                "podLabels": {
                    "type": "object",
                    "description": "Pod extra labels",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "An array to add extra environment variables",
                    "default": [],
                    "items": {}
                },
                "extraEnvVarsCM": {
                    "type": "string",
                    "description": "ConfigMap containing extra environment variables",
                    "default": ""
                },
                "extraEnvVarsSecret": {
                    "type": "string",
                    "description": "Secret containing extra environment variables",
                    "default": ""
                },
                "extraVolumes": {
                    "type": "array",
                    "description": "Extra volumes to add to the deployment",
                    "default": [],
                    "items": {}
                },
                "extraVolumeMounts": {
                    "type": "array",
                    "description": "Extra volume mounts to add to the container",
                    "default": [],
                    "items": {}
                },
                "initContainers": {
                    "type": "array",
                    "description": "Extra init containers to add to the deployment",
                    "default": [],
                    "items": {}
                },
                "podAffinityPreset": {
                    "type": "string",
                    "description": "Update job pod affinity preset. Ignored if `updateJob.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "podAntiAffinityPreset": {
                    "type": "string",
                    "description": "Update job pod anti-affinity preset. Ignored if `updateJob.affinity` is set. Allowed values: `soft` or `hard`",
                    "default": "soft"
                },
                "nodeAffinityPreset": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Update job node affinity preset type. Ignored if `updateJob.affinity` is set. Allowed values: `soft` or `hard`",
                            "default": ""
                        },
                        "key": {
                            "type": "string",
                            "description": "Update job node label key to match Ignored if `updateJob.affinity` is set.",
                            "default": ""
                        },
                        "values": {
                            "type": "array",
                            "description": "Update job node label values to match. Ignored if `updateJob.affinity` is set.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "affinity": {
                    "type": "object",
                    "description": "Affinity for update job pods assignment",
                    "default": {}
                },
                "nodeSelector": {
                    "type": "object",
                    "description": "Node labels for update job pods assignment",
                    "default": {}
                },
                "tolerations": {
                    "type": "array",
                    "description": "Tolerations for update job pods assignment",
                    "default": [],
                    "items": {}
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Priority class name",
                    "default": ""
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                }
            }
        },
        "cluster": {
            "type": "object",
            "properties": {
                "init": {
                    "type": "boolean",
                    "description": "Enable the initialization of the Redis&reg; Cluster",
                    "default": true
                },
                "nodes": {
                    "type": "number",
                    "description": "The number of master nodes should always be >= 3, otherwise cluster creation will fail",
                    "default": 6
                },
                "replicas": {
                    "type": "number",
                    "description": "Number of replicas for every master in the cluster",
                    "default": 1
                },
                "externalAccess": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable access to the Redis",
                            "default": false
                        },
                        "hostMode": {
                            "type": "boolean",
                            "description": "Set cluster preferred endpoint type as hostname",
                            "default": false
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "type": {
                                    "type": "string",
                                    "description": "Type for the services used to expose every Pod",
                                    "default": "LoadBalancer"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Port for the services used to expose every Pod",
                                    "default": 6379
                                },
                                "loadBalancerIP": {
                                    "type": "array",
                                    "description": "Array of load balancer IPs for each Redis&reg; node. Length must be the same as cluster.nodes",
                                    "default": [],
                                    "items": {}
                                },
                                "loadBalancerSourceRanges": {
                                    "type": "array",
                                    "description": "Service Load Balancer sources",
                                    "default": [],
                                    "items": {}
                                },
                                "annotations": {
                                    "type": "object",
                                    "description": "Annotations to add to the services used to expose every Pod of the Redis&reg; Cluster",
                                    "default": {}
                                }
                            }
                        }
                    }
                },
                "update": {
                    "type": "object",
                    "properties": {
                        "addNodes": {
                            "type": "boolean",
                            "description": "Boolean to specify if you want to add nodes after the upgrade",
                            "default": false
                        },
                        "currentNumberOfNodes": {
                            "type": "number",
                            "description": "Number of currently deployed Redis&reg; nodes",
                            "default": 6
                        },
                        "currentNumberOfReplicas": {
                            "type": "number",
                            "description": "Number of currently deployed Redis&reg; replicas",
                            "default": 1
                        },
                        "newExternalIPs": {
                            "type": "array",
                            "description": "External IPs obtained from the services for the new nodes to add to the cluster",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Start a side-car prometheus exporter",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Redis&reg; exporter image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Redis&reg; exporter image name",
                            "default": "bitnami/redis-exporter"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Redis&reg; exporter image tag",
                            "default": "1.54.0-debian-11-r0"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Redis&reg; exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Redis&reg; exporter image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Specify docker-registry secret names as an array",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "description": "Metrics exporter resource requests and limits",
                    "default": {}
                },
                "extraArgs": {
                    "type": "object",
                    "description": "Extra arguments for the binary; possible values [here](https://github.com/oliver006/redis_exporter)",
                    "default": {}
                },
                "extraEnvVars": {
                    "type": "array",
                    "description": "Array with extra environment variables to add to Redis&reg; exporter",
                    "default": [],
                    "items": {}
                },
                "podAnnotations": {
                    "type": "object",
                    "properties": {
                        "prometheus": {
                            "type": "object",
                            "properties": {
                                "io/scrape": {
                                    "type": "string",
                                    "description": "",
                                    "default": "true"
                                },
                                "io/port": {
                                    "type": "string",
                                    "description": "",
                                    "default": "9121"
                                }
                            }
                        }
                    }
                },
                "podLabels": {
                    "type": "object",
                    "description": "Additional labels for Metrics exporter pod",
                    "default": {}
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Metrics Containers' Security Context",
                            "default": false
                        },
                        "allowPrivilegeEscalation": {
                            "type": "boolean",
                            "description": "Allow Privilege Escalation for metrics container",
                            "default": false
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "If `true`, creates a Prometheus Operator ServiceMonitor (also requires `metrics.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Optional namespace which Prometheus is running in",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "How frequently to scrape metrics (use by default, falling back to Prometheus' default)",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "ServiceMonitor extra labels",
                            "default": {}
                        },
                        "annotations": {
                            "type": "object",
                            "description": "ServiceMonitor annotations",
                            "default": {}
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Set this to true to create prometheusRules for Prometheus operator",
                            "default": false
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so prometheusRules will be discovered by Prometheus",
                            "default": {}
                        },
                        "namespace": {
                            "type": "string",
                            "description": "namespace where prometheusRules resource should be created",
                            "default": ""
                        },
                        "rules": {
                            "type": "array",
                            "description": "Create specified [rules](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/), check values for an example.",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "priorityClassName": {
                    "type": "string",
                    "description": "Metrics exporter pod priorityClassName",
                    "default": ""
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "Kubernetes Service type (redis metrics)",
                            "default": "ClusterIP"
                        },
                        "loadBalancerIP": {
                            "type": "string",
                            "description": "Use serviceLoadBalancerIP to request a specific static IP, otherwise leave blank",
                            "default": ""
                        },
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the services to monitor.",
                            "default": {}
                        },
                        "labels": {
                            "type": "object",
                            "description": "Additional labels for the metrics service",
                            "default": {}
                        },
                        "clusterIP": {
                            "type": "string",
                            "description": "Service Cluster IP",
                            "default": ""
                        }
                    }
                }
            }
        },
        "sysctlImage": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable an init container to modify Kernel settings",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "sysctlImage command to execute",
                    "default": [],
                    "items": {}
                },
                "registry": {
                    "type": "string",
                    "description": "sysctlImage Init container registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "sysctlImage Init container repository",
                    "default": "bitnami/os-shell"
                },
                "tag": {
                    "type": "string",
                    "description": "sysctlImage Init container tag",
                    "default": "11-debian-11-r60"
                },
                "digest": {
                    "type": "string",
                    "description": "sysctlImage Init container digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "sysctlImage Init container pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "mountHostSys": {
                    "type": "boolean",
                    "description": "Mount the host `/sys` folder to `/host-sys`",
                    "default": false
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable Containers' Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the containers.",
                            "default": 0
                        },
                        "privileged": {
                            "type": "boolean",
                            "description": "Run privileged as privileged",
                            "default": true
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the container",
                            "default": {}
                        }
                    }
                }
            }
        }
    }
}