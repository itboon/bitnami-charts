{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname",
            "default": ""
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes cluster domain name",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release",
            "default": [],
            "items": {}
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the deployment",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the deployment",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "SonarQube&trade; image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "SonarQube&trade; image repository",
                    "default": "bitnami/sonarqube"
                },
                "tag": {
                    "type": "string",
                    "description": "SonarQube&trade; image tag (immutable tags are recommended)",
                    "default": "10.2.0-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "SonarQube&trade; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "SonarQube&trade; image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "SonarQube&trade; image pull secrets",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Enable SonarQube&trade; image debug mode",
                    "default": false
                }
            }
        },
        "sonarqubeUsername": {
            "type": "string",
            "description": "SonarQube&trade; username",
            "default": "user"
        },
        "sonarqubePassword": {
            "type": "string",
            "description": "SonarQube&trade; user password",
            "default": ""
        },
        "provisioningFolder": {
            "type": "string",
            "description": "Directory to use for provisioning content to Sonarqube",
            "default": "/bitnami/sonarqube-provisioning"
        },
        "existingSecret": {
            "type": "string",
            "description": "Name of existing secret containing SonarQube&trade; credentials",
            "default": ""
        },
        "sonarqubeEmail": {
            "type": "string",
            "description": "SonarQube&trade; user email",
            "default": "user@example.com"
        },
        "minHeapSize": {
            "type": "string",
            "description": "Minimum heap size for SonarQube&trade;",
            "default": "1024m"
        },
        "maxHeapSize": {
            "type": "string",
            "description": "Maximum heap size for SonarQube&trade;",
            "default": "2048m"
        },
        "jvmOpts": {
            "type": "string",
            "description": "Values to add to SONARQUBE_WEB_JAVA_ADD_OPTS",
            "default": ""
        },
        "jvmCeOpts": {
            "type": "string",
            "description": "Values to add to SONAR_CE_JAVAADDITIONALOPTS",
            "default": ""
        },
        "startTimeout": {
            "type": "number",
            "description": "Timeout for the application to start in seconds",
            "default": 150
        },
        "extraProperties": {
            "type": "array",
            "description": "List of extra properties to be set in the sonar.properties file (key=value format)",
            "default": [],
            "items": {}
        },
        "sonarqubeSkipInstall": {
            "type": "boolean",
            "description": "Skip wizard installation",
            "default": false
        },
        "sonarSecurityRealm": {
            "type": "string",
            "description": "Set this to LDAP authenticate first against the external sytem. If the external system is not",
            "default": ""
        },
        "sonarAuthenticatorDowncase": {
            "type": "string",
            "description": "Set to true when connecting to a LDAP server using a case-insensitive setup.",
            "default": ""
        },
        "ldap": {
            "type": "object",
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL of the LDAP server. If you are using ldaps, you should install the server certificate into the Java truststore",
                    "default": ""
                },
                "bindDn": {
                    "type": "string",
                    "description": "The username of an LDAP user to connect (or bind) with. Leave this blank for anonymous access to the LDAP directory.",
                    "default": ""
                },
                "bindPassword": {
                    "type": "string",
                    "description": "The password of the user to connect with. Leave this blank for anonymous access to the LDAP directory.",
                    "default": ""
                },
                "authentication": {
                    "type": "string",
                    "description": "Possible values: simple, CRAM-MD5, DIGEST-MD5, GSSAPI. See the tutorial on authentication mechanisms (<http://java.sun.com/products/jndi/tutorial/ldap/security/auth.html>)",
                    "default": "simple"
                },
                "realm": {
                    "type": "string",
                    "description": "See Digest-MD5 Authentication, CRAM-MD5 Authentication (<http://java.sun.com/products/jndi/tutorial/ldap/security/digest.html>)",
                    "default": ""
                },
                "contextFactoryClass": {
                    "type": "string",
                    "description": "Context factory class.",
                    "default": "com.sun.jndi.ldap.LdapCtxFactory"
                },
                "StartTLS": {
                    "type": "boolean",
                    "description": "Enable use of StartTLS",
                    "default": false
                },
                "followReferrals": {
                    "type": "boolean",
                    "description": "Follow referrals or not",
                    "default": true
                },
                "user": {
                    "type": "object",
                    "properties": {
                        "baseDn": {
                            "type": "string",
                            "description": "Distinguished Name (DN) of the root node in LDAP from which to search for users.",
                            "default": ""
                        },
                        "request": {
                            "type": "string",
                            "description": "LDAP user request.",
                            "default": "(&(objectClass=inetOrgPerson)(uid={login}))"
                        },
                        "realNameAttribute": {
                            "type": "string",
                            "description": "in LDAP defining the user’s real name.",
                            "default": "cn"
                        },
                        "emailAttribute": {
                            "type": "string",
                            "description": "Attribute in LDAP defining the user’s email.",
                            "default": "mail"
                        }
                    }
                },
                "group": {
                    "type": "object",
                    "properties": {
                        "baseDn": {
                            "type": "string",
                            "description": "Distinguished Name (DN) of the root node in LDAP from which to search for groups.",
                            "default": ""
                        },
                        "request": {
                            "type": "string",
                            "description": "LDAP group request.",
                            "default": "(&(objectClass=groupOfUniqueNames)(uniqueMember={dn}))"
                        },
                        "idAttribute": {
                            "type": "string",
                            "description": "Attribute in LDAP defining the group’s real name.",
                            "default": "cn"
                        }
                    }
                }
            }
        },
        "smtpHost": {
            "type": "string",
            "description": "SMTP server host",
            "default": ""
        },
        "smtpPort": {
            "type": "string",
            "description": "SMTP server port",
            "default": ""
        },
        "smtpUser": {
            "type": "string",
            "description": "SMTP username",
            "default": ""
        },
        "smtpPassword": {
            "type": "string",
            "description": "SMTP user password",
            "default": ""
        },
        "smtpProtocol": {
            "type": "string",
            "description": "SMTP protocol",
            "default": ""
        },
        "smtpExistingSecret": {
            "type": "string",
            "description": "The name of an existing secret with SMTP credentials",
            "default": ""
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array with extra environment variables to add to SonarQube&trade; nodes",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars for SonarQube&trade; nodes",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars for SonarQube&trade; nodes",
            "default": ""
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of SonarQube&trade; replicas to deploy",
            "default": 1
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "SonarQube&trade; HTTP container port",
                    "default": 9000
                },
                "elastic": {
                    "type": "number",
                    "description": "SonarQube&trade; Elasticsearch container port",
                    "default": 9001
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe on SonarQube&trade; containers",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 100
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe on SonarQube&trade; containers",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 100
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe on SonarQube&trade; containers",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 15
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Custom livenessProbe that overrides the default one",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Custom readinessProbe that overrides the default one",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom startupProbe that overrides the default one",
            "default": {}
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the SonarQube&trade; containers",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "properties": {
                        "cpu": {
                            "type": "string",
                            "description": "",
                            "default": "100m"
                        },
                        "memory": {
                            "type": "string",
                            "description": "",
                            "default": "2048Mi"
                        }
                    }
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled SonarQube&trade; pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set SonarQube&trade; pod's Security Context fsGroup",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled SonarQube&trade; containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set SonarQube&trade; containers' Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set SonarQube&trade; containers' Security Context runAsNonRoot",
                    "default": true
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "SonarQube&trade; pods host aliases",
            "default": [],
            "items": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels for SonarQube&trade; pods",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for SonarQube&trade; pods",
            "default": {}
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match. Ignored if `affinity` is set",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for SonarQube&trade; pods assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for SonarQube&trade; pods assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for SonarQube&trade; pods assignment",
            "default": [],
            "items": {}
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "SonarQube&trade; statefulset strategy type",
                    "default": "RollingUpdate"
                }
            }
        },
        "priorityClassName": {
            "type": "string",
            "description": "SonarQube&trade; pods' priorityClassName",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Name of the k8s scheduler (other than default) for SonarQube&trade; pods",
            "default": ""
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the SonarQube&trade; container(s) to automate configuration before or after startup",
            "default": {}
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the SonarQube&trade; pod(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the SonarQube&trade; container(s)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the SonarQube&trade; pod(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the SonarQube&trade; pod(s)",
            "default": [],
            "items": {}
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "SonarQube&trade; service type",
                    "default": "LoadBalancer"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "SonarQube&trade; service HTTP port",
                            "default": 80
                        },
                        "elastic": {
                            "type": "number",
                            "description": "SonarQube&trade; service ElasticSearch port",
                            "default": 9001
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Node port for HTTP",
                            "default": ""
                        },
                        "elastic": {
                            "type": "string",
                            "description": "Node port for ElasticSearch",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "SonarQube&trade; service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "SonarQube&trade; service Load Balancer IP",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "SonarQube&trade; service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "SonarQube&trade; service external traffic policy",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for SonarQube&trade; service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in SonarQube&trade; service (normally used with the `sidecars` value)",
                    "default": [],
                    "items": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                }
            }
        },
        "ingress": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ingress record generation for SonarQube&trade;",
                    "default": false
                },
                "pathType": {
                    "type": "string",
                    "description": "Ingress path type",
                    "default": "ImplementationSpecific"
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Force Ingress API version (automatically detected if not set)",
                    "default": ""
                },
                "ingressClassName": {
                    "type": "string",
                    "description": "IngressClass that will be be used to implement the Ingress (Kubernetes 1.18+)",
                    "default": ""
                },
                "hostname": {
                    "type": "string",
                    "description": "Default host for the ingress record",
                    "default": "sonarqube.local"
                },
                "path": {
                    "type": "string",
                    "description": "Default path for the ingress record",
                    "default": "/"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional annotations for the Ingress resource. To enable certificate autogeneration, place here your cert-manager annotations.",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Additional labels for the Ingress resource.",
                    "default": {}
                },
                "tls": {
                    "type": "boolean",
                    "description": "Enable TLS configuration for the host defined at `ingress.hostname` parameter",
                    "default": false
                },
                "selfSigned": {
                    "type": "boolean",
                    "description": "Create a TLS secret for this ingress record using self-signed certificates generated by Helm",
                    "default": false
                },
                "extraHosts": {
                    "type": "array",
                    "description": "An array with additional hostname(s) to be covered with the ingress record",
                    "default": [],
                    "items": {}
                },
                "extraPaths": {
                    "type": "array",
                    "description": "An array with additional arbitrary paths that may need to be added to the ingress under the main host",
                    "default": [],
                    "items": {}
                },
                "extraTls": {
                    "type": "array",
                    "description": "TLS configuration for additional hostname(s) to be covered with this ingress record",
                    "default": [],
                    "items": {}
                },
                "secrets": {
                    "type": "array",
                    "description": "Custom TLS certificates as secrets",
                    "default": [],
                    "items": {}
                },
                "extraRules": {
                    "type": "array",
                    "description": "Additional rules to be covered with this ingress record",
                    "default": [],
                    "items": {}
                }
            }
        },
        "caCerts": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable the use of caCerts",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r57"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "secret": {
                    "type": "string",
                    "description": "Name of the secret containing the certificates",
                    "default": "ca-certs-secret"
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "Set init container's Security Context runAsUser",
                            "default": 0
                        }
                    }
                }
            }
        },
        "plugins": {
            "type": "object",
            "properties": {
                "install": {
                    "type": "array",
                    "description": "List of plugin URLS to download and install",
                    "default": [],
                    "items": {}
                },
                "netrcCreds": {
                    "type": "string",
                    "description": ".netrc secret file with a key \"netrc\" to use basic auth while downloading plugins",
                    "default": ""
                },
                "noCheckCertificate": {
                    "type": "boolean",
                    "description": "Set to true to not validate the server's certificate to download plugin",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r57"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "Set init container's Security Context runAsUser",
                            "default": 0
                        }
                    }
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable persistence using Persistent Volume Claims",
                    "default": false
                },
                "storageClass": {
                    "type": "string",
                    "description": "Persistent Volume storage class",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "Persistent Volume access modes",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Persistent Volume size",
                    "default": "10Gi"
                },
                "dataSource": {
                    "type": "object",
                    "description": "Custom PVC data source",
                    "default": {}
                },
                "existingClaim": {
                    "type": "string",
                    "description": "The name of an existing PVC to use for persistence",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Persistent Volume Claim annotations",
                    "default": {}
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner/group of the PV mount point to `runAsUser:fsGroup`",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r57"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "runAsUser": {
                            "type": "number",
                            "description": "Set init container's Security Context runAsUser",
                            "default": 0
                        }
                    }
                }
            }
        },
        "sysctl": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable kernel settings modifier image",
                    "default": true
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "OS Shell + Utility image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "OS Shell + Utility image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "OS Shell + Utility image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r57"
                        },
                        "digest": {
                            "type": "string",
                            "description": "OS Shell + Utility image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "OS Shell + Utility image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "OS Shell + Utility image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the init container",
                            "default": {}
                        }
                    }
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether RBAC resources should be created",
                    "default": false
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Specifies whether a ServiceAccount should be created",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service account to use. If not set and create is true, a name is generated using the fullname template.",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount service account token for the server service account",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for service account. Evaluated as a template. Only used if `create` is `true`.",
                    "default": {}
                }
            }
        },
        "autoscaling": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Horizontal POD autoscaling for SonarQube&trade;",
                    "default": false
                },
                "minReplicas": {
                    "type": "number",
                    "description": "Minimum number of SonarQube&trade; replicas",
                    "default": 1
                },
                "maxReplicas": {
                    "type": "number",
                    "description": "Maximum number of SonarQube&trade; replicas",
                    "default": 11
                },
                "targetCPU": {
                    "type": "number",
                    "description": "Target CPU utilization percentage",
                    "default": 50
                },
                "targetMemory": {
                    "type": "number",
                    "description": "Target Memory utilization percentage",
                    "default": 50
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "jmx": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Whether or not to expose JMX metrics to Prometheus",
                            "default": false
                        },
                        "image": {
                            "type": "object",
                            "properties": {
                                "registry": {
                                    "type": "string",
                                    "description": "JMX exporter image registry",
                                    "default": "docker.io"
                                },
                                "repository": {
                                    "type": "string",
                                    "description": "JMX exporter image repository",
                                    "default": "bitnami/jmx-exporter"
                                },
                                "tag": {
                                    "type": "string",
                                    "description": "JMX exporter image tag (immutable tags are recommended)",
                                    "default": "0.19.0-debian-11-r63"
                                },
                                "digest": {
                                    "type": "string",
                                    "description": "JMX exporter image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                                    "default": ""
                                },
                                "pullPolicy": {
                                    "type": "string",
                                    "description": "JMX exporter image pull policy",
                                    "default": "IfNotPresent"
                                },
                                "pullSecrets": {
                                    "type": "array",
                                    "description": "Specify docker-registry secret names as an array",
                                    "default": [],
                                    "items": {}
                                }
                            }
                        },
                        "containerPorts": {
                            "type": "object",
                            "properties": {
                                "metrics": {
                                    "type": "number",
                                    "description": "JMX Exporter metrics container port",
                                    "default": 10445
                                }
                            }
                        },
                        "resources": {
                            "type": "object",
                            "properties": {
                                "limits": {
                                    "type": "object",
                                    "description": "The resources limits for the init container",
                                    "default": {}
                                },
                                "requests": {
                                    "type": "object",
                                    "description": "The requested resources for the init container",
                                    "default": {}
                                }
                            }
                        },
                        "containerSecurityContext": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enabled JMX Exporter containers' Security Context",
                                    "default": true
                                },
                                "runAsUser": {
                                    "type": "number",
                                    "description": "Set JMX Exporter containers' Security Context runAsUser",
                                    "default": 1001
                                },
                                "runAsNonRoot": {
                                    "type": "boolean",
                                    "description": "Set JMX Exporter containers' Security Context runAsNonRoot",
                                    "default": true
                                }
                            }
                        },
                        "whitelistObjectNames": {
                            "type": "array",
                            "description": "Allows setting which JMX objects you want to expose to via JMX stats to JMX Exporter",
                            "default": [
                                "java.lang:*",
                                "SonarQube:*",
                                "Tomcat:*"
                            ],
                            "items": {
                                "type": "string"
                            }
                        },
                        "configuration": {
                            "type": "string",
                            "description": "Configuration file for JMX exporter",
                            "default": "jmxUrl: service:jmx:rmi:///jndi/rmi://127.0.0.1:10443/jmxrmi\nlowercaseOutputName: true\nlowercaseOutputLabelNames: true\nssl: false\n{{- if .Values.metrics.jmx.whitelistObjectNames }}\nwhitelistObjectNames: [\"{{ join \"\\\",\\\"\" .Values.metrics.jmx.whitelistObjectNames }}\"]\n{{- end }}\nrules:\n- pattern: java.lang<type=(.+), name=(.+)><(.+)>(\\w+)\n  name: java_lang_$1_$4_$3_$2\n- pattern: java.lang<type=(.+), name=(.+)><>(\\w+)\n  name: java_lang_$1_$3_$2\n- pattern: java.lang<type=(.*)>\n- pattern: SonarQube<name=(.+)><>(\\w+)\n  name: sonarqube_$1_$2\n- pattern: Tomcat<type=(.+), name=(.+)><>(\\w+)\n  name: tomcat_$1_$3_$2"
                        },
                        "service": {
                            "type": "object",
                            "properties": {
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "metrics": {
                                            "type": "number",
                                            "description": "JMX Exporter Prometheus port",
                                            "default": 10443
                                        }
                                    }
                                },
                                "annotations": {
                                    "type": "object",
                                    "properties": {
                                        "prometheus": {
                                            "type": "object",
                                            "properties": {
                                                "io/scrape": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "true"
                                                },
                                                "io/port": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "{{ .Values.metrics.jmx.service.ports.metrics }}"
                                                },
                                                "io/path": {
                                                    "type": "string",
                                                    "description": "",
                                                    "default": "/"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "if `true`, creates a Prometheus Operator ServiceMonitor (requires `metrics.jmx.enabled` to be `true`)",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "labels": {
                            "type": "object",
                            "description": "Extra labels for the ServiceMonitor",
                            "default": {}
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in Prometheus",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "How frequently to scrape metrics",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Specify additional relabeling of metrics",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Specify general relabeling",
                            "default": [],
                            "items": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        }
                    }
                }
            }
        },
        "postgresql": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Deploy PostgreSQL subchart",
                    "default": true
                },
                "nameOverride": {
                    "type": "string",
                    "description": "Override name of the PostgreSQL chart",
                    "default": ""
                },
                "auth": {
                    "type": "object",
                    "properties": {
                        "existingSecret": {
                            "type": "string",
                            "description": "Existing secret containing the password of the PostgreSQL chart",
                            "default": ""
                        },
                        "password": {
                            "type": "string",
                            "description": "Password for the postgres user of the PostgreSQL chart (auto-generated if not set)",
                            "default": ""
                        },
                        "username": {
                            "type": "string",
                            "description": "Username to create when deploying the PostgreSQL chart",
                            "default": "bn_sonarqube"
                        },
                        "database": {
                            "type": "string",
                            "description": "Database to create when deploying the PostgreSQL chart",
                            "default": "bitnami_sonarqube"
                        }
                    }
                },
                "primary": {
                    "type": "object",
                    "properties": {
                        "service": {
                            "type": "object",
                            "properties": {
                                "ports": {
                                    "type": "object",
                                    "properties": {
                                        "postgresql": {
                                            "type": "number",
                                            "description": "PostgreSQL service port",
                                            "default": 5432
                                        }
                                    }
                                }
                            }
                        },
                        "persistence": {
                            "type": "object",
                            "properties": {
                                "enabled": {
                                    "type": "boolean",
                                    "description": "Enable PostgreSQL Primary data persistence using PVC",
                                    "default": true
                                },
                                "existingClaim": {
                                    "type": "string",
                                    "description": "Name of an existing PVC to use",
                                    "default": ""
                                },
                                "storageClass": {
                                    "type": "string",
                                    "description": "PVC Storage Class for PostgreSQL Primary data volume",
                                    "default": ""
                                },
                                "accessMode": {
                                    "type": "string",
                                    "description": "PVC Access Mode for PostgreSQL volume",
                                    "default": "ReadWriteOnce"
                                },
                                "size": {
                                    "type": "string",
                                    "description": "PVC Storage Request for PostgreSQL volume",
                                    "default": "8Gi"
                                }
                            }
                        }
                    }
                }
            }
        },
        "externalDatabase": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Host of an external PostgreSQL instance to connect (only if postgresql.enabled=false)",
                    "default": ""
                },
                "user": {
                    "type": "string",
                    "description": "User of an external PostgreSQL instance to connect (only if postgresql.enabled=false)",
                    "default": "postgres"
                },
                "password": {
                    "type": "string",
                    "description": "Password of an external PostgreSQL instance to connect (only if postgresql.enabled=false)",
                    "default": ""
                },
                "existingSecret": {
                    "type": "string",
                    "description": "Secret containing the password of an external PostgreSQL instance to connect (only if postgresql.enabled=false)",
                    "default": ""
                },
                "database": {
                    "type": "string",
                    "description": "Database inside an external PostgreSQL to connect (only if postgresql.enabled=false)",
                    "default": "sonarqube"
                },
                "port": {
                    "type": "number",
                    "description": "Port of an external PostgreSQL to connect (only if postgresql.enabled=false)",
                    "default": 5432
                }
            }
        }
    }
}