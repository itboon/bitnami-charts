{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "storageClass": {
                    "type": "string",
                    "description": "Global StorageClass for Persistent Volume(s)",
                    "default": ""
                }
            }
        },
        "kubeVersion": {
            "type": "string",
            "description": "Override Kubernetes version",
            "default": ""
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override common.names.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override common.names.fullname template",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "extraDeploy": {
            "type": "array",
            "description": "Extra objects to deploy (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "commonLabels": {
            "type": "object",
            "description": "Add labels to all the deployed resources",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Add annotations to all the deployed resources",
            "default": {}
        },
        "namespaceOverride": {
            "type": "string",
            "description": "Override namespace for ZooKeeper resources",
            "default": ""
        },
        "diagnosticMode": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable diagnostic mode (all probes will be disabled and the command will be overridden)",
                    "default": false
                },
                "command": {
                    "type": "array",
                    "description": "Command to override all containers in the statefulset",
                    "default": [
                        "sleep"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "args": {
                    "type": "array",
                    "description": "Args to override all containers in the statefulset",
                    "default": [
                        "infinity"
                    ],
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "ZooKeeper image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "ZooKeeper image repository",
                    "default": "bitnami/zookeeper"
                },
                "tag": {
                    "type": "string",
                    "description": "ZooKeeper image tag (immutable tags are recommended)",
                    "default": "3.9.0-debian-11-r11"
                },
                "digest": {
                    "type": "string",
                    "description": "ZooKeeper image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "ZooKeeper image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "Specify docker-registry secret names as an array",
                    "default": [],
                    "items": {}
                },
                "debug": {
                    "type": "boolean",
                    "description": "Specify if debug values should be set",
                    "default": false
                }
            }
        },
        "auth": {
            "type": "object",
            "properties": {
                "client": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable ZooKeeper client-server authentication. It uses SASL/Digest-MD5",
                            "default": false
                        },
                        "clientUser": {
                            "type": "string",
                            "description": "User that will use ZooKeeper clients to auth",
                            "default": ""
                        },
                        "clientPassword": {
                            "type": "string",
                            "description": "Password that will use ZooKeeper clients to auth",
                            "default": ""
                        },
                        "serverUsers": {
                            "type": "string",
                            "description": "Comma, semicolon or whitespace separated list of user to be created",
                            "default": ""
                        },
                        "serverPasswords": {
                            "type": "string",
                            "description": "Comma, semicolon or whitespace separated list of passwords to assign to users when created",
                            "default": ""
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Use existing secret (ignores previous passwords)",
                            "default": ""
                        }
                    }
                },
                "quorum": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable ZooKeeper server-server authentication. It uses SASL/Digest-MD5",
                            "default": false
                        },
                        "learnerUser": {
                            "type": "string",
                            "description": "User that the ZooKeeper quorumLearner will use to authenticate to quorumServers.",
                            "default": ""
                        },
                        "learnerPassword": {
                            "type": "string",
                            "description": "Password that the ZooKeeper quorumLearner will use to authenticate to quorumServers.",
                            "default": ""
                        },
                        "serverUsers": {
                            "type": "string",
                            "description": "Comma, semicolon or whitespace separated list of users for the quorumServers.",
                            "default": ""
                        },
                        "serverPasswords": {
                            "type": "string",
                            "description": "Comma, semicolon or whitespace separated list of passwords to assign to users when created",
                            "default": ""
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Use existing secret (ignores previous passwords)",
                            "default": ""
                        }
                    }
                }
            }
        },
        "tickTime": {
            "type": "number",
            "description": "Basic time unit (in milliseconds) used by ZooKeeper for heartbeats",
            "default": 2000
        },
        "initLimit": {
            "type": "number",
            "description": "ZooKeeper uses to limit the length of time the ZooKeeper servers in quorum have to connect to a leader",
            "default": 10
        },
        "syncLimit": {
            "type": "number",
            "description": "How far out of date a server can be from a leader",
            "default": 5
        },
        "preAllocSize": {
            "type": "number",
            "description": "Block size for transaction log file",
            "default": 65536
        },
        "snapCount": {
            "type": "number",
            "description": "The number of transactions recorded in the transaction log before a snapshot can be taken (and the transaction log rolled)",
            "default": 100000
        },
        "maxClientCnxns": {
            "type": "number",
            "description": "Limits the number of concurrent connections that a single client may make to a single member of the ZooKeeper ensemble",
            "default": 60
        },
        "maxSessionTimeout": {
            "type": "number",
            "description": "Maximum session timeout (in milliseconds) that the server will allow the client to negotiate",
            "default": 40000
        },
        "heapSize": {
            "type": "number",
            "description": "Size (in MB) for the Java Heap options (Xmx and Xms)",
            "default": 1024
        },
        "fourlwCommandsWhitelist": {
            "type": "string",
            "description": "A list of comma separated Four Letter Words commands that can be executed",
            "default": "srvr, mntr, ruok"
        },
        "minServerId": {
            "type": "number",
            "description": "Minimal SERVER_ID value, nodes increment their IDs respectively",
            "default": 1
        },
        "listenOnAllIPs": {
            "type": "boolean",
            "description": "Allow ZooKeeper to listen for connections from its peers on all available IP addresses",
            "default": false
        },
        "autopurge": {
            "type": "object",
            "properties": {
                "snapRetainCount": {
                    "type": "number",
                    "description": "The most recent snapshots amount (and corresponding transaction logs) to retain",
                    "default": 3
                },
                "purgeInterval": {
                    "type": "number",
                    "description": "The time interval (in hours) for which the purge task has to be triggered",
                    "default": 0
                }
            }
        },
        "logLevel": {
            "type": "string",
            "description": "Log level for the ZooKeeper server. ERROR by default",
            "default": "ERROR"
        },
        "jvmFlags": {
            "type": "string",
            "description": "Default JVM flags for the ZooKeeper process",
            "default": ""
        },
        "dataLogDir": {
            "type": "string",
            "description": "Dedicated data log directory",
            "default": ""
        },
        "configuration": {
            "type": "string",
            "description": "Configure ZooKeeper with a custom zoo.cfg file",
            "default": ""
        },
        "existingConfigmap": {
            "type": "string",
            "description": "The name of an existing ConfigMap with your custom configuration for ZooKeeper",
            "default": ""
        },
        "extraEnvVars": {
            "type": "array",
            "description": "Array with extra environment variables to add to ZooKeeper nodes",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "Name of existing ConfigMap containing extra env vars for ZooKeeper nodes",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Name of existing Secret containing extra env vars for ZooKeeper nodes",
            "default": ""
        },
        "command": {
            "type": "array",
            "description": "Override default container command (useful when using custom images)",
            "default": [
                "/scripts/setup.sh"
            ],
            "items": {
                "type": "string"
            }
        },
        "args": {
            "type": "array",
            "description": "Override default container args (useful when using custom images)",
            "default": [],
            "items": {}
        },
        "replicaCount": {
            "type": "number",
            "description": "Number of ZooKeeper nodes",
            "default": 1
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "client": {
                    "type": "number",
                    "description": "ZooKeeper client container port",
                    "default": 2181
                },
                "tls": {
                    "type": "number",
                    "description": "ZooKeeper TLS container port",
                    "default": 3181
                },
                "follower": {
                    "type": "number",
                    "description": "ZooKeeper follower container port",
                    "default": 2888
                },
                "election": {
                    "type": "number",
                    "description": "ZooKeeper election container port",
                    "default": 3888
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe on ZooKeeper containers",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                },
                "probeCommandTimeout": {
                    "type": "number",
                    "description": "Probe command timeout for livenessProbe",
                    "default": 2
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe on ZooKeeper containers",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                },
                "probeCommandTimeout": {
                    "type": "number",
                    "description": "Probe command timeout for readinessProbe",
                    "default": 2
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe on ZooKeeper containers",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 30
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 1
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 15
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Custom livenessProbe that overrides the default one",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Custom readinessProbe that overrides the default one",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Custom startupProbe that overrides the default one",
            "default": {}
        },
        "lifecycleHooks": {
            "type": "object",
            "description": "for the ZooKeeper container(s) to automate configuration before or after startup",
            "default": {}
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the ZooKeeper containers",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "properties": {
                        "memory": {
                            "type": "string",
                            "description": "The requested memory for the ZooKeeper containers",
                            "default": "256Mi"
                        },
                        "cpu": {
                            "type": "string",
                            "description": "The requested cpu for the ZooKeeper containers",
                            "default": "250m"
                        }
                    }
                }
            }
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled ZooKeeper pods' Security Context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Set ZooKeeper pod's Security Context fsGroup",
                    "default": 1001
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enabled ZooKeeper containers' Security Context",
                    "default": true
                },
                "runAsUser": {
                    "type": "number",
                    "description": "Set ZooKeeper containers' Security Context runAsUser",
                    "default": 1001
                },
                "runAsNonRoot": {
                    "type": "boolean",
                    "description": "Set ZooKeeper containers' Security Context runAsNonRoot",
                    "default": true
                },
                "allowPrivilegeEscalation": {
                    "type": "boolean",
                    "description": "Force the child process to be run as nonprivilege",
                    "default": false
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "ZooKeeper pods host aliases",
            "default": [],
            "items": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Extra labels for ZooKeeper pods",
            "default": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Annotations for ZooKeeper pods",
            "default": {}
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment spread across your cluster among failure-domains. Evaluated as a template",
            "default": [],
            "items": {}
        },
        "podManagementPolicy": {
            "type": "string",
            "description": "StatefulSet controller supports relax its ordering guarantees while preserving its uniqueness and identity guarantees. There are two valid pod management policies: `OrderedReady` and `Parallel`",
            "default": "Parallel"
        },
        "priorityClassName": {
            "type": "string",
            "description": "Name of the existing priority class to be used by ZooKeeper pods, priority class needs to be created beforehand",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Kubernetes pod scheduler registry",
            "default": ""
        },
        "updateStrategy": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "ZooKeeper statefulset strategy type",
                    "default": "RollingUpdate"
                },
                "rollingUpdate": {
                    "type": "object",
                    "description": "ZooKeeper statefulset rolling update configuration parameters",
                    "default": {}
                }
            }
        },
        "extraVolumes": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumes for the ZooKeeper pod(s)",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "Optionally specify extra list of additional volumeMounts for the ZooKeeper container(s)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Add additional sidecar containers to the ZooKeeper pod(s)",
            "default": [],
            "items": {}
        },
        "initContainers": {
            "type": "array",
            "description": "Add additional init containers to the ZooKeeper pod(s)",
            "default": [],
            "items": {}
        },
        "pdb": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Deploy a pdb object for the ZooKeeper pod",
                    "default": false
                },
                "minAvailable": {
                    "type": "string",
                    "description": "Minimum available ZooKeeper replicas",
                    "default": ""
                },
                "maxUnavailable": {
                    "type": "number",
                    "description": "Maximum unavailable ZooKeeper replicas",
                    "default": 1
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "number",
                            "description": "ZooKeeper client service port",
                            "default": 2181
                        },
                        "tls": {
                            "type": "number",
                            "description": "ZooKeeper TLS service port",
                            "default": 3181
                        },
                        "follower": {
                            "type": "number",
                            "description": "ZooKeeper follower service port",
                            "default": 2888
                        },
                        "election": {
                            "type": "number",
                            "description": "ZooKeeper election service port",
                            "default": 3888
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "client": {
                            "type": "string",
                            "description": "Node port for clients",
                            "default": ""
                        },
                        "tls": {
                            "type": "string",
                            "description": "Node port for TLS",
                            "default": ""
                        }
                    }
                },
                "disableBaseClientPort": {
                    "type": "boolean",
                    "description": "Remove client port from service definitions.",
                    "default": false
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Control where client requests go, to the same pod or round-robin",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                },
                "clusterIP": {
                    "type": "string",
                    "description": "ZooKeeper service Cluster IP",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "ZooKeeper service Load Balancer IP",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "ZooKeeper service Load Balancer sources",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "ZooKeeper service external traffic policy",
                    "default": "Cluster"
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for ZooKeeper service",
                    "default": {}
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in the ZooKeeper service (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "headless": {
                    "type": "object",
                    "properties": {
                        "annotations": {
                            "type": "object",
                            "description": "Annotations for the Headless Service",
                            "default": {}
                        },
                        "publishNotReadyAddresses": {
                            "type": "boolean",
                            "description": "If the ZooKeeper headless service should publish DNS records for not ready pods",
                            "default": true
                        },
                        "servicenameOverride": {
                            "type": "string",
                            "description": "String to partially override headless service name",
                            "default": ""
                        }
                    }
                }
            }
        },
        "networkPolicy": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether a NetworkPolicy should be created",
                    "default": false
                },
                "allowExternal": {
                    "type": "boolean",
                    "description": "Don't require client label for connections",
                    "default": true
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Enable creation of ServiceAccount for ZooKeeper pod",
                    "default": false
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ServiceAccount to use.",
                    "default": ""
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Allows auto mount of ServiceAccountToken on the serviceAccount created",
                    "default": true
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional custom annotations for the ServiceAccount",
                    "default": {}
                }
            }
        },
        "persistence": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable ZooKeeper data persistence using PVC. If false, use emptyDir",
                    "default": true
                },
                "existingClaim": {
                    "type": "string",
                    "description": "Name of an existing PVC to use (only when deploying a single replica)",
                    "default": ""
                },
                "storageClass": {
                    "type": "string",
                    "description": "PVC Storage Class for ZooKeeper data volume",
                    "default": ""
                },
                "accessModes": {
                    "type": "array",
                    "description": "PVC Access modes",
                    "default": [
                        "ReadWriteOnce"
                    ],
                    "items": {
                        "type": "string"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "PVC Storage Request for ZooKeeper data volume",
                    "default": "8Gi"
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations for the PVC",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Labels for the PVC",
                    "default": {}
                },
                "selector": {
                    "type": "object",
                    "description": "Selector to match an existing Persistent Volume for ZooKeeper's data PVC",
                    "default": {}
                },
                "dataLogDir": {
                    "type": "object",
                    "properties": {
                        "size": {
                            "type": "string",
                            "description": "PVC Storage Request for ZooKeeper's dedicated data log directory",
                            "default": "8Gi"
                        },
                        "existingClaim": {
                            "type": "string",
                            "description": "Provide an existing `PersistentVolumeClaim` for ZooKeeper's data log directory",
                            "default": ""
                        },
                        "selector": {
                            "type": "object",
                            "description": "Selector to match an existing Persistent Volume for ZooKeeper's data log PVC",
                            "default": {}
                        }
                    }
                }
            }
        },
        "volumePermissions": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable init container that changes the owner and group of the persistent volume",
                    "default": false
                },
                "image": {
                    "type": "object",
                    "properties": {
                        "registry": {
                            "type": "string",
                            "description": "Init container volume-permissions image registry",
                            "default": "docker.io"
                        },
                        "repository": {
                            "type": "string",
                            "description": "Init container volume-permissions image repository",
                            "default": "bitnami/os-shell"
                        },
                        "tag": {
                            "type": "string",
                            "description": "Init container volume-permissions image tag (immutable tags are recommended)",
                            "default": "11-debian-11-r51"
                        },
                        "digest": {
                            "type": "string",
                            "description": "Init container volume-permissions image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                            "default": ""
                        },
                        "pullPolicy": {
                            "type": "string",
                            "description": "Init container volume-permissions image pull policy",
                            "default": "IfNotPresent"
                        },
                        "pullSecrets": {
                            "type": "array",
                            "description": "Init container volume-permissions image pull secrets",
                            "default": [],
                            "items": {}
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "Init container volume-permissions resource limits",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "Init container volume-permissions resource requests",
                            "default": {}
                        }
                    }
                },
                "containerSecurityContext": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enabled init container Security Context",
                            "default": true
                        },
                        "runAsUser": {
                            "type": "number",
                            "description": "User ID for the init container",
                            "default": 0
                        }
                    }
                }
            }
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable Prometheus to access ZooKeeper metrics endpoint",
                    "default": false
                },
                "containerPort": {
                    "type": "number",
                    "description": "ZooKeeper Prometheus Exporter container port",
                    "default": 9141
                },
                "service": {
                    "type": "object",
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "ZooKeeper Prometheus Exporter service type",
                            "default": "ClusterIP"
                        },
                        "port": {
                            "type": "number",
                            "description": "ZooKeeper Prometheus Exporter service port",
                            "default": 9141
                        },
                        "annotations": {
                            "type": "object",
                            "properties": {
                                "prometheus": {
                                    "type": "object",
                                    "properties": {
                                        "io/scrape": {
                                            "type": "string",
                                            "description": "",
                                            "default": "true"
                                        },
                                        "io/port": {
                                            "type": "string",
                                            "description": "",
                                            "default": "{{ .Values.metrics.service.port }}"
                                        },
                                        "io/path": {
                                            "type": "string",
                                            "description": "",
                                            "default": "/metrics"
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create ServiceMonitor Resource for scraping metrics using Prometheus Operator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace for the ServiceMonitor Resource (defaults to the Release Namespace)",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped.",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus",
                            "default": {}
                        },
                        "selector": {
                            "type": "object",
                            "description": "Prometheus instance selector labels",
                            "default": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "RelabelConfigs to apply to samples before scraping",
                            "default": [],
                            "items": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "MetricRelabelConfigs to apply to samples before ingestion",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                },
                "prometheusRule": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create a PrometheusRule for Prometheus Operator",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace for the PrometheusRule Resource (defaults to the Release Namespace)",
                            "default": ""
                        },
                        "additionalLabels": {
                            "type": "object",
                            "description": "Additional labels that can be used so PrometheusRule will be discovered by Prometheus",
                            "default": {}
                        },
                        "rules": {
                            "type": "array",
                            "description": "PrometheusRule definitions",
                            "default": [],
                            "items": {}
                        }
                    }
                }
            }
        },
        "tls": {
            "type": "object",
            "properties": {
                "client": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable TLS for client connections",
                            "default": false
                        },
                        "auth": {
                            "type": "string",
                            "description": "SSL Client auth. Can be \"none\", \"want\" or \"need\".",
                            "default": "none"
                        },
                        "autoGenerated": {
                            "type": "boolean",
                            "description": "Generate automatically self-signed TLS certificates for ZooKeeper client communications",
                            "default": false
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the TLS certificates for ZooKeeper client communications",
                            "default": ""
                        },
                        "existingSecretKeystoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.client.existingSecret containing the Keystore.",
                            "default": ""
                        },
                        "existingSecretTruststoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.client.existingSecret containing the Truststore.",
                            "default": ""
                        },
                        "keystorePath": {
                            "type": "string",
                            "description": "Location of the KeyStore file used for Client connections",
                            "default": "/opt/bitnami/zookeeper/config/certs/client/zookeeper.keystore.jks"
                        },
                        "truststorePath": {
                            "type": "string",
                            "description": "Location of the TrustStore file used for Client connections",
                            "default": "/opt/bitnami/zookeeper/config/certs/client/zookeeper.truststore.jks"
                        },
                        "passwordsSecretName": {
                            "type": "string",
                            "description": "Existing secret containing Keystore and truststore passwords",
                            "default": ""
                        },
                        "passwordsSecretKeystoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.client.passwordsSecretName containing the password for the Keystore.",
                            "default": ""
                        },
                        "passwordsSecretTruststoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.client.passwordsSecretName containing the password for the Truststore.",
                            "default": ""
                        },
                        "keystorePassword": {
                            "type": "string",
                            "description": "Password to access KeyStore if needed",
                            "default": ""
                        },
                        "truststorePassword": {
                            "type": "string",
                            "description": "Password to access TrustStore if needed",
                            "default": ""
                        }
                    }
                },
                "quorum": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Enable TLS for quorum protocol",
                            "default": false
                        },
                        "auth": {
                            "type": "string",
                            "description": "SSL Quorum Client auth. Can be \"none\", \"want\" or \"need\".",
                            "default": "none"
                        },
                        "autoGenerated": {
                            "type": "boolean",
                            "description": "Create self-signed TLS certificates. Currently only supports PEM certificates.",
                            "default": false
                        },
                        "existingSecret": {
                            "type": "string",
                            "description": "Name of the existing secret containing the TLS certificates for ZooKeeper quorum protocol",
                            "default": ""
                        },
                        "existingSecretKeystoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.quorum.existingSecret containing the Keystore.",
                            "default": ""
                        },
                        "existingSecretTruststoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.quorum.existingSecret containing the Truststore.",
                            "default": ""
                        },
                        "keystorePath": {
                            "type": "string",
                            "description": "Location of the KeyStore file used for Quorum protocol",
                            "default": "/opt/bitnami/zookeeper/config/certs/quorum/zookeeper.keystore.jks"
                        },
                        "truststorePath": {
                            "type": "string",
                            "description": "Location of the TrustStore file used for Quorum protocol",
                            "default": "/opt/bitnami/zookeeper/config/certs/quorum/zookeeper.truststore.jks"
                        },
                        "passwordsSecretName": {
                            "type": "string",
                            "description": "Existing secret containing Keystore and truststore passwords",
                            "default": ""
                        },
                        "passwordsSecretKeystoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.quorum.passwordsSecretName containing the password for the Keystore.",
                            "default": ""
                        },
                        "passwordsSecretTruststoreKey": {
                            "type": "string",
                            "description": "The secret key from the tls.quorum.passwordsSecretName containing the password for the Truststore.",
                            "default": ""
                        },
                        "keystorePassword": {
                            "type": "string",
                            "description": "Password to access KeyStore if needed",
                            "default": ""
                        },
                        "truststorePassword": {
                            "type": "string",
                            "description": "Password to access TrustStore if needed",
                            "default": ""
                        }
                    }
                },
                "resources": {
                    "type": "object",
                    "properties": {
                        "limits": {
                            "type": "object",
                            "description": "The resources limits for the TLS init container",
                            "default": {}
                        },
                        "requests": {
                            "type": "object",
                            "description": "The requested resources for the TLS init container",
                            "default": {}
                        }
                    }
                }
            }
        }
    }
}